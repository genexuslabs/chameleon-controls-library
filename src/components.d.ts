/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import {
  ChGridCellClickedEvent,
  ChGridSelectionChangedEvent,
} from "./components/grid/types";
import { ChGridColumn } from "./components/grid-column/ch-grid-column";
import {
  ChPaginatorActivePageChangedEvent,
  ChPaginatorNavigationButtonClieckedEvent,
} from "./components/paginator/types";
import { GxGrid } from "./components/gx-grid/gx-grid-chameleon";
export namespace Components {
  interface ChGrid {
    onRowHighlightedClass: string;
    onRowSelectedClass: string;
    rowSelectionMode: "none" | "single" | "multiple";
  }
  interface ChGridActionSettings {
    disabled: boolean;
  }
  interface ChGridActionbar {}
  interface ChGridColumn {
    columnId: string;
    hideable: boolean;
    order: number;
    resizeable: boolean;
    resizing: boolean;
    size: string;
  }
  interface ChGridColumnResize {
    column: ChGridColumn;
  }
  interface ChGridColumnset {}
  interface ChGridRowset {}
  interface ChGridRowsetLegend {}
  interface ChIcon {
    /**
     * If enabled, the icon will display its inherent/natural color
     */
    autoColor: boolean;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy: boolean;
    /**
     * The URL of the icon.
     */
    src: string;
  }
  interface ChPaginator {
    activePage: number;
    maxSize: number;
    renderButtonFirst: boolean;
    renderButtonLast: boolean;
    renderButtonNext: boolean;
    renderButtonPrevious: boolean;
    renderFirstLastPages: boolean;
    textDots: string;
    textFirst: string;
    textLast: string;
    textNext: string;
    textPrevious: string;
    totalPages: number;
  }
  interface ChSidebarMenu {
    /**
     * The initial active item (optional)
     */
    activeItemId: string;
    /**
     * Determines if the menu can be collapsed
     */
    collapsible: boolean;
    /**
     * Allows to set the distance to the top of the page on the menu
     */
    distanceToTop: number;
    /**
     * The menu title
     */
    menuTitle: string;
    /**
     * The presence of this attribute allows the menu to have only one list opened at the same time
     */
    singleListOpen: boolean;
  }
  interface ChSidebarMenuList {}
  interface ChSidebarMenuListItem {
    /**
     * The first list item icon (optional)
     */
    itemIconSrc: string;
    /**
     * If this attribute is present the item will be initially uncollapsed
     */
    uncollapsed: boolean;
  }
  interface GxGridChameleon {
    grid: GxGrid;
    gridTimestamp: number;
  }
}
declare global {
  interface HTMLChGridElement extends Components.ChGrid, HTMLStencilElement {}
  var HTMLChGridElement: {
    prototype: HTMLChGridElement;
    new (): HTMLChGridElement;
  };
  interface HTMLChGridColumnElement
    extends Components.ChGridColumn,
      HTMLStencilElement {}
  var HTMLChGridColumnElement: {
    prototype: HTMLChGridColumnElement;
    new (): HTMLChGridColumnElement;
  };
  interface HTMLChGridColumnResizeElement
    extends Components.ChGridColumnResize,
      HTMLStencilElement {}
  var HTMLChGridColumnResizeElement: {
    prototype: HTMLChGridColumnResizeElement;
    new (): HTMLChGridColumnResizeElement;
  };
  interface HTMLChGridColumnsetElement
    extends Components.ChGridColumnset,
      HTMLStencilElement {}
  var HTMLChGridColumnsetElement: {
    prototype: HTMLChGridColumnsetElement;
    new (): HTMLChGridColumnsetElement;
  };
  interface HTMLChGridRowsetElement
    extends Components.ChGridRowset,
      HTMLStencilElement {}
  var HTMLChGridRowsetElement: {
    prototype: HTMLChGridRowsetElement;
    new (): HTMLChGridRowsetElement;
  };
  interface HTMLChGridRowsetLegendElement
    extends Components.ChGridRowsetLegend,
      HTMLStencilElement {}
  var HTMLChGridRowsetLegendElement: {
    prototype: HTMLChGridRowsetLegendElement;
    new (): HTMLChGridRowsetLegendElement;
  };
  interface HTMLChIconElement extends Components.ChIcon, HTMLStencilElement {}
  var HTMLChIconElement: {
    prototype: HTMLChIconElement;
    new (): HTMLChIconElement;
  };
  interface HTMLChPaginatorElement
    extends Components.ChPaginator,
      HTMLStencilElement {}
  var HTMLChPaginatorElement: {
    prototype: HTMLChPaginatorElement;
    new (): HTMLChPaginatorElement;
  };
  interface HTMLChSidebarMenuElement
    extends Components.ChSidebarMenu,
      HTMLStencilElement {}
  var HTMLChSidebarMenuElement: {
    prototype: HTMLChSidebarMenuElement;
    new (): HTMLChSidebarMenuElement;
  };
  interface HTMLChSidebarMenuListElement
    extends Components.ChSidebarMenuList,
      HTMLStencilElement {}
  var HTMLChSidebarMenuListElement: {
    prototype: HTMLChSidebarMenuListElement;
    new (): HTMLChSidebarMenuListElement;
  };
  interface HTMLChSidebarMenuListItemElement
    extends Components.ChSidebarMenuListItem,
      HTMLStencilElement {}
  var HTMLChSidebarMenuListItemElement: {
    prototype: HTMLChSidebarMenuListItemElement;
    new (): HTMLChSidebarMenuListItemElement;
  };
  interface HTMLGxGridChameleonElement
    extends Components.GxGridChameleon,
      HTMLStencilElement {}
  var HTMLGxGridChameleonElement: {
    prototype: HTMLGxGridChameleonElement;
    new (): HTMLGxGridChameleonElement;
  };
  interface HTMLElementTagNameMap {
    "ch-grid": HTMLChGridElement;
    "ch-grid-column": HTMLChGridColumnElement;
    "ch-grid-column-resize": HTMLChGridColumnResizeElement;
    "ch-grid-columnset": HTMLChGridColumnsetElement;
    "ch-grid-rowset": HTMLChGridRowsetElement;
    "ch-grid-rowset-legend": HTMLChGridRowsetLegendElement;
    "ch-icon": HTMLChIconElement;
    "ch-paginator": HTMLChPaginatorElement;
    "ch-sidebar-menu": HTMLChSidebarMenuElement;
    "ch-sidebar-menu-list": HTMLChSidebarMenuListElement;
    "ch-sidebar-menu-list-item": HTMLChSidebarMenuListItemElement;
    "gx-grid-chameleon": HTMLGxGridChameleonElement;
  }
}
declare namespace LocalJSX {
  interface ChGrid {
    onCellClicked?: (event: CustomEvent<ChGridCellClickedEvent>) => void;
    onRowHighlightedClass?: string;
    onRowSelectedClass?: string;
    onSelectionChanged?: (
      event: CustomEvent<ChGridSelectionChangedEvent>
    ) => void;
    rowSelectionMode?: "none" | "single" | "multiple";
  }
  interface ChGridActionSettings {
    disabled?: boolean;
    onSettingsShowClicked?: (event: CustomEvent<any>) => void;
  }
  interface ChGridActionbar {}
  interface ChGridColumn {
    columnId?: string;
    hideable?: boolean;
    onColumnDragging?: (event: CustomEvent<any>) => void;
    onColumnVisibleChanged?: (event: CustomEvent<any>) => void;
    order?: number;
    resizeable?: boolean;
    resizing?: boolean;
    size?: string;
  }
  interface ChGridColumnResize {
    column?: ChGridColumn;
    onColumnResizeFinished?: (event: CustomEvent<any>) => void;
    onColumnResizeStarted?: (event: CustomEvent<any>) => void;
  }
  interface ChGridColumnset {}
  interface ChGridRowset {}
  interface ChGridRowsetLegend {}
  interface ChIcon {
    /**
     * If enabled, the icon will display its inherent/natural color
     */
    autoColor?: boolean;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy?: boolean;
    /**
     * The URL of the icon.
     */
    src?: string;
  }
  interface ChPaginator {
    activePage?: number;
    maxSize?: number;
    onActivePageChanged?: (
      event: CustomEvent<ChPaginatorActivePageChangedEvent>
    ) => void;
    onNavigationButtonClicked?: (
      event: CustomEvent<ChPaginatorNavigationButtonClieckedEvent>
    ) => void;
    renderButtonFirst?: boolean;
    renderButtonLast?: boolean;
    renderButtonNext?: boolean;
    renderButtonPrevious?: boolean;
    renderFirstLastPages?: boolean;
    textDots?: string;
    textFirst?: string;
    textLast?: string;
    textNext?: string;
    textPrevious?: string;
    totalPages?: number;
  }
  interface ChSidebarMenu {
    /**
     * The initial active item (optional)
     */
    activeItemId?: string;
    /**
     * Determines if the menu can be collapsed
     */
    collapsible?: boolean;
    /**
     * Allows to set the distance to the top of the page on the menu
     */
    distanceToTop?: number;
    /**
     * The menu title
     */
    menuTitle?: string;
    onItemClicked?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute allows the menu to have only one list opened at the same time
     */
    singleListOpen?: boolean;
  }
  interface ChSidebarMenuList {}
  interface ChSidebarMenuListItem {
    /**
     * The first list item icon (optional)
     */
    itemIconSrc?: string;
    /**
     * Emmits the item id
     */
    onItemClickedEvent?: (event: CustomEvent<any>) => void;
    /**
     * If this attribute is present the item will be initially uncollapsed
     */
    uncollapsed?: boolean;
  }
  interface GxGridChameleon {
    grid?: GxGrid;
    gridTimestamp?: number;
  }
  interface IntrinsicElements {
    "ch-grid": ChGrid;
    "ch-grid-column": ChGridColumn;
    "ch-grid-column-resize": ChGridColumnResize;
    "ch-grid-columnset": ChGridColumnset;
    "ch-grid-rowset": ChGridRowset;
    "ch-grid-rowset-legend": ChGridRowsetLegend;
    "ch-icon": ChIcon;
    "ch-paginator": ChPaginator;
    "ch-sidebar-menu": ChSidebarMenu;
    "ch-sidebar-menu-list": ChSidebarMenuList;
    "ch-sidebar-menu-list-item": ChSidebarMenuListItem;
    "gx-grid-chameleon": GxGridChameleon;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "ch-grid": LocalJSX.ChGrid & JSXBase.HTMLAttributes<HTMLChGridElement>;
      "ch-grid-column": LocalJSX.ChGridColumn &
        JSXBase.HTMLAttributes<HTMLChGridColumnElement>;
      "ch-grid-column-resize": LocalJSX.ChGridColumnResize &
        JSXBase.HTMLAttributes<HTMLChGridColumnResizeElement>;
      "ch-grid-columnset": LocalJSX.ChGridColumnset &
        JSXBase.HTMLAttributes<HTMLChGridColumnsetElement>;
      "ch-grid-rowset": LocalJSX.ChGridRowset &
        JSXBase.HTMLAttributes<HTMLChGridRowsetElement>;
      "ch-grid-rowset-legend": LocalJSX.ChGridRowsetLegend &
        JSXBase.HTMLAttributes<HTMLChGridRowsetLegendElement>;
      "ch-icon": LocalJSX.ChIcon & JSXBase.HTMLAttributes<HTMLChIconElement>;
      "ch-paginator": LocalJSX.ChPaginator &
        JSXBase.HTMLAttributes<HTMLChPaginatorElement>;
      "ch-sidebar-menu": LocalJSX.ChSidebarMenu &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuElement>;
      "ch-sidebar-menu-list": LocalJSX.ChSidebarMenuList &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuListElement>;
      "ch-sidebar-menu-list-item": LocalJSX.ChSidebarMenuListItem &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuListItemElement>;
      "gx-grid-chameleon": LocalJSX.GxGridChameleon &
        JSXBase.HTMLAttributes<HTMLGxGridChameleonElement>;
    }
  }
}
