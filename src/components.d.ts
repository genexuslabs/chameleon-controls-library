/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ItemsOverflowBehavior } from "./components/action-group/types";
import { DropdownPosition } from "./components/dropdown/types";
import { GridLocalization } from "./components/grid/ch-grid";
import { ChGridCellSelectionChangedEvent, ChGridMarkingChangedEvent, ChGridRowClickedEvent, ChGridRowContextMenuEvent, ChGridRowPressedEvent, ChGridSelectionChangedEvent } from "./components/grid/ch-grid-types";
import { ChGridColumnDragEvent, ChGridColumnFreeze, ChGridColumnFreezeChangedEvent, ChGridColumnHiddenChangedEvent, ChGridColumnOrderChangedEvent, ChGridColumnSelectorClickedEvent, ChGridColumnSizeChangedEvent, ChGridColumnSortChangedEvent, ChGridColumnSortDirection } from "./components/grid/grid-column/ch-grid-column-types";
import { ChGridInfiniteScrollState } from "./components/grid/grid-infinite-scroll/ch-grid-infinite-scroll";
import { Color, Size } from "./components/icon/icon";
import { DataModelItemLabels, EntityInfo, ErrorText, ItemInfo, Mode } from "./components/next/data-modeling-item/next-data-modeling-item";
import { EntityItemType, EntityNameToATTs } from "./components/next/data-modeling/data-model";
import { NotificationMessageWithDelay } from "./components/notifications/notifications-types";
import { ChPaginatorActivePageChangedEvent, ChPaginatorPageNavigationRequestedEvent } from "./components/paginator/ch-paginator";
import { ChPaginatorNavigateClickedEvent, ChPaginatorNavigateType } from "./components/paginator/paginator-navigate/ch-paginator-navigate-types";
import { ChPaginatorPagesPageChangedEvent } from "./components/paginator/paginator-pages/ch-paginator-pages";
import { ecLevel } from "./components/qr/ch-qr";
import { GxDataTransferInfo, LabelPosition } from "./common/types";
import { SuggestItemSelectedEvent } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
import { FocusChangeAttempt, SuggestItemSelectedEvent as SuggestItemSelectedEvent1 } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
import { ActionGroupItemModel } from "./components/test/test-action-group/types";
import { DropdownItemModel } from "./components/test/test-dropdown/types";
import { TreeXDataTransferInfo, TreeXDropCheckInfo, TreeXItemDragStartInfo, TreeXItemModel, TreeXLines, TreeXListItemExpandedInfo, TreeXListItemNewCaption, TreeXListItemSelectedInfo, TreeXModel } from "./components/tree-x/types";
import { TreeXOperationStatusModifyCaption } from "./components/test/types";
import { checkedChTreeItem } from "./components/tree/ch-tree";
import { chTreeItemData } from "./components/tree-item/ch-tree-item";
import { DragState } from "./components/tree-x-list-item/tree-x-list-item";
import { ChWindowAlign } from "./components/window/ch-window";
import { GxGrid, GxGridColumn } from "./components/gx-grid/genexus";
import { GridChameleonState } from "./components/gx-grid/gx-grid-chameleon-state";
import { GridChameleonColumnFilterChanged } from "./components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter";
export namespace Components {
    interface ChAccordion {
        /**
          * The description of the entity.
         */
        "accessibleDescription": string;
        /**
          * The name of the entity.
         */
        "accessibleName": string;
        /**
          * `true` if the accordion is expanded.
         */
        "expanded": boolean;
    }
    interface ChActionGroup {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName": string;
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "buttonLabel": string;
        /**
          * Determine which mouse actions on the expandable button display the dropdown section.
         */
        "expandBehavior": "Click" | "ClickOrHover";
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior": ItemsOverflowBehavior;
        /**
          * @todo Check a better convention for this property, for example, "ActionsInlineAlignment" This attribute determines the position of the More Actions button in the Action Group.  | Value   | Details                                                               | | --------| --------------------------------------------------------------------- | | `Start` | The More Actions Button is displayed to the left of the ActionGroup.  | | `End`   | The More Actions Button is displayed to the right of the ActionGroup. |
         */
        "moreActionsButtonPosition": "Start" | "End";
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition": DropdownPosition;
        /**
          * Determine if the dropdowns should be opened when the action is focused.
         */
        "openOnFocus": boolean;
    }
    interface ChActionGroupItem {
        /**
          * `true` if the control is floating. Useful to implement the `"ResponsiveCollapse"` value for the `itemsOverflowBehavior` property of the ch-action-group control.
         */
        "floating": boolean;
    }
    interface ChAlert {
        /**
          * Determine the accessible name of the close button. Important for accessibility.
         */
        "closeButtonAccessibleName": string;
        /**
          * Countdown which initial state is dismissTimeout ms.
         */
        "countdown": number;
        /**
          * Specifies the time (ms) for the alert to be displayed. if `dismissTimeout = 0`, the alert will be always visible (unless is dismissed by the closeButton).
         */
        "dismissTimeout": 0;
        /**
          * Determine src of the left image.
         */
        "leftImgSrc": "";
        /**
          * Toggles the Pause on Hover functionality
         */
        "pauseOnHover": boolean;
        /**
          * Determine if the element is displayed or not.
         */
        "presented": boolean;
        /**
          * Determine if the closeButton is displayed or not.
         */
        "showCloseButton": boolean;
        /**
          * If dismissTimeout > 0, a progress bar is displayed at the bottom of the element showing the time left for the alert to show. The progress stops when the element is hovered.
         */
        "showTimeoutBar": boolean;
        /**
          * Sets the desired interval
         */
        "timerInterval": 50;
    }
    interface ChCheckbox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName": string;
        /**
          * Specifies the label of the checkbox.
         */
        "caption": string;
        /**
          * Indicates that the control is selected by default.
         */
        "checked": boolean;
        /**
          * The value when the checkbox is 'on'
         */
        "checkedValue": string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * True to highlight control when an action is fired.
         */
        "highlightable": boolean;
        /**
          * `true` if the control's value is indeterminate.
         */
        "indeterminate": boolean;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly": boolean;
        /**
          * The value when the checkbox is 'off'
         */
        "unCheckedValue": string;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface ChDragBar {
        /**
          * Specifies the bar item src. If defined, it will set an image to replace the default bar item.
         */
        "barItemSrc": string;
        /**
          * This attribute lets you specify the label for the drag bar. Important for accessibility.
         */
        "barLabel": string;
        /**
          * A CSS class to set as the `ch-next-drag-bar` element class.
         */
        "cssClass": string;
        /**
          * If `true` an item at the middle of the bar will be displayed to give more context about the resize action
         */
        "showBarItem": boolean;
        /**
          * Specifies the initial width of the start component
         */
        "startComponentInitialWidth": string;
    }
    interface ChDropdown {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel": string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior": "Click" | "ClickOrHover";
        /**
          * This attribute lets you specify if the control is nested in another dropdown. Useful to manage keyboard interaction.
         */
        "nestedDropdown": boolean;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus": boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position": DropdownPosition;
    }
    interface ChDropdownItem {
        /**
          * Determine which actions on the expandable button display the dropdown section. Only works if the control has subitems.
         */
        "expandBehavior": "Click" | "ClickOrHover";
        /**
          * `true` to force the control to make its own containing block.
         */
        "forceContainingBlock": boolean;
        /**
          * Focuses the control's anchor or button.
         */
        "handleFocusElement": () => Promise<void>;
        /**
          * Specifies the hyperlink of the item. If this property is defined, the control will render an anchor tag with this `href`. Otherwise, it will render a button tag.
         */
        "href": string;
        /**
          * Specifies the src for the left img.
         */
        "leftImgSrc": string;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. Only works if the control has subitems.
         */
        "openOnFocus": boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position": DropdownPosition;
        /**
          * Specifies the src for the right img.
         */
        "rightImgSrc": string;
    }
    interface ChDropdownItemSeparator {
    }
    interface ChFormCheckbox {
        /**
          * The checkbox id
         */
        "checkboxId": string;
        /**
          * The presence of this attribute makes the checkbox checked by default
         */
        "checked": boolean;
        /**
          * The presence of this attribute disables the checkbox
         */
        "disabled": boolean;
        /**
          * The presence of this attribute makes the checkbox indeterminate
         */
        "indeterminate": boolean;
        /**
          * The checkbox label
         */
        "label": string;
        /**
          * The checkbox name
         */
        "name": string;
        /**
          * The checkbox value
         */
        "value": string;
    }
    interface ChGrid {
        /**
          * A boolean indicating whether the user can drag column headers to reorder columns.
         */
        "allowColumnReorder": boolean;
        /**
          * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.
          * @param cellId - The cellId of the cell to ensure visibility.
         */
        "cellEnsureVisible": (cellId: string) => Promise<void>;
        /**
          * Collapses a row, hiding its children.
          * @param rowId - The rowId of the row to collapse.
         */
        "collapseRow": (rowId: string) => Promise<void>;
        /**
          * Expands a row, showing its children.
          * @param rowId - The rowId of the row to expand.
         */
        "expandRow": (rowId: string) => Promise<void>;
        /**
          * Retrieves the rowId of the currently focused row.
         */
        "getFocusedRow": () => Promise<string>;
        /**
          * Retrieves the rowId of the currently hovered row.
         */
        "getHoveredRow": () => Promise<string>;
        /**
          * Retrieves the list of rowId of the marked rows.
         */
        "getMarkedRows": () => Promise<string[]>;
        /**
          * Retrieves information about the next cell relative to the currently selected cell.
         */
        "getNextCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the rowId of the next row relative to the currently selected cell.
         */
        "getNextRow": () => Promise<string>;
        /**
          * Retrieves information about the previous cell relative to the currently selected cell.
         */
        "getPreviousCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the rowId of the previous row relative to the currently selected cell.
         */
        "getPreviousRow": () => Promise<string>;
        /**
          * Retrieves information about the currently selected cell.
         */
        "getSelectedCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the list of rowId of the selected rows.
         */
        "getSelectedRows": () => Promise<string[]>;
        /**
          * An object that contains localized strings for the grid.
         */
        "localization": GridLocalization;
        /**
          * Mark or unmark all rows.
          * @param marked - A boolean indicating whether to mark or unmark all rows.
         */
        "markAllRows": (marked?: boolean) => Promise<void>;
        /**
          * Mark or unmark a row.
          * @param rowId - The rowId of the row to select or deselect.
          * @param marked - A boolean indicating whether to mark or unmark the row.
         */
        "markRow": (rowId: string, marked?: boolean) => Promise<void>;
        /**
          * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.
          * @param rowId - The rowId of the row to ensure visibility.
         */
        "rowEnsureVisible": (rowId: string) => Promise<void>;
        /**
          * A CSS class name applied to a row when it is focused.
         */
        "rowFocusedClass": string;
        /**
          * One of "false", "true" or "auto", indicating whether or not rows can be highlighted. "auto", row highlighting will be enabled if the row selection mode is set to "single" or "multiple".
         */
        "rowHighlightEnabled": boolean | "auto";
        /**
          * A CSS class name applied to a row when it is hovered.
         */
        "rowHighlightedClass": string;
        /**
          * A CSS class name applied to a row when it is marked.
         */
        "rowMarkedClass": string;
        /**
          * A CSS class name applied to a row when it is selected.
         */
        "rowSelectedClass": string;
        /**
          * One of "none", "single" or "multiple", indicating how rows can be selected. It can be set to "none" if no rows should be selectable, "single" if only one row can be selected at a time, or "multiple" if multiple rows can be selected at once.
         */
        "rowSelectionMode": "none" | "single" | "multiple";
        /**
          * Selects or deselects all rows.
          * @param selected - A boolean indicating whether to select or deselect all rows.
         */
        "selectAllRows": (selected?: boolean) => Promise<void>;
        /**
          * Select or deselect a cell. The cell can be identified by the cellId parameter or by using the rowId and columnId pair.
          * @param cellId - The cellId of the cell to select or deselect.
          * @param rowId - The rowId of the row containing the cell.
          * @param columnId - The columnId of the column containing the cell.
          * @param selected - A boolean indicating whether to select or deselect the cell.
         */
        "selectCell": (cellId?: string, rowId?: string, columnId?: string, selected?: boolean) => Promise<void>;
        /**
          * Selects or deselects a row.
          * @param rowId - The rowId of the row to select or deselect.
          * @param selected - A boolean indicating whether to select or deselect the row.
         */
        "selectRow": (rowId: string, selected?: boolean) => Promise<void>;
    }
    interface ChGridActionRefresh {
        /**
          * Indicates whether the refresh button is disabled or not.
         */
        "disabled": boolean;
    }
    interface ChGridActionSettings {
        /**
          * Indicates whether the settings button is disabled or not.
         */
        "disabled": boolean;
    }
    interface ChGridActionbar {
    }
    interface ChGridColumn {
        /**
          * @deprecated Use "columnImage" or "columnImageSet" instead. A URL to an icon to display in the column header.
         */
        "columnIconUrl": string;
        /**
          * A unique identifier for the column.
         */
        "columnId": string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImage": string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImageSet": string;
        /**
          * The text to display in the column header and settings.
         */
        "columnName": string;
        /**
          * Indicates whether the text in the column header is visible or not
         */
        "columnNameHidden": boolean;
        /**
          * @deprecated Use "columnTooltip" and "columnNameHidden" instead. One of "text" or "title", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.
         */
        "columnNamePosition": "text" | "title";
        /**
          * The text to display when the cursor is placed over the column header.
         */
        "columnTooltip": string;
        /**
          * One of "plain", "rich", or "tree", indicating the type of cell displayed in the column.
         */
        "columnType": "plain" | "rich" | "tree";
        /**
          * A CSS class name to apply to the display observer element used to detect changes in the column visibility.
         */
        "displayObserverClass": string;
        /**
          * One of "left" or "right", indicating whether the column should be "frozen" (i.e. remain visible when the user scrolls horizontally).
         */
        "freeze"?: ChGridColumnFreeze;
        /**
          * A boolean indicating whether the column should be hidden. The user can display it from the grid settings.
         */
        "hidden": boolean;
        /**
          * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).
         */
        "hideable": boolean;
        /**
          * A number indicating the order in which the column should appear.
         */
        "order": number;
        /**
          * A number indicating the physical order of the column (i.e. its position in the DOM).
         */
        "physicalOrder": number;
        /**
          * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).
         */
        "resizable": boolean;
        /**
          * A boolean indicating whether the column is currently being resized.
         */
        "resizing": boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType="rich").
         */
        "richRowActions": boolean;
        /**
          * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType="rich").
         */
        "richRowDrag": boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType="rich").
         */
        "richRowSelector": boolean;
        /**
          * One of "select" or "mark", indicating the mode of rich row selector. "select" indicates that the row selector is bound to the row selection. "mark" allows to mark a row independently of the selection.
         */
        "richRowSelectorMode": "select" | "mark";
        /**
          * Indicate the state of the rich row selector. "" indicates that all rows are unchecked. "checked" indicates that all rows are checked. "indeterminate" indicates that some rows are marked.
         */
        "richRowSelectorState": | ""
    | "checked"
    | "indeterminate";
        /**
          * A boolean indicating whether the user should be able to open a settings panel for the column.
         */
        "settingable": boolean;
        /**
          * A boolean indicating whether the settings panel for the column should be visible.
         */
        "showSettings": boolean;
        /**
          * A string indicating the width of the column. Any value supported by the "grid-template-columns" CSS property is valid.
         */
        "size": string;
        /**
          * One of "asc" or "desc", indicating the current sort direction.
         */
        "sortDirection"?: ChGridColumnSortDirection;
        /**
          * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).
         */
        "sortable": boolean;
    }
    interface ChGridColumnDisplay {
        /**
          * The column element that is being monitored.
         */
        "column": HTMLChGridColumnElement;
    }
    interface ChGridColumnResize {
        /**
          * The column element that is being resized.
         */
        "column": HTMLChGridColumnElement;
    }
    interface ChGridColumnSettings {
        /**
          * The `HTMLChGridColumnElement` that the settings window is associated with.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show": boolean;
    }
    interface ChGridColumnset {
    }
    interface ChGridInfiniteScroll {
        /**
          * Indicates that the grid is already loaded.
         */
        "complete": () => Promise<void>;
        /**
          * Indicates whether the grid is loading or already loaded.
         */
        "status": ChGridInfiniteScrollState;
    }
    interface ChGridRowActions {
        /**
          * Closes the row actions window.
         */
        "close": () => Promise<void>;
        /**
          * Opens the row actions on the row-actions-button cell.
         */
        "openRowActions": (cell: HTMLElement) => Promise<void>;
        /**
          * Opens the row actions on the row-actions-button cell.
         */
        "openRowContext": (clientX: number, clientY: number) => Promise<void>;
        /**
          * Opens the row actions on row hover.
         */
        "openRowHover": (row: HTMLElement) => Promise<void>;
        /**
          * Indicates that the row actions are displayed when the row-actions-button is pressed.
         */
        "showOnRowActions": boolean;
        /**
          * Indicates that the row actions are displayed when right-clicks on the row.
         */
        "showOnRowContext": boolean;
        /**
          * Indicates to show row actions when hovering over row.
         */
        "showOnRowHover": boolean;
    }
    interface ChGridRowsetEmpty {
    }
    interface ChGridRowsetLegend {
    }
    interface ChGridSettings {
        /**
          * The `HTMLChGridElement` that the settings window is associated with.
         */
        "grid": HTMLChGridElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show": boolean;
    }
    interface ChGridSettingsColumns {
        /**
          * An array of column elements to render.
         */
        "columns": HTMLChGridColumnElement[];
    }
    interface ChGridVirtualScroller {
        /**
          * The list of items to be rendered in the grid.
         */
        "items": any[];
        /**
          * The number of elements in the items list. Use if the list changes, without recreating the array.
         */
        "itemsCount": number;
        /**
          * The list of items to display within the current viewport.
         */
        "viewPortItems": any[];
    }
    interface ChIcon {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": boolean;
        /**
          * The color of the icon.
         */
        "color": Color;
        /**
          * If enabled, the icon will be loaded lazily when it's visible in the viewport.
         */
        "lazy": boolean;
        /**
          * The size of the icon. Possible values: regular, small.
         */
        "size": Size;
        /**
          * The URL of the icon.
         */
        "src": string;
    }
    interface ChIntersectionObserver {
        /**
          * Bottom margin around the root element
         */
        "bottomMargin": string;
        /**
          * Left margin around the root element
         */
        "leftMargin": string;
        /**
          * Right margin around the root element
         */
        "rightMargin": string;
        /**
          * Set the ID of the component that is used as the viewport, default is the browser.
         */
        "root": string;
        /**
          * Numeric values representing percentages of the target element which are visible.
         */
        "threshold": string;
        /**
          * Top margin around the root element
         */
        "topMargin": string;
    }
    interface ChNextDataModeling {
    }
    interface ChNextDataModelingItem {
        /**
          * This attribute lets you specify if the actions in the `mode === "add"` are visible.
         */
        "actionsVisible": boolean;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions": DataModelItemLabels;
        /**
          * Check errors in the item when `level !== 0`
         */
        "checkErrors": (errors: "yes" | "no" | "unknown", event: CustomEvent | UIEvent) => Promise<void>;
        /**
          * Remove the value of the input when mode === "add" | "edit"
         */
        "clearInput": () => Promise<void>;
        /**
          * The dataType of the field.
         */
        "dataType": string;
        /**
          * Deletes the field.
         */
        "delete": (event: UIEvent) => Promise<void>;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled": false;
        /**
          * This property maps entities of the current dataModel with their corresponding ATTs.
         */
        "entityNameToATTs": EntityNameToATTs;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts": { [key in ErrorText]: string };
        /**
          * This property specifies the defined field names of the entity parent.
         */
        "fieldNames": string[];
        /**
          * Hides the waiting mode to continue editing the field.
         */
        "hideWaitingMode": () => Promise<void>;
        /**
          * This property specifies at which collection level the field is located.
         */
        "level": 0 | 1 | 2;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts": number;
        /**
          * This attribute specifies the operating mode of the control
         */
        "mode": Mode;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * Set the adding mode for the first field of the entity.
         */
        "setAddingMode": () => Promise<void>;
        /**
          * `true` to show the new field button when `mode === "add"`
         */
        "showNewFieldBtn": boolean;
        /**
          * The type of the field.
         */
        "type": EntityItemType;
    }
    interface ChNextProgressBar {
        /**
          * It specifies the main text that is shown on the progress.
         */
        "caption": string;
        /**
          * A CSS class to set as the `ch-next-progress-bar` element class.
         */
        "cssClass": string;
        /**
          * This attribute lets you specify the value of the progress.
         */
        "currentStep": number;
        /**
          * It specifies more information that is shown on the progress.
         */
        "description": string;
        /**
          * This attribute lets you specify if the progress bar is rendered.
         */
        "presented": boolean;
        /**
          * This attribute lets you specify the amount of steps for the progress.
         */
        "steps": number;
    }
    interface ChNotifications {
        "delayToAnimateNewNotifications": number;
        "notifications": NotificationMessageWithDelay[];
        "position": "bottom-start" | "bottom-end";
        "timeToDismissNotifications": number;
        "timeType": "Seconds" | "Milliseconds";
    }
    interface ChNotificationsItem {
        "buttonImgSrc": string;
        "closeButtonLabel": string;
        "leftImgSrc": string;
        /**
          * `true` to show the close notification button
         */
        "showCloseButton": boolean;
        "timeToDismiss": 5000;
    }
    interface ChPaginator {
        /**
          * The active page number.
         */
        "activePage": number;
        /**
          * Indicates that the end has been reached. Use when total pages are not known (totalPages = -1).
         */
        "hasNextPage": boolean;
        /**
          * The total number of pages. Use -1 if not known and 'hasNextPage' property to indicate that the end has been reached.
         */
        "totalPages": 1;
    }
    interface ChPaginatorNavigate {
        /**
          * Flag indicating if the button is disabled.
         */
        "disabled": boolean;
        /**
          * The type of navigation button.
         */
        "type": ChPaginatorNavigateType;
    }
    interface ChPaginatorPages {
        /**
          * The maximum number of items to display in the pagination.
         */
        "maxSize": number;
        /**
          * The active page number.
         */
        "page": number;
        /**
          * Flag to render the first and last pages.
         */
        "renderFirstLastPages": boolean;
        /**
          * The text to display for the dots.
         */
        "textDots": string;
        /**
          * The total number of pages.
         */
        "totalPages": 1;
    }
    interface ChQr {
        /**
          * The background color. By default is transparent.
         */
        "background": string | null;
        /**
          * Means "Error correction levels". The four values L, M, Q, and H will use %7, 15%, 25%, and 30% of the QR code for error correction respectively. So on one hand the code will get bigger but chances are also higher that it will be read without errors later on. This value is by default High (H)
         */
        "ecLevel": ecLevel;
        /**
          * What color you want your QR code to be. By default is black.
         */
        "fill": string;
        /**
          * Defines how round the blocks should be. Numbers from 0 (squares) to 0.5 (maximum round) are supported.
         */
        "radius": number;
        /**
          * The total size of the final QR code in pixels - it will be a square. This value is by default "128"
         */
        "size": number;
        /**
          * Any kind of text, also links, email addresses, any thing.
         */
        "text": string | undefined;
    }
    interface ChSelect {
        "arrowIconSrc": string;
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": false;
        "disabled": boolean;
        "height": string;
        "iconSrc": string;
        "name": string;
        "width": string;
    }
    interface ChSelectOption {
        /**
          * If enabled, the option icons will display its inherent/natural color
         */
        "autoColor": true;
        /**
          * Determines if the option is disabled
         */
        "disabled": boolean;
        "height": string;
        /**
          * Set the left side icon
         */
        "leftIconSrc": string;
        /**
          * Set the right side icon
         */
        "rightIconSrc": string;
        /**
          * Determines the selected option
         */
        "selected": boolean;
        /**
          * The select option's value
         */
        "value": string;
    }
    interface ChSidebarMenu {
        /**
          * The active item
         */
        "activeItem": string;
        /**
          * The initial active item (optional)
         */
        "activeItemId": string;
        /**
          * Determines if the menu can be collapsed
         */
        "collapsible": boolean;
        /**
          * Allows to set the distance to the top of the page on the menu
         */
        "distanceToTop": number;
        /**
          * Determines if the menu is collapsed
         */
        "isCollapsed": boolean;
        /**
          * The menu title
         */
        "menuTitle": string;
        /**
          * The presence of this attribute allows the menu to have only one list opened at the same time
         */
        "singleListOpen": boolean;
    }
    interface ChSidebarMenuList {
    }
    interface ChSidebarMenuListItem {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": boolean;
        /**
          * The first list item icon (optional)
         */
        "itemIconSrc": string;
        /**
          * If this attribute is present the item will be initially uncollapsed
         */
        "uncollapsed": boolean;
    }
    interface ChStepList {
    }
    interface ChStepListItem {
        /**
          * Set the left side icon
         */
        "iconSrc": string;
    }
    interface ChStyle {
        /**
          * Specifies the location of the stylesheet document
         */
        "href": string;
    }
    interface ChSuggest {
        /**
          * If true, it will position the cursor at the end when the input is focused.
         */
        "cursorEnd": false;
        /**
          * The debounce amount in milliseconds (This is the time the suggest waits after the user has finished typing, to show the suggestions).
         */
        "debounce": number;
        /**
          * The label
         */
        "label": string;
        /**
          * The label position
         */
        "labelPosition": LabelPosition;
        /**
          * @description It selects/highlights the input text.
         */
        "selectInputText": () => Promise<void>;
        /**
          * Wether or not the suggest has a header. The header will show the "suggestTitle" if provided, and a close button.
         */
        "showHeader": false;
        /**
          * Whether or not to display the label
         */
        "showLabel": boolean;
        /**
          * The suggest title (optional). This is not the same as the "label", rather, this is the title that will appear inside the dropdown. This title will only be visible if "showHeader" is set to true.
         */
        "suggestTitle": string;
        /**
          * This is the suggest value.
         */
        "value": string;
    }
    interface ChSuggestList {
        /**
          * The label
         */
        "label": string;
    }
    interface ChSuggestListItem {
        /**
          * The icon url
         */
        "iconSrc": string;
        /**
          * The item value
         */
        "value": any;
    }
    interface ChTestActionGroup {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel": string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior": "Click" | "ClickOrHover";
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "itemsModel": ActionGroupItemModel[];
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior": ItemsOverflowBehavior;
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition": DropdownPosition;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus": boolean;
        /**
          * Specifies the separation (in pixels) between the expandable button and the dropdown section of the control.
         */
        "separation": number;
    }
    interface ChTestDropdown {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel": string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior": "Click" | "ClickOrHover";
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "itemsModel": DropdownItemModel[];
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus": boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position": DropdownPosition;
        /**
          * Specifies the separation (in pixels) between the expandable button and the dropdown section of the control.
         */
        "separation": number;
    }
    interface ChTestTreeX {
        /**
          * Callback that is executed when an element tries to drop in another item of the tree. Returns whether the drop is valid.
         */
        "checkDroppableZoneCallback": (
    dropInformation: TreeXDropCheckInfo
  ) => Promise<boolean>;
        /**
          * This attribute lets you specify if the drag operation is disabled in all items by default. If `true`, the control can't be dragged.
         */
        "dragDisabled": boolean;
        /**
          * This attribute lets you specify if the drop operation is disabled in all items by default. If `true`, the control won't accept any drops.
         */
        "dropDisabled": boolean;
        /**
          * Callback that is executed when a list of items request to be dropped into another item.
         */
        "dropItemsCallback": (
    dataTransferInfo: TreeXDataTransferInfo
  ) => Promise<{ acceptDrop: boolean; items?: TreeXItemModel[] }>;
        /**
          * Callback that is executed when a item request to load its subitems.
         */
        "lazyLoadTreeItemsCallback": (
    treeItemId: string
  ) => Promise<TreeXItemModel[]>;
        /**
          * Callback that is executed when a item request to modify its caption.
         */
        "modifyItemCaptionCallback": (
    treeItemId: string,
    newCaption: string
  ) => Promise<TreeXOperationStatusModifyCaption>;
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection": boolean;
        /**
          * Given an item id, it displays and scrolls into the item view.
         */
        "scrollIntoVisible": (treeItemId: string) => Promise<void>;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines": TreeXLines;
        /**
          * Callback that is executed when the treeModel is changed to order its items.
         */
        "sortItemsCallback": (subModel: TreeXItemModel[]) => void;
        /**
          * This method is used to toggle a tree item by the tree item id/ids.
          * @param treeItemIds An array id the tree items to be toggled.
          * @param expand A boolean indicating that the tree item should be expanded or collapsed. (optional)
          * @returns The modified items after the method was called.
         */
        "toggleItems": (treeItemIds: string[], expand?: boolean) => Promise<TreeXListItemExpandedInfo[]>;
        /**
          * This property lets you define the model of the ch-tree-x control.
         */
        "treeModel": TreeXModel;
        /**
          * Given a subset of item's properties, it updates all item UI models.
         */
        "updateAllItemsProperties": (properties: { expanded?: boolean; checked?: boolean; }) => Promise<void>;
        /**
          * Given a item list and the properties to update, it updates the properties of the items in the list.
         */
        "updateItemsProperties": (items: string[], properties: TreeXItemModel) => Promise<void>;
    }
    interface ChTextblock {
        /**
          * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
         */
        "format": "Text" | "HTML";
        /**
          * True to cut text when it overflows, showing an ellipsis.
         */
        "lineClamp": boolean;
        /**
          * Determine the tooltip text that will be displayed when the pointer is over the control
         */
        "tooltip": string;
        /**
          * Determine the way that the tooltip text will be displayed
         */
        "tooltipShowMode": "always" | "line-clamp";
    }
    interface ChTimer {
        /**
          * Sets the accesible name of the timer.
         */
        "accessibleName": string;
        /**
          * Sets the animationTime to set the custom var for the css animation.
         */
        "animationTime": number;
        /**
          * Sets the presented property to handle the component presentation.
         */
        "presented": boolean;
        /**
          * Sets the progress propiety to determine the progress.
         */
        "progress": number;
    }
    interface ChTree {
        /**
          * Set this attribute if you want all this tree tree-items to have a checkbox
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want all this tree tree-items to have the checkbox checked
         */
        "checked": boolean;
        /**
          * @returns an array of the ch-tree-items that are checked. Each array item is an object with "id" and "innerText".
         */
        "getChecked": () => Promise<checkedChTreeItem[]>;
        /**
          * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
         */
        "toggleCheckboxes": boolean;
    }
    interface ChTreeItem {
        /**
          * Set this attribute if you want the ch-tree-item to display a checkbox
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want the ch-tree-item checkbox to be checked by default
         */
        "checked": boolean;
        "disabled": boolean;
        /**
          * Set this attribute if this tree-item has a resource to be downloaded;
         */
        "download": boolean;
        /**
          * Set this attribute when you have downloaded the resource
         */
        "downloaded": boolean;
        /**
          * Set this attribute when you are downloading a resource
         */
        "downloading": boolean;
        "firstTreeItem": boolean;
        "hasChildTree": boolean;
        "indeterminate": boolean;
        /**
          * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
         */
        "isLeaf": boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftIcon": string;
        /**
          * If this tree-item has a nested tree, set this attribute to make the tree open by default
         */
        "opened": boolean;
        /**
          * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightIcon": string;
        /**
          * The presence of this attribute sets the tree-item as selected
         */
        "selected": boolean;
        "updateTreeVerticalLineHeight": () => Promise<void>;
    }
    interface ChTreeX {
        /**
          * Clear all information about the selected items. This method is intended to be used when selected items are reordered and the selected references will no longer be useful.
         */
        "clearSelectedItemsInfo": () => Promise<void>;
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection": boolean;
        /**
          * This property lets you specify the time (in ms) that the mouse must be over in a subtree to open it when dragging.
         */
        "openSubTreeCountdown": number;
        /**
          * Given an item id, it displays and scrolls into the item view.
         */
        "scrollIntoVisible": (treeItemId: string) => Promise<void>;
        /**
          * `true` to scroll in the tree when dragging an item near the edges of the tree.
         */
        "scrollToEdgeOnDrag": boolean;
        /**
          * Update the information about the valid droppable zones.
          * @param requestTimestamp Time where the request to the server was made. Useful to avoid having old information.
          * @param newContainerId ID of the container where the drag is trying to be made.
          * @param draggedItems Information about the dragged items.
          * @param validDrop Current state of the droppable zone.
         */
        "updateValidDroppableZone": (requestTimestamp: number, newContainerId: string, draggedItems: GxDataTransferInfo[], validDrop: boolean) => Promise<void>;
        /**
          * This property lets you specify if the tree is waiting to process the drop of items.
         */
        "waitDropProcessing": boolean;
    }
    interface ChTreeXList {
        /**
          * Level in the tree at which the control is placed.
         */
        "level": number;
    }
    interface ChTreeXListItem {
        /**
          * This attributes specifies the caption of the control
         */
        "caption": string;
        /**
          * Set this attribute if you want display a checkbox in the control.
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want the checkbox to be checked by default. Only works if `checkbox = true`
         */
        "checked": boolean;
        /**
          * Set this attribute if you want to set a custom render for the control, by passing a slot.
         */
        "customRender": boolean;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * This attribute lets you specify when items are being lazy loaded in the control.
         */
        "downloading": boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in the control. If `true`, the control can't be dragged.
         */
        "dragDisabled": boolean;
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState": DragState;
        /**
          * This attribute lets you specify if the drop operation is disabled in the control. If `true`, the control won't accept any drops.
         */
        "dropDisabled": boolean;
        /**
          * Set this attribute when the item is in edit mode
         */
        "editing": boolean;
        /**
          * If the item has a sub-tree, this attribute determines if the subtree is displayed.
         */
        "expanded": boolean;
        /**
          * Focus the last item in its subtree. If the control is not expanded, it focus the control
         */
        "focusLastItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the next item in the tree. If the control is expanded, it focuses the first subitem in its tree.
         */
        "focusNextItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the next sibling item in the tree.
         */
        "focusNextSibling": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the previous item in the tree. If the previous item is expanded, it focuses the last subitem in its tree.
         */
        "focusPreviousItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * `true` if the checkbox's value is indeterminate.
         */
        "indeterminate": boolean;
        /**
          * This attribute specifies if the control is the last items in its subtree
         */
        "lastItem": boolean;
        /**
          * Determine if the items are lazy loaded when opening the first time the control.
         */
        "lazyLoad": boolean;
        /**
          * The presence of this attribute determine whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf": boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftImgSrc": string;
        /**
          * Level in the tree at which the item is placed.
         */
        "level": number;
        /**
          * This attribute represents additional info for the control that is included when dragging the item.
         */
        "metadata": string;
        /**
          * Set the right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightImgSrc": string;
        /**
          * This attribute lets you specify if the item is selected
         */
        "selected": boolean;
        /**
          * Set focus in the control
         */
        "setFocus": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * `true` to show the downloading spinner when lazy loading the sub items of the control.
         */
        "showDownloadingSpinner": boolean;
        /**
          * `true` to show the expandable button that allows to expand/collapse the items of the control. Only works if `leaf === false`.
         */
        "showExpandableButton": boolean;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines": TreeXLines;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked.
         */
        "toggleCheckboxes": boolean;
    }
    interface ChWindow {
        /**
          * Specifies the drag behavior of the window.
         */
        "allowDrag": "no" | "header" | "box";
        /**
          * The caption or title of the window.
         */
        "caption": string;
        /**
          * Determines whether the window should close when the Escape key is pressed.
         */
        "closeOnEscape": boolean;
        /**
          * Determines whether the window should close when clicked outside.
         */
        "closeOnOutsideClick": boolean;
        /**
          * The text for the close button.
         */
        "closeText": string;
        /**
          * The tooltip text for the close button.
         */
        "closeTooltip": string;
        /**
          * The container element for the window.
         */
        "container"?: HTMLElement;
        /**
          * Determines if the window is hidden or visible.
         */
        "hidden": boolean;
        /**
          * Specifies whether the window should be displayed as a modal.
         */
        "modal": boolean;
        /**
          * This attribute lets you specify if a footer is rendered at the bottom of the window.
         */
        "showFooter": boolean;
        /**
          * This attribute lets you specify if a header is rendered on top of the window.
         */
        "showHeader": boolean;
        /**
          * This attribute lets you specify if a div wrapper is rendered for the default slot.
         */
        "showMain": boolean;
        /**
          * This attribute lets you specify if a div between the container and the window space.
         */
        "showSeparation": boolean;
        /**
          * The horizontal alignment of the window.
         */
        "xAlign": ChWindowAlign;
        /**
          * The vertical alignment of the window.
         */
        "yAlign": ChWindowAlign;
    }
    interface ChWindowClose {
        /**
          * Specifies whether the close button is disabled.
         */
        "disabled": boolean;
    }
    interface GxGridChameleon {
        /**
          * The GxGrid instance representing the data to be displayed in the grid.
         */
        "grid": GxGrid;
        /**
          * The timestamp indicating the time when the grid was last updated.
         */
        "gridTimestamp": number;
        /**
          * The UI state of the Grid.
         */
        "state": GridChameleonState;
    }
    interface GxGridChameleonColumnFilter {
        /**
          * The text to display on the "Apply" button.
         */
        "buttonApplyText": string;
        /**
          * The text to display on the "Reset" button.
         */
        "buttonResetText": string;
        /**
          * The grid column associated with this filter.
         */
        "column": GxGridColumn;
        /**
          * The value to filter for equality comparison.
         */
        "equal": string;
        /**
          * The value to filter for greater-than comparison.
         */
        "greater": string;
        /**
          * The value to filter for less-than comparison.
         */
        "less": string;
    }
}
export interface ChAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChAccordionElement;
}
export interface ChActionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChActionGroupElement;
}
export interface ChAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChAlertElement;
}
export interface ChCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChCheckboxElement;
}
export interface ChDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChDropdownElement;
}
export interface ChDropdownItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChDropdownItemElement;
}
export interface ChFormCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChFormCheckboxElement;
}
export interface ChGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridElement;
}
export interface ChGridActionRefreshCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridActionRefreshElement;
}
export interface ChGridActionSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridActionSettingsElement;
}
export interface ChGridColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridColumnElement;
}
export interface ChGridColumnResizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridColumnResizeElement;
}
export interface ChGridInfiniteScrollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridInfiniteScrollElement;
}
export interface ChGridRowActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridRowActionsElement;
}
export interface ChGridRowsetLegendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridRowsetLegendElement;
}
export interface ChGridSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridSettingsElement;
}
export interface ChGridVirtualScrollerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridVirtualScrollerElement;
}
export interface ChIntersectionObserverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChIntersectionObserverElement;
}
export interface ChNextDataModelingItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChNextDataModelingItemElement;
}
export interface ChNotificationsItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChNotificationsItemElement;
}
export interface ChPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorElement;
}
export interface ChPaginatorNavigateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorNavigateElement;
}
export interface ChPaginatorPagesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorPagesElement;
}
export interface ChSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSelectElement;
}
export interface ChSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSelectOptionElement;
}
export interface ChSidebarMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSidebarMenuElement;
}
export interface ChSidebarMenuListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSidebarMenuListItemElement;
}
export interface ChStepListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChStepListItemElement;
}
export interface ChSuggestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSuggestElement;
}
export interface ChSuggestListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSuggestListItemElement;
}
export interface ChTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeItemElement;
}
export interface ChTreeXCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeXElement;
}
export interface ChTreeXListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeXListItemElement;
}
export interface ChWindowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChWindowElement;
}
export interface ChWindowCloseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChWindowCloseElement;
}
export interface GxGridChameleonColumnFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxGridChameleonColumnFilterElement;
}
declare global {
    interface HTMLChAccordionElement extends Components.ChAccordion, HTMLStencilElement {
    }
    var HTMLChAccordionElement: {
        prototype: HTMLChAccordionElement;
        new (): HTMLChAccordionElement;
    };
    interface HTMLChActionGroupElement extends Components.ChActionGroup, HTMLStencilElement {
    }
    var HTMLChActionGroupElement: {
        prototype: HTMLChActionGroupElement;
        new (): HTMLChActionGroupElement;
    };
    interface HTMLChActionGroupItemElement extends Components.ChActionGroupItem, HTMLStencilElement {
    }
    var HTMLChActionGroupItemElement: {
        prototype: HTMLChActionGroupItemElement;
        new (): HTMLChActionGroupItemElement;
    };
    interface HTMLChAlertElement extends Components.ChAlert, HTMLStencilElement {
    }
    var HTMLChAlertElement: {
        prototype: HTMLChAlertElement;
        new (): HTMLChAlertElement;
    };
    interface HTMLChCheckboxElement extends Components.ChCheckbox, HTMLStencilElement {
    }
    var HTMLChCheckboxElement: {
        prototype: HTMLChCheckboxElement;
        new (): HTMLChCheckboxElement;
    };
    interface HTMLChDragBarElement extends Components.ChDragBar, HTMLStencilElement {
    }
    var HTMLChDragBarElement: {
        prototype: HTMLChDragBarElement;
        new (): HTMLChDragBarElement;
    };
    interface HTMLChDropdownElement extends Components.ChDropdown, HTMLStencilElement {
    }
    var HTMLChDropdownElement: {
        prototype: HTMLChDropdownElement;
        new (): HTMLChDropdownElement;
    };
    interface HTMLChDropdownItemElement extends Components.ChDropdownItem, HTMLStencilElement {
    }
    var HTMLChDropdownItemElement: {
        prototype: HTMLChDropdownItemElement;
        new (): HTMLChDropdownItemElement;
    };
    interface HTMLChDropdownItemSeparatorElement extends Components.ChDropdownItemSeparator, HTMLStencilElement {
    }
    var HTMLChDropdownItemSeparatorElement: {
        prototype: HTMLChDropdownItemSeparatorElement;
        new (): HTMLChDropdownItemSeparatorElement;
    };
    interface HTMLChFormCheckboxElement extends Components.ChFormCheckbox, HTMLStencilElement {
    }
    var HTMLChFormCheckboxElement: {
        prototype: HTMLChFormCheckboxElement;
        new (): HTMLChFormCheckboxElement;
    };
    interface HTMLChGridElement extends Components.ChGrid, HTMLStencilElement {
    }
    var HTMLChGridElement: {
        prototype: HTMLChGridElement;
        new (): HTMLChGridElement;
    };
    interface HTMLChGridActionRefreshElement extends Components.ChGridActionRefresh, HTMLStencilElement {
    }
    var HTMLChGridActionRefreshElement: {
        prototype: HTMLChGridActionRefreshElement;
        new (): HTMLChGridActionRefreshElement;
    };
    interface HTMLChGridActionSettingsElement extends Components.ChGridActionSettings, HTMLStencilElement {
    }
    var HTMLChGridActionSettingsElement: {
        prototype: HTMLChGridActionSettingsElement;
        new (): HTMLChGridActionSettingsElement;
    };
    interface HTMLChGridActionbarElement extends Components.ChGridActionbar, HTMLStencilElement {
    }
    var HTMLChGridActionbarElement: {
        prototype: HTMLChGridActionbarElement;
        new (): HTMLChGridActionbarElement;
    };
    interface HTMLChGridColumnElement extends Components.ChGridColumn, HTMLStencilElement {
    }
    var HTMLChGridColumnElement: {
        prototype: HTMLChGridColumnElement;
        new (): HTMLChGridColumnElement;
    };
    interface HTMLChGridColumnDisplayElement extends Components.ChGridColumnDisplay, HTMLStencilElement {
    }
    var HTMLChGridColumnDisplayElement: {
        prototype: HTMLChGridColumnDisplayElement;
        new (): HTMLChGridColumnDisplayElement;
    };
    interface HTMLChGridColumnResizeElement extends Components.ChGridColumnResize, HTMLStencilElement {
    }
    var HTMLChGridColumnResizeElement: {
        prototype: HTMLChGridColumnResizeElement;
        new (): HTMLChGridColumnResizeElement;
    };
    interface HTMLChGridColumnSettingsElement extends Components.ChGridColumnSettings, HTMLStencilElement {
    }
    var HTMLChGridColumnSettingsElement: {
        prototype: HTMLChGridColumnSettingsElement;
        new (): HTMLChGridColumnSettingsElement;
    };
    interface HTMLChGridColumnsetElement extends Components.ChGridColumnset, HTMLStencilElement {
    }
    var HTMLChGridColumnsetElement: {
        prototype: HTMLChGridColumnsetElement;
        new (): HTMLChGridColumnsetElement;
    };
    interface HTMLChGridInfiniteScrollElement extends Components.ChGridInfiniteScroll, HTMLStencilElement {
    }
    var HTMLChGridInfiniteScrollElement: {
        prototype: HTMLChGridInfiniteScrollElement;
        new (): HTMLChGridInfiniteScrollElement;
    };
    interface HTMLChGridRowActionsElement extends Components.ChGridRowActions, HTMLStencilElement {
    }
    var HTMLChGridRowActionsElement: {
        prototype: HTMLChGridRowActionsElement;
        new (): HTMLChGridRowActionsElement;
    };
    interface HTMLChGridRowsetEmptyElement extends Components.ChGridRowsetEmpty, HTMLStencilElement {
    }
    var HTMLChGridRowsetEmptyElement: {
        prototype: HTMLChGridRowsetEmptyElement;
        new (): HTMLChGridRowsetEmptyElement;
    };
    interface HTMLChGridRowsetLegendElement extends Components.ChGridRowsetLegend, HTMLStencilElement {
    }
    var HTMLChGridRowsetLegendElement: {
        prototype: HTMLChGridRowsetLegendElement;
        new (): HTMLChGridRowsetLegendElement;
    };
    interface HTMLChGridSettingsElement extends Components.ChGridSettings, HTMLStencilElement {
    }
    var HTMLChGridSettingsElement: {
        prototype: HTMLChGridSettingsElement;
        new (): HTMLChGridSettingsElement;
    };
    interface HTMLChGridSettingsColumnsElement extends Components.ChGridSettingsColumns, HTMLStencilElement {
    }
    var HTMLChGridSettingsColumnsElement: {
        prototype: HTMLChGridSettingsColumnsElement;
        new (): HTMLChGridSettingsColumnsElement;
    };
    interface HTMLChGridVirtualScrollerElement extends Components.ChGridVirtualScroller, HTMLStencilElement {
    }
    var HTMLChGridVirtualScrollerElement: {
        prototype: HTMLChGridVirtualScrollerElement;
        new (): HTMLChGridVirtualScrollerElement;
    };
    interface HTMLChIconElement extends Components.ChIcon, HTMLStencilElement {
    }
    var HTMLChIconElement: {
        prototype: HTMLChIconElement;
        new (): HTMLChIconElement;
    };
    interface HTMLChIntersectionObserverElement extends Components.ChIntersectionObserver, HTMLStencilElement {
    }
    var HTMLChIntersectionObserverElement: {
        prototype: HTMLChIntersectionObserverElement;
        new (): HTMLChIntersectionObserverElement;
    };
    interface HTMLChNextDataModelingElement extends Components.ChNextDataModeling, HTMLStencilElement {
    }
    var HTMLChNextDataModelingElement: {
        prototype: HTMLChNextDataModelingElement;
        new (): HTMLChNextDataModelingElement;
    };
    interface HTMLChNextDataModelingItemElement extends Components.ChNextDataModelingItem, HTMLStencilElement {
    }
    var HTMLChNextDataModelingItemElement: {
        prototype: HTMLChNextDataModelingItemElement;
        new (): HTMLChNextDataModelingItemElement;
    };
    interface HTMLChNextProgressBarElement extends Components.ChNextProgressBar, HTMLStencilElement {
    }
    var HTMLChNextProgressBarElement: {
        prototype: HTMLChNextProgressBarElement;
        new (): HTMLChNextProgressBarElement;
    };
    interface HTMLChNotificationsElement extends Components.ChNotifications, HTMLStencilElement {
    }
    var HTMLChNotificationsElement: {
        prototype: HTMLChNotificationsElement;
        new (): HTMLChNotificationsElement;
    };
    interface HTMLChNotificationsItemElement extends Components.ChNotificationsItem, HTMLStencilElement {
    }
    var HTMLChNotificationsItemElement: {
        prototype: HTMLChNotificationsItemElement;
        new (): HTMLChNotificationsItemElement;
    };
    interface HTMLChPaginatorElement extends Components.ChPaginator, HTMLStencilElement {
    }
    var HTMLChPaginatorElement: {
        prototype: HTMLChPaginatorElement;
        new (): HTMLChPaginatorElement;
    };
    interface HTMLChPaginatorNavigateElement extends Components.ChPaginatorNavigate, HTMLStencilElement {
    }
    var HTMLChPaginatorNavigateElement: {
        prototype: HTMLChPaginatorNavigateElement;
        new (): HTMLChPaginatorNavigateElement;
    };
    interface HTMLChPaginatorPagesElement extends Components.ChPaginatorPages, HTMLStencilElement {
    }
    var HTMLChPaginatorPagesElement: {
        prototype: HTMLChPaginatorPagesElement;
        new (): HTMLChPaginatorPagesElement;
    };
    interface HTMLChQrElement extends Components.ChQr, HTMLStencilElement {
    }
    var HTMLChQrElement: {
        prototype: HTMLChQrElement;
        new (): HTMLChQrElement;
    };
    interface HTMLChSelectElement extends Components.ChSelect, HTMLStencilElement {
    }
    var HTMLChSelectElement: {
        prototype: HTMLChSelectElement;
        new (): HTMLChSelectElement;
    };
    interface HTMLChSelectOptionElement extends Components.ChSelectOption, HTMLStencilElement {
    }
    var HTMLChSelectOptionElement: {
        prototype: HTMLChSelectOptionElement;
        new (): HTMLChSelectOptionElement;
    };
    interface HTMLChSidebarMenuElement extends Components.ChSidebarMenu, HTMLStencilElement {
    }
    var HTMLChSidebarMenuElement: {
        prototype: HTMLChSidebarMenuElement;
        new (): HTMLChSidebarMenuElement;
    };
    interface HTMLChSidebarMenuListElement extends Components.ChSidebarMenuList, HTMLStencilElement {
    }
    var HTMLChSidebarMenuListElement: {
        prototype: HTMLChSidebarMenuListElement;
        new (): HTMLChSidebarMenuListElement;
    };
    interface HTMLChSidebarMenuListItemElement extends Components.ChSidebarMenuListItem, HTMLStencilElement {
    }
    var HTMLChSidebarMenuListItemElement: {
        prototype: HTMLChSidebarMenuListItemElement;
        new (): HTMLChSidebarMenuListItemElement;
    };
    interface HTMLChStepListElement extends Components.ChStepList, HTMLStencilElement {
    }
    var HTMLChStepListElement: {
        prototype: HTMLChStepListElement;
        new (): HTMLChStepListElement;
    };
    interface HTMLChStepListItemElement extends Components.ChStepListItem, HTMLStencilElement {
    }
    var HTMLChStepListItemElement: {
        prototype: HTMLChStepListItemElement;
        new (): HTMLChStepListItemElement;
    };
    interface HTMLChStyleElement extends Components.ChStyle, HTMLStencilElement {
    }
    var HTMLChStyleElement: {
        prototype: HTMLChStyleElement;
        new (): HTMLChStyleElement;
    };
    interface HTMLChSuggestElement extends Components.ChSuggest, HTMLStencilElement {
    }
    var HTMLChSuggestElement: {
        prototype: HTMLChSuggestElement;
        new (): HTMLChSuggestElement;
    };
    interface HTMLChSuggestListElement extends Components.ChSuggestList, HTMLStencilElement {
    }
    var HTMLChSuggestListElement: {
        prototype: HTMLChSuggestListElement;
        new (): HTMLChSuggestListElement;
    };
    interface HTMLChSuggestListItemElement extends Components.ChSuggestListItem, HTMLStencilElement {
    }
    var HTMLChSuggestListItemElement: {
        prototype: HTMLChSuggestListItemElement;
        new (): HTMLChSuggestListItemElement;
    };
    interface HTMLChTestActionGroupElement extends Components.ChTestActionGroup, HTMLStencilElement {
    }
    var HTMLChTestActionGroupElement: {
        prototype: HTMLChTestActionGroupElement;
        new (): HTMLChTestActionGroupElement;
    };
    interface HTMLChTestDropdownElement extends Components.ChTestDropdown, HTMLStencilElement {
    }
    var HTMLChTestDropdownElement: {
        prototype: HTMLChTestDropdownElement;
        new (): HTMLChTestDropdownElement;
    };
    interface HTMLChTestTreeXElement extends Components.ChTestTreeX, HTMLStencilElement {
    }
    var HTMLChTestTreeXElement: {
        prototype: HTMLChTestTreeXElement;
        new (): HTMLChTestTreeXElement;
    };
    interface HTMLChTextblockElement extends Components.ChTextblock, HTMLStencilElement {
    }
    var HTMLChTextblockElement: {
        prototype: HTMLChTextblockElement;
        new (): HTMLChTextblockElement;
    };
    interface HTMLChTimerElement extends Components.ChTimer, HTMLStencilElement {
    }
    var HTMLChTimerElement: {
        prototype: HTMLChTimerElement;
        new (): HTMLChTimerElement;
    };
    interface HTMLChTreeElement extends Components.ChTree, HTMLStencilElement {
    }
    var HTMLChTreeElement: {
        prototype: HTMLChTreeElement;
        new (): HTMLChTreeElement;
    };
    interface HTMLChTreeItemElement extends Components.ChTreeItem, HTMLStencilElement {
    }
    var HTMLChTreeItemElement: {
        prototype: HTMLChTreeItemElement;
        new (): HTMLChTreeItemElement;
    };
    interface HTMLChTreeXElement extends Components.ChTreeX, HTMLStencilElement {
    }
    var HTMLChTreeXElement: {
        prototype: HTMLChTreeXElement;
        new (): HTMLChTreeXElement;
    };
    interface HTMLChTreeXListElement extends Components.ChTreeXList, HTMLStencilElement {
    }
    var HTMLChTreeXListElement: {
        prototype: HTMLChTreeXListElement;
        new (): HTMLChTreeXListElement;
    };
    interface HTMLChTreeXListItemElement extends Components.ChTreeXListItem, HTMLStencilElement {
    }
    var HTMLChTreeXListItemElement: {
        prototype: HTMLChTreeXListItemElement;
        new (): HTMLChTreeXListItemElement;
    };
    interface HTMLChWindowElement extends Components.ChWindow, HTMLStencilElement {
    }
    var HTMLChWindowElement: {
        prototype: HTMLChWindowElement;
        new (): HTMLChWindowElement;
    };
    interface HTMLChWindowCloseElement extends Components.ChWindowClose, HTMLStencilElement {
    }
    var HTMLChWindowCloseElement: {
        prototype: HTMLChWindowCloseElement;
        new (): HTMLChWindowCloseElement;
    };
    interface HTMLGxGridChameleonElement extends Components.GxGridChameleon, HTMLStencilElement {
    }
    var HTMLGxGridChameleonElement: {
        prototype: HTMLGxGridChameleonElement;
        new (): HTMLGxGridChameleonElement;
    };
    interface HTMLGxGridChameleonColumnFilterElement extends Components.GxGridChameleonColumnFilter, HTMLStencilElement {
    }
    var HTMLGxGridChameleonColumnFilterElement: {
        prototype: HTMLGxGridChameleonColumnFilterElement;
        new (): HTMLGxGridChameleonColumnFilterElement;
    };
    interface HTMLElementTagNameMap {
        "ch-accordion": HTMLChAccordionElement;
        "ch-action-group": HTMLChActionGroupElement;
        "ch-action-group-item": HTMLChActionGroupItemElement;
        "ch-alert": HTMLChAlertElement;
        "ch-checkbox": HTMLChCheckboxElement;
        "ch-drag-bar": HTMLChDragBarElement;
        "ch-dropdown": HTMLChDropdownElement;
        "ch-dropdown-item": HTMLChDropdownItemElement;
        "ch-dropdown-item-separator": HTMLChDropdownItemSeparatorElement;
        "ch-form-checkbox": HTMLChFormCheckboxElement;
        "ch-grid": HTMLChGridElement;
        "ch-grid-action-refresh": HTMLChGridActionRefreshElement;
        "ch-grid-action-settings": HTMLChGridActionSettingsElement;
        "ch-grid-actionbar": HTMLChGridActionbarElement;
        "ch-grid-column": HTMLChGridColumnElement;
        "ch-grid-column-display": HTMLChGridColumnDisplayElement;
        "ch-grid-column-resize": HTMLChGridColumnResizeElement;
        "ch-grid-column-settings": HTMLChGridColumnSettingsElement;
        "ch-grid-columnset": HTMLChGridColumnsetElement;
        "ch-grid-infinite-scroll": HTMLChGridInfiniteScrollElement;
        "ch-grid-row-actions": HTMLChGridRowActionsElement;
        "ch-grid-rowset-empty": HTMLChGridRowsetEmptyElement;
        "ch-grid-rowset-legend": HTMLChGridRowsetLegendElement;
        "ch-grid-settings": HTMLChGridSettingsElement;
        "ch-grid-settings-columns": HTMLChGridSettingsColumnsElement;
        "ch-grid-virtual-scroller": HTMLChGridVirtualScrollerElement;
        "ch-icon": HTMLChIconElement;
        "ch-intersection-observer": HTMLChIntersectionObserverElement;
        "ch-next-data-modeling": HTMLChNextDataModelingElement;
        "ch-next-data-modeling-item": HTMLChNextDataModelingItemElement;
        "ch-next-progress-bar": HTMLChNextProgressBarElement;
        "ch-notifications": HTMLChNotificationsElement;
        "ch-notifications-item": HTMLChNotificationsItemElement;
        "ch-paginator": HTMLChPaginatorElement;
        "ch-paginator-navigate": HTMLChPaginatorNavigateElement;
        "ch-paginator-pages": HTMLChPaginatorPagesElement;
        "ch-qr": HTMLChQrElement;
        "ch-select": HTMLChSelectElement;
        "ch-select-option": HTMLChSelectOptionElement;
        "ch-sidebar-menu": HTMLChSidebarMenuElement;
        "ch-sidebar-menu-list": HTMLChSidebarMenuListElement;
        "ch-sidebar-menu-list-item": HTMLChSidebarMenuListItemElement;
        "ch-step-list": HTMLChStepListElement;
        "ch-step-list-item": HTMLChStepListItemElement;
        "ch-style": HTMLChStyleElement;
        "ch-suggest": HTMLChSuggestElement;
        "ch-suggest-list": HTMLChSuggestListElement;
        "ch-suggest-list-item": HTMLChSuggestListItemElement;
        "ch-test-action-group": HTMLChTestActionGroupElement;
        "ch-test-dropdown": HTMLChTestDropdownElement;
        "ch-test-tree-x": HTMLChTestTreeXElement;
        "ch-textblock": HTMLChTextblockElement;
        "ch-timer": HTMLChTimerElement;
        "ch-tree": HTMLChTreeElement;
        "ch-tree-item": HTMLChTreeItemElement;
        "ch-tree-x": HTMLChTreeXElement;
        "ch-tree-x-list": HTMLChTreeXListElement;
        "ch-tree-x-list-item": HTMLChTreeXListItemElement;
        "ch-window": HTMLChWindowElement;
        "ch-window-close": HTMLChWindowCloseElement;
        "gx-grid-chameleon": HTMLGxGridChameleonElement;
        "gx-grid-chameleon-column-filter": HTMLGxGridChameleonColumnFilterElement;
    }
}
declare namespace LocalJSX {
    interface ChAccordion {
        /**
          * The description of the entity.
         */
        "accessibleDescription"?: string;
        /**
          * The name of the entity.
         */
        "accessibleName"?: string;
        /**
          * `true` if the accordion is expanded.
         */
        "expanded"?: boolean;
        /**
          * Fired when the content is expanded or collapsed
         */
        "onExpandedChange"?: (event: ChAccordionCustomEvent<boolean>) => void;
    }
    interface ChActionGroup {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "buttonLabel"?: string;
        /**
          * Determine which mouse actions on the expandable button display the dropdown section.
         */
        "expandBehavior"?: "Click" | "ClickOrHover";
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior"?: ItemsOverflowBehavior;
        /**
          * @todo Check a better convention for this property, for example, "ActionsInlineAlignment" This attribute determines the position of the More Actions button in the Action Group.  | Value   | Details                                                               | | --------| --------------------------------------------------------------------- | | `Start` | The More Actions Button is displayed to the left of the ActionGroup.  | | `End`   | The More Actions Button is displayed to the right of the ActionGroup. |
         */
        "moreActionsButtonPosition"?: "Start" | "End";
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition"?: DropdownPosition;
        /**
          * Fired when the item is targeted or not.
         */
        "onDisplayedItemsCountChange"?: (event: ChActionGroupCustomEvent<number>) => void;
        /**
          * Determine if the dropdowns should be opened when the action is focused.
         */
        "openOnFocus"?: boolean;
    }
    interface ChActionGroupItem {
        /**
          * `true` if the control is floating. Useful to implement the `"ResponsiveCollapse"` value for the `itemsOverflowBehavior` property of the ch-action-group control.
         */
        "floating"?: boolean;
    }
    interface ChAlert {
        /**
          * Determine the accessible name of the close button. Important for accessibility.
         */
        "closeButtonAccessibleName"?: string;
        /**
          * Countdown which initial state is dismissTimeout ms.
         */
        "countdown"?: number;
        /**
          * Specifies the time (ms) for the alert to be displayed. if `dismissTimeout = 0`, the alert will be always visible (unless is dismissed by the closeButton).
         */
        "dismissTimeout"?: 0;
        /**
          * Determine src of the left image.
         */
        "leftImgSrc"?: "";
        /**
          * Fires close event
         */
        "onClose"?: (event: ChAlertCustomEvent<any>) => void;
        /**
          * Toggles the Pause on Hover functionality
         */
        "pauseOnHover"?: boolean;
        /**
          * Determine if the element is displayed or not.
         */
        "presented"?: boolean;
        /**
          * Determine if the closeButton is displayed or not.
         */
        "showCloseButton"?: boolean;
        /**
          * If dismissTimeout > 0, a progress bar is displayed at the bottom of the element showing the time left for the alert to show. The progress stops when the element is hovered.
         */
        "showTimeoutBar"?: boolean;
        /**
          * Sets the desired interval
         */
        "timerInterval"?: 50;
    }
    interface ChCheckbox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * Specifies the label of the checkbox.
         */
        "caption"?: string;
        /**
          * Indicates that the control is selected by default.
         */
        "checked"?: boolean;
        /**
          * The value when the checkbox is 'on'
         */
        "checkedValue"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * True to highlight control when an action is fired.
         */
        "highlightable"?: boolean;
        /**
          * `true` if the control's value is indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * Emitted when the element is clicked or the space key is pressed and released.
         */
        "onClick"?: (event: ChCheckboxCustomEvent<any>) => void;
        /**
          * The `input` event is emitted when a change to the element's value is committed by the user.
         */
        "onInput"?: (event: ChCheckboxCustomEvent<any>) => void;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly"?: boolean;
        /**
          * The value when the checkbox is 'off'
         */
        "unCheckedValue"?: string;
        /**
          * The value of the control.
         */
        "value"?: string;
    }
    interface ChDragBar {
        /**
          * Specifies the bar item src. If defined, it will set an image to replace the default bar item.
         */
        "barItemSrc"?: string;
        /**
          * This attribute lets you specify the label for the drag bar. Important for accessibility.
         */
        "barLabel"?: string;
        /**
          * A CSS class to set as the `ch-next-drag-bar` element class.
         */
        "cssClass"?: string;
        /**
          * If `true` an item at the middle of the bar will be displayed to give more context about the resize action
         */
        "showBarItem"?: boolean;
        /**
          * Specifies the initial width of the start component
         */
        "startComponentInitialWidth"?: string;
    }
    interface ChDropdown {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel"?: string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior"?: "Click" | "ClickOrHover";
        /**
          * This attribute lets you specify if the control is nested in another dropdown. Useful to manage keyboard interaction.
         */
        "nestedDropdown"?: boolean;
        /**
          * Fired when the visibility of the dropdown section is changed
         */
        "onExpandedChange"?: (event: ChDropdownCustomEvent<boolean>) => void;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus"?: boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position"?: DropdownPosition;
    }
    interface ChDropdownItem {
        /**
          * Determine which actions on the expandable button display the dropdown section. Only works if the control has subitems.
         */
        "expandBehavior"?: "Click" | "ClickOrHover";
        /**
          * `true` to force the control to make its own containing block.
         */
        "forceContainingBlock"?: boolean;
        /**
          * Specifies the hyperlink of the item. If this property is defined, the control will render an anchor tag with this `href`. Otherwise, it will render a button tag.
         */
        "href"?: string;
        /**
          * Specifies the src for the left img.
         */
        "leftImgSrc"?: string;
        /**
          * Fires when the control's anchor or button is clicked.
         */
        "onActionClick"?: (event: ChDropdownItemCustomEvent<string>) => void;
        /**
          * Fires when the control's anchor or button is in focus.
         */
        "onFocusChange"?: (event: ChDropdownItemCustomEvent<any>) => void;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. Only works if the control has subitems.
         */
        "openOnFocus"?: boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position"?: DropdownPosition;
        /**
          * Specifies the src for the right img.
         */
        "rightImgSrc"?: string;
    }
    interface ChDropdownItemSeparator {
    }
    interface ChFormCheckbox {
        /**
          * The checkbox id
         */
        "checkboxId"?: string;
        /**
          * The presence of this attribute makes the checkbox checked by default
         */
        "checked"?: boolean;
        /**
          * The presence of this attribute disables the checkbox
         */
        "disabled"?: boolean;
        /**
          * The presence of this attribute makes the checkbox indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name"?: string;
        "onChange"?: (event: ChFormCheckboxCustomEvent<any>) => void;
        /**
          * The checkbox value
         */
        "value"?: string;
    }
    interface ChGrid {
        /**
          * A boolean indicating whether the user can drag column headers to reorder columns.
         */
        "allowColumnReorder"?: boolean;
        /**
          * An object that contains localized strings for the grid.
         */
        "localization"?: GridLocalization;
        /**
          * Event emitted when the cell selection is changed.
         */
        "onCellSelectionChanged"?: (event: ChGridCustomEvent<ChGridCellSelectionChangedEvent>) => void;
        /**
          * Event emitted when a row is clicked.
         */
        "onRowClicked"?: (event: ChGridCustomEvent<ChGridRowClickedEvent>) => void;
        /**
          * Event emitted when attempts to open a context menu on a row.
         */
        "onRowContextMenu"?: (event: ChGridCustomEvent<ChGridRowContextMenuEvent>) => void;
        /**
          * Event emitted when a row is double clicked.
         */
        "onRowDoubleClicked"?: (event: ChGridCustomEvent<ChGridRowClickedEvent>) => void;
        /**
          * Event emitted when Enter is pressed on a row.
         */
        "onRowEnterPressed"?: (event: ChGridCustomEvent<ChGridRowPressedEvent>) => void;
        /**
          * Event emitted when the row marking is changed.
         */
        "onRowMarkingChanged"?: (event: ChGridCustomEvent<ChGridMarkingChangedEvent>) => void;
        /**
          * Event emitted when the row selection is changed.
         */
        "onSelectionChanged"?: (event: ChGridCustomEvent<ChGridSelectionChangedEvent>) => void;
        /**
          * A CSS class name applied to a row when it is focused.
         */
        "rowFocusedClass"?: string;
        /**
          * One of "false", "true" or "auto", indicating whether or not rows can be highlighted. "auto", row highlighting will be enabled if the row selection mode is set to "single" or "multiple".
         */
        "rowHighlightEnabled"?: boolean | "auto";
        /**
          * A CSS class name applied to a row when it is hovered.
         */
        "rowHighlightedClass"?: string;
        /**
          * A CSS class name applied to a row when it is marked.
         */
        "rowMarkedClass"?: string;
        /**
          * A CSS class name applied to a row when it is selected.
         */
        "rowSelectedClass"?: string;
        /**
          * One of "none", "single" or "multiple", indicating how rows can be selected. It can be set to "none" if no rows should be selectable, "single" if only one row can be selected at a time, or "multiple" if multiple rows can be selected at once.
         */
        "rowSelectionMode"?: "none" | "single" | "multiple";
    }
    interface ChGridActionRefresh {
        /**
          * Indicates whether the refresh button is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the refresh button is clicked.
         */
        "onRefreshClicked"?: (event: ChGridActionRefreshCustomEvent<any>) => void;
    }
    interface ChGridActionSettings {
        /**
          * Indicates whether the settings button is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the settings button is clicked.
         */
        "onSettingsShowClicked"?: (event: ChGridActionSettingsCustomEvent<any>) => void;
    }
    interface ChGridActionbar {
    }
    interface ChGridColumn {
        /**
          * @deprecated Use "columnImage" or "columnImageSet" instead. A URL to an icon to display in the column header.
         */
        "columnIconUrl"?: string;
        /**
          * A unique identifier for the column.
         */
        "columnId"?: string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImage"?: string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImageSet"?: string;
        /**
          * The text to display in the column header and settings.
         */
        "columnName"?: string;
        /**
          * Indicates whether the text in the column header is visible or not
         */
        "columnNameHidden"?: boolean;
        /**
          * @deprecated Use "columnTooltip" and "columnNameHidden" instead. One of "text" or "title", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.
         */
        "columnNamePosition"?: "text" | "title";
        /**
          * The text to display when the cursor is placed over the column header.
         */
        "columnTooltip"?: string;
        /**
          * One of "plain", "rich", or "tree", indicating the type of cell displayed in the column.
         */
        "columnType"?: "plain" | "rich" | "tree";
        /**
          * A CSS class name to apply to the display observer element used to detect changes in the column visibility.
         */
        "displayObserverClass"?: string;
        /**
          * One of "left" or "right", indicating whether the column should be "frozen" (i.e. remain visible when the user scrolls horizontally).
         */
        "freeze"?: ChGridColumnFreeze;
        /**
          * A boolean indicating whether the column should be hidden. The user can display it from the grid settings.
         */
        "hidden"?: boolean;
        /**
          * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).
         */
        "hideable"?: boolean;
        /**
          * Event emitted when the user stops dragging the column header to move it.
         */
        "onColumnDragEnded"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the user is dragging the column header to move it.
         */
        "onColumnDragStarted"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the user is dragging the column header to move it.
         */
        "onColumnDragging"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the `freeze` property is changed.
         */
        "onColumnFreezeChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnFreezeChangedEvent>) => void;
        /**
          * Event emitted when the `hidden` property is changed.
         */
        "onColumnHiddenChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnHiddenChangedEvent>) => void;
        /**
          * Event emitted when the `order` property is changed.
         */
        "onColumnOrderChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnOrderChangedEvent>) => void;
        /**
          * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector="true"`.
         */
        "onColumnSelectorClicked"?: (event: ChGridColumnCustomEvent<ChGridColumnSelectorClickedEvent>) => void;
        /**
          * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).
         */
        "onColumnSizeChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnSizeChangedEvent>) => void;
        /**
          * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).
         */
        "onColumnSizeChanging"?: (event: ChGridColumnCustomEvent<ChGridColumnSizeChangedEvent>) => void;
        /**
          * Event emitted when the `sortDirection` property is changed.
         */
        "onColumnSortChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnSortChangedEvent>) => void;
        /**
          * A number indicating the order in which the column should appear.
         */
        "order"?: number;
        /**
          * A number indicating the physical order of the column (i.e. its position in the DOM).
         */
        "physicalOrder"?: number;
        /**
          * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).
         */
        "resizable"?: boolean;
        /**
          * A boolean indicating whether the column is currently being resized.
         */
        "resizing"?: boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType="rich").
         */
        "richRowActions"?: boolean;
        /**
          * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType="rich").
         */
        "richRowDrag"?: boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType="rich").
         */
        "richRowSelector"?: boolean;
        /**
          * One of "select" or "mark", indicating the mode of rich row selector. "select" indicates that the row selector is bound to the row selection. "mark" allows to mark a row independently of the selection.
         */
        "richRowSelectorMode"?: "select" | "mark";
        /**
          * Indicate the state of the rich row selector. "" indicates that all rows are unchecked. "checked" indicates that all rows are checked. "indeterminate" indicates that some rows are marked.
         */
        "richRowSelectorState"?: | ""
    | "checked"
    | "indeterminate";
        /**
          * A boolean indicating whether the user should be able to open a settings panel for the column.
         */
        "settingable"?: boolean;
        /**
          * A boolean indicating whether the settings panel for the column should be visible.
         */
        "showSettings"?: boolean;
        /**
          * A string indicating the width of the column. Any value supported by the "grid-template-columns" CSS property is valid.
         */
        "size"?: string;
        /**
          * One of "asc" or "desc", indicating the current sort direction.
         */
        "sortDirection"?: ChGridColumnSortDirection;
        /**
          * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).
         */
        "sortable"?: boolean;
    }
    interface ChGridColumnDisplay {
        /**
          * The column element that is being monitored.
         */
        "column": HTMLChGridColumnElement;
    }
    interface ChGridColumnResize {
        /**
          * The column element that is being resized.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Event emitted when the user finishes resizing the column.
         */
        "onColumnResizeFinished"?: (event: ChGridColumnResizeCustomEvent<any>) => void;
        /**
          * Event emitted when the user starts resizing the column.
         */
        "onColumnResizeStarted"?: (event: ChGridColumnResizeCustomEvent<any>) => void;
    }
    interface ChGridColumnSettings {
        /**
          * The `HTMLChGridColumnElement` that the settings window is associated with.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show"?: boolean;
    }
    interface ChGridColumnset {
    }
    interface ChGridInfiniteScroll {
        /**
          * Event emitted when end is reached.
         */
        "onInfinite"?: (event: ChGridInfiniteScrollCustomEvent<any>) => void;
        /**
          * Indicates whether the grid is loading or already loaded.
         */
        "status"?: ChGridInfiniteScrollState;
    }
    interface ChGridRowActions {
        /**
          * Event emitted when row actions is opened.
         */
        "onRowActionOpened"?: (event: ChGridRowActionsCustomEvent<any>) => void;
        /**
          * Indicates that the row actions are displayed when the row-actions-button is pressed.
         */
        "showOnRowActions"?: boolean;
        /**
          * Indicates that the row actions are displayed when right-clicks on the row.
         */
        "showOnRowContext"?: boolean;
        /**
          * Indicates to show row actions when hovering over row.
         */
        "showOnRowHover"?: boolean;
    }
    interface ChGridRowsetEmpty {
    }
    interface ChGridRowsetLegend {
        /**
          * Event emitted when the legend is clicked.
         */
        "onRowsetLegendClicked"?: (event: ChGridRowsetLegendCustomEvent<CustomEvent>) => void;
    }
    interface ChGridSettings {
        /**
          * The `HTMLChGridElement` that the settings window is associated with.
         */
        "grid": HTMLChGridElement;
        /**
          * Event emitted when the close button of the settings window is clicked.
         */
        "onSettingsCloseClicked"?: (event: ChGridSettingsCustomEvent<any>) => void;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show"?: boolean;
    }
    interface ChGridSettingsColumns {
        /**
          * An array of column elements to render.
         */
        "columns": HTMLChGridColumnElement[];
    }
    interface ChGridVirtualScroller {
        /**
          * The list of items to be rendered in the grid.
         */
        "items"?: any[];
        /**
          * The number of elements in the items list. Use if the list changes, without recreating the array.
         */
        "itemsCount"?: number;
        /**
          * Event emitted when the list of visible items in the grid changes.
         */
        "onViewPortItemsChanged"?: (event: ChGridVirtualScrollerCustomEvent<any>) => void;
        /**
          * The list of items to display within the current viewport.
         */
        "viewPortItems"?: any[];
    }
    interface ChIcon {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: boolean;
        /**
          * The color of the icon.
         */
        "color"?: Color;
        /**
          * If enabled, the icon will be loaded lazily when it's visible in the viewport.
         */
        "lazy"?: boolean;
        /**
          * The size of the icon. Possible values: regular, small.
         */
        "size"?: Size;
        /**
          * The URL of the icon.
         */
        "src"?: string;
    }
    interface ChIntersectionObserver {
        /**
          * Bottom margin around the root element
         */
        "bottomMargin"?: string;
        /**
          * Left margin around the root element
         */
        "leftMargin"?: string;
        /**
          * Emitted whenever the control reaches a threshold specified by the threshold property
          * @param IntersectionObserverEntry Details of intersection object.
         */
        "onIntersectionUpdate"?: (event: ChIntersectionObserverCustomEvent<IntersectionObserverEntry>) => void;
        /**
          * Right margin around the root element
         */
        "rightMargin"?: string;
        /**
          * Set the ID of the component that is used as the viewport, default is the browser.
         */
        "root"?: string;
        /**
          * Numeric values representing percentages of the target element which are visible.
         */
        "threshold"?: string;
        /**
          * Top margin around the root element
         */
        "topMargin"?: string;
    }
    interface ChNextDataModeling {
    }
    interface ChNextDataModelingItem {
        /**
          * This attribute lets you specify if the actions in the `mode === "add"` are visible.
         */
        "actionsVisible"?: boolean;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions"?: DataModelItemLabels;
        /**
          * The dataType of the field.
         */
        "dataType"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled"?: false;
        /**
          * This property maps entities of the current dataModel with their corresponding ATTs.
         */
        "entityNameToATTs"?: EntityNameToATTs;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts"?: { [key in ErrorText]: string };
        /**
          * This property specifies the defined field names of the entity parent.
         */
        "fieldNames"?: string[];
        /**
          * This property specifies at which collection level the field is located.
         */
        "level"?: 0 | 1 | 2;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts"?: number;
        /**
          * This attribute specifies the operating mode of the control
         */
        "mode"?: Mode;
        /**
          * The name of the field.
         */
        "name"?: string;
        /**
          * Fired when the item is confirmed to be deleted
         */
        "onDeleteField"?: (event: ChNextDataModelingItemCustomEvent<any>) => void;
        /**
          * Fired when the item is edited
         */
        "onEditField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * Fired when a new file is committed to be added when adding a new entity (level === 0)
         */
        "onFirstNewField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * Fired when the new field of the new entity tries to commits the adding operation, but fails because it has errors
         */
        "onFirstNewFieldErrors"?: (event: ChNextDataModelingItemCustomEvent<any>) => void;
        /**
          * Fired when a new entity is committed to be added
         */
        "onNewEntity"?: (event: ChNextDataModelingItemCustomEvent<EntityInfo>) => void;
        /**
          * Fired when a new file is committed to be added
         */
        "onNewField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * `true` to show the new field button when `mode === "add"`
         */
        "showNewFieldBtn"?: boolean;
        /**
          * The type of the field.
         */
        "type"?: EntityItemType;
    }
    interface ChNextProgressBar {
        /**
          * It specifies the main text that is shown on the progress.
         */
        "caption"?: string;
        /**
          * A CSS class to set as the `ch-next-progress-bar` element class.
         */
        "cssClass"?: string;
        /**
          * This attribute lets you specify the value of the progress.
         */
        "currentStep"?: number;
        /**
          * It specifies more information that is shown on the progress.
         */
        "description"?: string;
        /**
          * This attribute lets you specify if the progress bar is rendered.
         */
        "presented"?: boolean;
        /**
          * This attribute lets you specify the amount of steps for the progress.
         */
        "steps"?: number;
    }
    interface ChNotifications {
        "delayToAnimateNewNotifications"?: number;
        "notifications"?: NotificationMessageWithDelay[];
        "position"?: "bottom-start" | "bottom-end";
        "timeToDismissNotifications"?: number;
        "timeType"?: "Seconds" | "Milliseconds";
    }
    interface ChNotificationsItem {
        "buttonImgSrc"?: string;
        "closeButtonLabel"?: string;
        "leftImgSrc"?: string;
        "onNotificationClick"?: (event: ChNotificationsItemCustomEvent<number>) => void;
        "onNotificationDismiss"?: (event: ChNotificationsItemCustomEvent<number>) => void;
        /**
          * `true` to show the close notification button
         */
        "showCloseButton"?: boolean;
        "timeToDismiss"?: 5000;
    }
    interface ChPaginator {
        /**
          * The active page number.
         */
        "activePage"?: number;
        /**
          * Indicates that the end has been reached. Use when total pages are not known (totalPages = -1).
         */
        "hasNextPage"?: boolean;
        /**
          * Event emitted when the active page changes.
         */
        "onActivePageChanged"?: (event: ChPaginatorCustomEvent<ChPaginatorActivePageChangedEvent>) => void;
        /**
          * Event emitted when the navigation is requested.
         */
        "onPageNavigationRequested"?: (event: ChPaginatorCustomEvent<ChPaginatorPageNavigationRequestedEvent>) => void;
        /**
          * The total number of pages. Use -1 if not known and 'hasNextPage' property to indicate that the end has been reached.
         */
        "totalPages"?: 1;
    }
    interface ChPaginatorNavigate {
        /**
          * Flag indicating if the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the navigation button is pressed.
         */
        "onNavigateClicked"?: (event: ChPaginatorNavigateCustomEvent<ChPaginatorNavigateClickedEvent>) => void;
        /**
          * The type of navigation button.
         */
        "type"?: ChPaginatorNavigateType;
    }
    interface ChPaginatorPages {
        /**
          * The maximum number of items to display in the pagination.
         */
        "maxSize"?: number;
        /**
          * Event emitted when the page changes.
         */
        "onPageChanged"?: (event: ChPaginatorPagesCustomEvent<ChPaginatorPagesPageChangedEvent>) => void;
        /**
          * The active page number.
         */
        "page"?: number;
        /**
          * Flag to render the first and last pages.
         */
        "renderFirstLastPages"?: boolean;
        /**
          * The text to display for the dots.
         */
        "textDots"?: string;
        /**
          * The total number of pages.
         */
        "totalPages"?: 1;
    }
    interface ChQr {
        /**
          * The background color. By default is transparent.
         */
        "background"?: string | null;
        /**
          * Means "Error correction levels". The four values L, M, Q, and H will use %7, 15%, 25%, and 30% of the QR code for error correction respectively. So on one hand the code will get bigger but chances are also higher that it will be read without errors later on. This value is by default High (H)
         */
        "ecLevel"?: ecLevel;
        /**
          * What color you want your QR code to be. By default is black.
         */
        "fill"?: string;
        /**
          * Defines how round the blocks should be. Numbers from 0 (squares) to 0.5 (maximum round) are supported.
         */
        "radius"?: number;
        /**
          * The total size of the final QR code in pixels - it will be a square. This value is by default "128"
         */
        "size"?: number;
        /**
          * Any kind of text, also links, email addresses, any thing.
         */
        "text"?: string | undefined;
    }
    interface ChSelect {
        "arrowIconSrc"?: string;
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: false;
        "disabled"?: boolean;
        "height"?: string;
        "iconSrc"?: string;
        "name"?: string;
        /**
          * @type EventEmitter * Track component events (I.e. activation of dropdown component)
         */
        "onOnToggle"?: (event: ChSelectCustomEvent<any>) => void;
        /**
          * Emmits the item id
         */
        "onOptionClickedEvent"?: (event: ChSelectCustomEvent<any>) => void;
        "width"?: string;
    }
    interface ChSelectOption {
        /**
          * If enabled, the option icons will display its inherent/natural color
         */
        "autoColor"?: true;
        /**
          * Determines if the option is disabled
         */
        "disabled"?: boolean;
        "height"?: string;
        /**
          * Set the left side icon
         */
        "leftIconSrc"?: string;
        /**
          * Emits the item id
         */
        "onItemClicked"?: (event: ChSelectOptionCustomEvent<any>) => void;
        /**
          * Set the right side icon
         */
        "rightIconSrc"?: string;
        /**
          * Determines the selected option
         */
        "selected"?: boolean;
        /**
          * The select option's value
         */
        "value"?: string;
    }
    interface ChSidebarMenu {
        /**
          * The active item
         */
        "activeItem"?: string;
        /**
          * The initial active item (optional)
         */
        "activeItemId"?: string;
        /**
          * Determines if the menu can be collapsed
         */
        "collapsible"?: boolean;
        /**
          * Allows to set the distance to the top of the page on the menu
         */
        "distanceToTop"?: number;
        /**
          * Determines if the menu is collapsed
         */
        "isCollapsed"?: boolean;
        /**
          * The menu title
         */
        "menuTitle"?: string;
        "onCollapseBtnClicked"?: (event: ChSidebarMenuCustomEvent<any>) => void;
        "onItemClicked"?: (event: ChSidebarMenuCustomEvent<any>) => void;
        /**
          * The presence of this attribute allows the menu to have only one list opened at the same time
         */
        "singleListOpen"?: boolean;
    }
    interface ChSidebarMenuList {
    }
    interface ChSidebarMenuListItem {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: boolean;
        /**
          * The first list item icon (optional)
         */
        "itemIconSrc"?: string;
        /**
          * Emmits the item id
         */
        "onItemClickedEvent"?: (event: ChSidebarMenuListItemCustomEvent<any>) => void;
        /**
          * If this attribute is present the item will be initially uncollapsed
         */
        "uncollapsed"?: boolean;
    }
    interface ChStepList {
    }
    interface ChStepListItem {
        /**
          * Set the left side icon
         */
        "iconSrc"?: string;
        /**
          * Emits the item id
         */
        "onItemClicked"?: (event: ChStepListItemCustomEvent<any>) => void;
    }
    interface ChStyle {
        /**
          * Specifies the location of the stylesheet document
         */
        "href"?: string;
    }
    interface ChSuggest {
        /**
          * If true, it will position the cursor at the end when the input is focused.
         */
        "cursorEnd"?: false;
        /**
          * The debounce amount in milliseconds (This is the time the suggest waits after the user has finished typing, to show the suggestions).
         */
        "debounce"?: number;
        /**
          * The label
         */
        "label"?: string;
        /**
          * The label position
         */
        "labelPosition"?: LabelPosition;
        /**
          * This event is emitted when an item was selected.
         */
        "onSelectionChanged"?: (event: ChSuggestCustomEvent<SuggestItemSelectedEvent>) => void;
        /**
          * This event is emitted every time there input events fires, and it emits the actual input value.
         */
        "onValueChanged"?: (event: ChSuggestCustomEvent<string>) => void;
        /**
          * Wether or not the suggest has a header. The header will show the "suggestTitle" if provided, and a close button.
         */
        "showHeader"?: false;
        /**
          * Whether or not to display the label
         */
        "showLabel"?: boolean;
        /**
          * The suggest title (optional). This is not the same as the "label", rather, this is the title that will appear inside the dropdown. This title will only be visible if "showHeader" is set to true.
         */
        "suggestTitle"?: string;
        /**
          * This is the suggest value.
         */
        "value"?: string;
    }
    interface ChSuggestList {
        /**
          * The label
         */
        "label"?: string;
    }
    interface ChSuggestListItem {
        /**
          * The icon url
         */
        "iconSrc"?: string;
        /**
          * This event is emitted every time the item is about to lose focus, by pressing the "ArrowUp" or "ArrowDown" keyboard keys.
         */
        "onFocusChangeAttempt"?: (event: ChSuggestListItemCustomEvent<FocusChangeAttempt>) => void;
        /**
          * This event is emitted every time the item is selected, either by clicking on it, or by pressing Enter.
         */
        "onItemSelected"?: (event: ChSuggestListItemCustomEvent<SuggestItemSelectedEvent>) => void;
        /**
          * The item value
         */
        "value"?: any;
    }
    interface ChTestActionGroup {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel"?: string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior"?: "Click" | "ClickOrHover";
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "itemsModel"?: ActionGroupItemModel[];
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior"?: ItemsOverflowBehavior;
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition"?: DropdownPosition;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus"?: boolean;
        /**
          * Specifies the separation (in pixels) between the expandable button and the dropdown section of the control.
         */
        "separation"?: number;
    }
    interface ChTestDropdown {
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonLabel"?: string;
        /**
          * Determine which actions on the expandable button display the dropdown section.
         */
        "expandBehavior"?: "Click" | "ClickOrHover";
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "itemsModel"?: DropdownItemModel[];
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused.
         */
        "openOnFocus"?: boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position"?: DropdownPosition;
        /**
          * Specifies the separation (in pixels) between the expandable button and the dropdown section of the control.
         */
        "separation"?: number;
    }
    interface ChTestTreeX {
        /**
          * Callback that is executed when an element tries to drop in another item of the tree. Returns whether the drop is valid.
         */
        "checkDroppableZoneCallback"?: (
    dropInformation: TreeXDropCheckInfo
  ) => Promise<boolean>;
        /**
          * This attribute lets you specify if the drag operation is disabled in all items by default. If `true`, the control can't be dragged.
         */
        "dragDisabled"?: boolean;
        /**
          * This attribute lets you specify if the drop operation is disabled in all items by default. If `true`, the control won't accept any drops.
         */
        "dropDisabled"?: boolean;
        /**
          * Callback that is executed when a list of items request to be dropped into another item.
         */
        "dropItemsCallback"?: (
    dataTransferInfo: TreeXDataTransferInfo
  ) => Promise<{ acceptDrop: boolean; items?: TreeXItemModel[] }>;
        /**
          * Callback that is executed when a item request to load its subitems.
         */
        "lazyLoadTreeItemsCallback"?: (
    treeItemId: string
  ) => Promise<TreeXItemModel[]>;
        /**
          * Callback that is executed when a item request to modify its caption.
         */
        "modifyItemCaptionCallback"?: (
    treeItemId: string,
    newCaption: string
  ) => Promise<TreeXOperationStatusModifyCaption>;
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection"?: boolean;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines"?: TreeXLines;
        /**
          * Callback that is executed when the treeModel is changed to order its items.
         */
        "sortItemsCallback"?: (subModel: TreeXItemModel[]) => void;
        /**
          * This property lets you define the model of the ch-tree-x control.
         */
        "treeModel"?: TreeXModel;
    }
    interface ChTextblock {
        /**
          * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
         */
        "format"?: "Text" | "HTML";
        /**
          * True to cut text when it overflows, showing an ellipsis.
         */
        "lineClamp"?: boolean;
        /**
          * Determine the tooltip text that will be displayed when the pointer is over the control
         */
        "tooltip"?: string;
        /**
          * Determine the way that the tooltip text will be displayed
         */
        "tooltipShowMode"?: "always" | "line-clamp";
    }
    interface ChTimer {
        /**
          * Sets the accesible name of the timer.
         */
        "accessibleName"?: string;
        /**
          * Sets the animationTime to set the custom var for the css animation.
         */
        "animationTime"?: number;
        /**
          * Sets the presented property to handle the component presentation.
         */
        "presented"?: boolean;
        /**
          * Sets the progress propiety to determine the progress.
         */
        "progress"?: number;
    }
    interface ChTree {
        /**
          * Set this attribute if you want all this tree tree-items to have a checkbox
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want all this tree tree-items to have the checkbox checked
         */
        "checked"?: boolean;
        /**
          * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
         */
        "toggleCheckboxes"?: boolean;
    }
    interface ChTreeItem {
        /**
          * Set this attribute if you want the ch-tree-item to display a checkbox
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want the ch-tree-item checkbox to be checked by default
         */
        "checked"?: boolean;
        "disabled"?: boolean;
        /**
          * Set this attribute if this tree-item has a resource to be downloaded;
         */
        "download"?: boolean;
        /**
          * Set this attribute when you have downloaded the resource
         */
        "downloaded"?: boolean;
        /**
          * Set this attribute when you are downloading a resource
         */
        "downloading"?: boolean;
        "firstTreeItem"?: boolean;
        "hasChildTree"?: boolean;
        "indeterminate"?: boolean;
        /**
          * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
         */
        "isLeaf"?: boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftIcon"?: string;
        /**
          * Emits the checkbox information (chTreeItemData) that includes: the id, name(innerText) and checkbox value.
         */
        "onCheckboxClickedEvent"?: (event: ChTreeItemCustomEvent<chTreeItemData>) => void;
        "onLiItemClicked"?: (event: ChTreeItemCustomEvent<any>) => void;
        "onToggleIconClicked"?: (event: ChTreeItemCustomEvent<any>) => void;
        /**
          * If this tree-item has a nested tree, set this attribute to make the tree open by default
         */
        "opened"?: boolean;
        /**
          * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightIcon"?: string;
        /**
          * The presence of this attribute sets the tree-item as selected
         */
        "selected"?: boolean;
    }
    interface ChTreeX {
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection"?: boolean;
        /**
          * Fired when an element attempts to enter in a droppable zone where the tree has no information about the validity of the drop.
         */
        "onDroppableZoneEnter"?: (event: ChTreeXCustomEvent<TreeXDropCheckInfo>) => void;
        /**
          * Fired when an item is expanded or collapsed.
         */
        "onExpandedItemChange"?: (event: ChTreeXCustomEvent<TreeXListItemExpandedInfo>) => void;
        /**
          * Fired when the dragged items are dropped in another item of the tree.
         */
        "onItemsDropped"?: (event: ChTreeXCustomEvent<TreeXDataTransferInfo>) => void;
        /**
          * Fired when the selected items change.
         */
        "onSelectedItemsChange"?: (event: ChTreeXCustomEvent<Map<string, TreeXListItemSelectedInfo>>) => void;
        /**
          * This property lets you specify the time (in ms) that the mouse must be over in a subtree to open it when dragging.
         */
        "openSubTreeCountdown"?: number;
        /**
          * `true` to scroll in the tree when dragging an item near the edges of the tree.
         */
        "scrollToEdgeOnDrag"?: boolean;
        /**
          * This property lets you specify if the tree is waiting to process the drop of items.
         */
        "waitDropProcessing"?: boolean;
    }
    interface ChTreeXList {
        /**
          * Level in the tree at which the control is placed.
         */
        "level"?: number;
    }
    interface ChTreeXListItem {
        /**
          * This attributes specifies the caption of the control
         */
        "caption"?: string;
        /**
          * Set this attribute if you want display a checkbox in the control.
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want the checkbox to be checked by default. Only works if `checkbox = true`
         */
        "checked"?: boolean;
        /**
          * Set this attribute if you want to set a custom render for the control, by passing a slot.
         */
        "customRender"?: boolean;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * This attribute lets you specify when items are being lazy loaded in the control.
         */
        "downloading"?: boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in the control. If `true`, the control can't be dragged.
         */
        "dragDisabled"?: boolean;
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState"?: DragState;
        /**
          * This attribute lets you specify if the drop operation is disabled in the control. If `true`, the control won't accept any drops.
         */
        "dropDisabled"?: boolean;
        /**
          * Set this attribute when the item is in edit mode
         */
        "editing"?: boolean;
        /**
          * If the item has a sub-tree, this attribute determines if the subtree is displayed.
         */
        "expanded"?: boolean;
        /**
          * `true` if the checkbox's value is indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * This attribute specifies if the control is the last items in its subtree
         */
        "lastItem"?: boolean;
        /**
          * Determine if the items are lazy loaded when opening the first time the control.
         */
        "lazyLoad"?: boolean;
        /**
          * The presence of this attribute determine whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf"?: boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftImgSrc"?: string;
        /**
          * Level in the tree at which the item is placed.
         */
        "level"?: number;
        /**
          * This attribute represents additional info for the control that is included when dragging the item.
         */
        "metadata"?: string;
        /**
          * Fired when the checkbox value of the control is changed.
         */
        "onCheckboxChange"?: (event: ChTreeXListItemCustomEvent<boolean>) => void;
        /**
          * Fired when the item is no longer being dragged.
         */
        "onItemDragEnd"?: (event: ChTreeXListItemCustomEvent<any>) => void;
        /**
          * Fired when the item is being dragged.
         */
        "onItemDragStart"?: (event: ChTreeXListItemCustomEvent<TreeXItemDragStartInfo>) => void;
        /**
          * Fired when the lazy control is expanded an its content must be loaded.
         */
        "onLoadLazyContent"?: (event: ChTreeXListItemCustomEvent<string>) => void;
        /**
          * Fired when the item is asking to modify its caption.
         */
        "onModifyCaption"?: (event: ChTreeXListItemCustomEvent<TreeXListItemNewCaption>) => void;
        /**
          * Fired when the selected state is updated by user interaction on the control.
         */
        "onSelectedItemChange"?: (event: ChTreeXListItemCustomEvent<TreeXListItemSelectedInfo>) => void;
        /**
          * Fired when the selected state is updated through the interface and without user interaction. The purpose of this event is to better sync with the main tree.
         */
        "onSelectedItemSync"?: (event: ChTreeXListItemCustomEvent<TreeXListItemSelectedInfo>) => void;
        /**
          * Set the right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightImgSrc"?: string;
        /**
          * This attribute lets you specify if the item is selected
         */
        "selected"?: boolean;
        /**
          * `true` to show the downloading spinner when lazy loading the sub items of the control.
         */
        "showDownloadingSpinner"?: boolean;
        /**
          * `true` to show the expandable button that allows to expand/collapse the items of the control. Only works if `leaf === false`.
         */
        "showExpandableButton"?: boolean;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines"?: TreeXLines;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked.
         */
        "toggleCheckboxes"?: boolean;
    }
    interface ChWindow {
        /**
          * Specifies the drag behavior of the window.
         */
        "allowDrag"?: "no" | "header" | "box";
        /**
          * The caption or title of the window.
         */
        "caption"?: string;
        /**
          * Determines whether the window should close when the Escape key is pressed.
         */
        "closeOnEscape"?: boolean;
        /**
          * Determines whether the window should close when clicked outside.
         */
        "closeOnOutsideClick"?: boolean;
        /**
          * The text for the close button.
         */
        "closeText"?: string;
        /**
          * The tooltip text for the close button.
         */
        "closeTooltip"?: string;
        /**
          * The container element for the window.
         */
        "container"?: HTMLElement;
        /**
          * Determines if the window is hidden or visible.
         */
        "hidden"?: boolean;
        /**
          * Specifies whether the window should be displayed as a modal.
         */
        "modal"?: boolean;
        /**
          * Emitted when the window is closed.
         */
        "onWindowClosed"?: (event: ChWindowCustomEvent<any>) => void;
        /**
          * Emitted when the window is opened.
         */
        "onWindowOpened"?: (event: ChWindowCustomEvent<any>) => void;
        /**
          * This attribute lets you specify if a footer is rendered at the bottom of the window.
         */
        "showFooter"?: boolean;
        /**
          * This attribute lets you specify if a header is rendered on top of the window.
         */
        "showHeader"?: boolean;
        /**
          * This attribute lets you specify if a div wrapper is rendered for the default slot.
         */
        "showMain"?: boolean;
        /**
          * This attribute lets you specify if a div between the container and the window space.
         */
        "showSeparation"?: boolean;
        /**
          * The horizontal alignment of the window.
         */
        "xAlign"?: ChWindowAlign;
        /**
          * The vertical alignment of the window.
         */
        "yAlign"?: ChWindowAlign;
    }
    interface ChWindowClose {
        /**
          * Specifies whether the close button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the close button is clicked.
         */
        "onWindowCloseClicked"?: (event: ChWindowCloseCustomEvent<any>) => void;
    }
    interface GxGridChameleon {
        /**
          * The GxGrid instance representing the data to be displayed in the grid.
         */
        "grid": GxGrid;
        /**
          * The timestamp indicating the time when the grid was last updated.
         */
        "gridTimestamp"?: number;
        /**
          * The UI state of the Grid.
         */
        "state"?: GridChameleonState;
    }
    interface GxGridChameleonColumnFilter {
        /**
          * The text to display on the "Apply" button.
         */
        "buttonApplyText"?: string;
        /**
          * The text to display on the "Reset" button.
         */
        "buttonResetText"?: string;
        /**
          * The grid column associated with this filter.
         */
        "column": GxGridColumn;
        /**
          * The value to filter for equality comparison.
         */
        "equal"?: string;
        /**
          * The value to filter for greater-than comparison.
         */
        "greater"?: string;
        /**
          * The value to filter for less-than comparison.
         */
        "less"?: string;
        /**
          * Emitted when the filter settings for the column have changed. This event carries the updated filter values.
         */
        "onColumnSettingsChanged"?: (event: GxGridChameleonColumnFilterCustomEvent<GridChameleonColumnFilterChanged>) => void;
    }
    interface IntrinsicElements {
        "ch-accordion": ChAccordion;
        "ch-action-group": ChActionGroup;
        "ch-action-group-item": ChActionGroupItem;
        "ch-alert": ChAlert;
        "ch-checkbox": ChCheckbox;
        "ch-drag-bar": ChDragBar;
        "ch-dropdown": ChDropdown;
        "ch-dropdown-item": ChDropdownItem;
        "ch-dropdown-item-separator": ChDropdownItemSeparator;
        "ch-form-checkbox": ChFormCheckbox;
        "ch-grid": ChGrid;
        "ch-grid-action-refresh": ChGridActionRefresh;
        "ch-grid-action-settings": ChGridActionSettings;
        "ch-grid-actionbar": ChGridActionbar;
        "ch-grid-column": ChGridColumn;
        "ch-grid-column-display": ChGridColumnDisplay;
        "ch-grid-column-resize": ChGridColumnResize;
        "ch-grid-column-settings": ChGridColumnSettings;
        "ch-grid-columnset": ChGridColumnset;
        "ch-grid-infinite-scroll": ChGridInfiniteScroll;
        "ch-grid-row-actions": ChGridRowActions;
        "ch-grid-rowset-empty": ChGridRowsetEmpty;
        "ch-grid-rowset-legend": ChGridRowsetLegend;
        "ch-grid-settings": ChGridSettings;
        "ch-grid-settings-columns": ChGridSettingsColumns;
        "ch-grid-virtual-scroller": ChGridVirtualScroller;
        "ch-icon": ChIcon;
        "ch-intersection-observer": ChIntersectionObserver;
        "ch-next-data-modeling": ChNextDataModeling;
        "ch-next-data-modeling-item": ChNextDataModelingItem;
        "ch-next-progress-bar": ChNextProgressBar;
        "ch-notifications": ChNotifications;
        "ch-notifications-item": ChNotificationsItem;
        "ch-paginator": ChPaginator;
        "ch-paginator-navigate": ChPaginatorNavigate;
        "ch-paginator-pages": ChPaginatorPages;
        "ch-qr": ChQr;
        "ch-select": ChSelect;
        "ch-select-option": ChSelectOption;
        "ch-sidebar-menu": ChSidebarMenu;
        "ch-sidebar-menu-list": ChSidebarMenuList;
        "ch-sidebar-menu-list-item": ChSidebarMenuListItem;
        "ch-step-list": ChStepList;
        "ch-step-list-item": ChStepListItem;
        "ch-style": ChStyle;
        "ch-suggest": ChSuggest;
        "ch-suggest-list": ChSuggestList;
        "ch-suggest-list-item": ChSuggestListItem;
        "ch-test-action-group": ChTestActionGroup;
        "ch-test-dropdown": ChTestDropdown;
        "ch-test-tree-x": ChTestTreeX;
        "ch-textblock": ChTextblock;
        "ch-timer": ChTimer;
        "ch-tree": ChTree;
        "ch-tree-item": ChTreeItem;
        "ch-tree-x": ChTreeX;
        "ch-tree-x-list": ChTreeXList;
        "ch-tree-x-list-item": ChTreeXListItem;
        "ch-window": ChWindow;
        "ch-window-close": ChWindowClose;
        "gx-grid-chameleon": GxGridChameleon;
        "gx-grid-chameleon-column-filter": GxGridChameleonColumnFilter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ch-accordion": LocalJSX.ChAccordion & JSXBase.HTMLAttributes<HTMLChAccordionElement>;
            "ch-action-group": LocalJSX.ChActionGroup & JSXBase.HTMLAttributes<HTMLChActionGroupElement>;
            "ch-action-group-item": LocalJSX.ChActionGroupItem & JSXBase.HTMLAttributes<HTMLChActionGroupItemElement>;
            "ch-alert": LocalJSX.ChAlert & JSXBase.HTMLAttributes<HTMLChAlertElement>;
            "ch-checkbox": LocalJSX.ChCheckbox & JSXBase.HTMLAttributes<HTMLChCheckboxElement>;
            "ch-drag-bar": LocalJSX.ChDragBar & JSXBase.HTMLAttributes<HTMLChDragBarElement>;
            "ch-dropdown": LocalJSX.ChDropdown & JSXBase.HTMLAttributes<HTMLChDropdownElement>;
            "ch-dropdown-item": LocalJSX.ChDropdownItem & JSXBase.HTMLAttributes<HTMLChDropdownItemElement>;
            "ch-dropdown-item-separator": LocalJSX.ChDropdownItemSeparator & JSXBase.HTMLAttributes<HTMLChDropdownItemSeparatorElement>;
            "ch-form-checkbox": LocalJSX.ChFormCheckbox & JSXBase.HTMLAttributes<HTMLChFormCheckboxElement>;
            "ch-grid": LocalJSX.ChGrid & JSXBase.HTMLAttributes<HTMLChGridElement>;
            "ch-grid-action-refresh": LocalJSX.ChGridActionRefresh & JSXBase.HTMLAttributes<HTMLChGridActionRefreshElement>;
            "ch-grid-action-settings": LocalJSX.ChGridActionSettings & JSXBase.HTMLAttributes<HTMLChGridActionSettingsElement>;
            "ch-grid-actionbar": LocalJSX.ChGridActionbar & JSXBase.HTMLAttributes<HTMLChGridActionbarElement>;
            "ch-grid-column": LocalJSX.ChGridColumn & JSXBase.HTMLAttributes<HTMLChGridColumnElement>;
            "ch-grid-column-display": LocalJSX.ChGridColumnDisplay & JSXBase.HTMLAttributes<HTMLChGridColumnDisplayElement>;
            "ch-grid-column-resize": LocalJSX.ChGridColumnResize & JSXBase.HTMLAttributes<HTMLChGridColumnResizeElement>;
            "ch-grid-column-settings": LocalJSX.ChGridColumnSettings & JSXBase.HTMLAttributes<HTMLChGridColumnSettingsElement>;
            "ch-grid-columnset": LocalJSX.ChGridColumnset & JSXBase.HTMLAttributes<HTMLChGridColumnsetElement>;
            "ch-grid-infinite-scroll": LocalJSX.ChGridInfiniteScroll & JSXBase.HTMLAttributes<HTMLChGridInfiniteScrollElement>;
            "ch-grid-row-actions": LocalJSX.ChGridRowActions & JSXBase.HTMLAttributes<HTMLChGridRowActionsElement>;
            "ch-grid-rowset-empty": LocalJSX.ChGridRowsetEmpty & JSXBase.HTMLAttributes<HTMLChGridRowsetEmptyElement>;
            "ch-grid-rowset-legend": LocalJSX.ChGridRowsetLegend & JSXBase.HTMLAttributes<HTMLChGridRowsetLegendElement>;
            "ch-grid-settings": LocalJSX.ChGridSettings & JSXBase.HTMLAttributes<HTMLChGridSettingsElement>;
            "ch-grid-settings-columns": LocalJSX.ChGridSettingsColumns & JSXBase.HTMLAttributes<HTMLChGridSettingsColumnsElement>;
            "ch-grid-virtual-scroller": LocalJSX.ChGridVirtualScroller & JSXBase.HTMLAttributes<HTMLChGridVirtualScrollerElement>;
            "ch-icon": LocalJSX.ChIcon & JSXBase.HTMLAttributes<HTMLChIconElement>;
            "ch-intersection-observer": LocalJSX.ChIntersectionObserver & JSXBase.HTMLAttributes<HTMLChIntersectionObserverElement>;
            "ch-next-data-modeling": LocalJSX.ChNextDataModeling & JSXBase.HTMLAttributes<HTMLChNextDataModelingElement>;
            "ch-next-data-modeling-item": LocalJSX.ChNextDataModelingItem & JSXBase.HTMLAttributes<HTMLChNextDataModelingItemElement>;
            "ch-next-progress-bar": LocalJSX.ChNextProgressBar & JSXBase.HTMLAttributes<HTMLChNextProgressBarElement>;
            "ch-notifications": LocalJSX.ChNotifications & JSXBase.HTMLAttributes<HTMLChNotificationsElement>;
            "ch-notifications-item": LocalJSX.ChNotificationsItem & JSXBase.HTMLAttributes<HTMLChNotificationsItemElement>;
            "ch-paginator": LocalJSX.ChPaginator & JSXBase.HTMLAttributes<HTMLChPaginatorElement>;
            "ch-paginator-navigate": LocalJSX.ChPaginatorNavigate & JSXBase.HTMLAttributes<HTMLChPaginatorNavigateElement>;
            "ch-paginator-pages": LocalJSX.ChPaginatorPages & JSXBase.HTMLAttributes<HTMLChPaginatorPagesElement>;
            "ch-qr": LocalJSX.ChQr & JSXBase.HTMLAttributes<HTMLChQrElement>;
            "ch-select": LocalJSX.ChSelect & JSXBase.HTMLAttributes<HTMLChSelectElement>;
            "ch-select-option": LocalJSX.ChSelectOption & JSXBase.HTMLAttributes<HTMLChSelectOptionElement>;
            "ch-sidebar-menu": LocalJSX.ChSidebarMenu & JSXBase.HTMLAttributes<HTMLChSidebarMenuElement>;
            "ch-sidebar-menu-list": LocalJSX.ChSidebarMenuList & JSXBase.HTMLAttributes<HTMLChSidebarMenuListElement>;
            "ch-sidebar-menu-list-item": LocalJSX.ChSidebarMenuListItem & JSXBase.HTMLAttributes<HTMLChSidebarMenuListItemElement>;
            "ch-step-list": LocalJSX.ChStepList & JSXBase.HTMLAttributes<HTMLChStepListElement>;
            "ch-step-list-item": LocalJSX.ChStepListItem & JSXBase.HTMLAttributes<HTMLChStepListItemElement>;
            "ch-style": LocalJSX.ChStyle & JSXBase.HTMLAttributes<HTMLChStyleElement>;
            "ch-suggest": LocalJSX.ChSuggest & JSXBase.HTMLAttributes<HTMLChSuggestElement>;
            "ch-suggest-list": LocalJSX.ChSuggestList & JSXBase.HTMLAttributes<HTMLChSuggestListElement>;
            "ch-suggest-list-item": LocalJSX.ChSuggestListItem & JSXBase.HTMLAttributes<HTMLChSuggestListItemElement>;
            "ch-test-action-group": LocalJSX.ChTestActionGroup & JSXBase.HTMLAttributes<HTMLChTestActionGroupElement>;
            "ch-test-dropdown": LocalJSX.ChTestDropdown & JSXBase.HTMLAttributes<HTMLChTestDropdownElement>;
            "ch-test-tree-x": LocalJSX.ChTestTreeX & JSXBase.HTMLAttributes<HTMLChTestTreeXElement>;
            "ch-textblock": LocalJSX.ChTextblock & JSXBase.HTMLAttributes<HTMLChTextblockElement>;
            "ch-timer": LocalJSX.ChTimer & JSXBase.HTMLAttributes<HTMLChTimerElement>;
            "ch-tree": LocalJSX.ChTree & JSXBase.HTMLAttributes<HTMLChTreeElement>;
            "ch-tree-item": LocalJSX.ChTreeItem & JSXBase.HTMLAttributes<HTMLChTreeItemElement>;
            "ch-tree-x": LocalJSX.ChTreeX & JSXBase.HTMLAttributes<HTMLChTreeXElement>;
            "ch-tree-x-list": LocalJSX.ChTreeXList & JSXBase.HTMLAttributes<HTMLChTreeXListElement>;
            "ch-tree-x-list-item": LocalJSX.ChTreeXListItem & JSXBase.HTMLAttributes<HTMLChTreeXListItemElement>;
            "ch-window": LocalJSX.ChWindow & JSXBase.HTMLAttributes<HTMLChWindowElement>;
            "ch-window-close": LocalJSX.ChWindowClose & JSXBase.HTMLAttributes<HTMLChWindowCloseElement>;
            "gx-grid-chameleon": LocalJSX.GxGridChameleon & JSXBase.HTMLAttributes<HTMLGxGridChameleonElement>;
            "gx-grid-chameleon-column-filter": LocalJSX.GxGridChameleonColumnFilter & JSXBase.HTMLAttributes<HTMLGxGridChameleonColumnFilterElement>;
        }
    }
}
