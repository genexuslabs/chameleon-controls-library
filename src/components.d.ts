/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ItemsOverflowBehavior } from "./components/action-group/internal/action-group/types";
import { DropdownPosition } from "./components/dropdown/internal/dropdown/types";
import { ActionGroupItemModel } from "./components/action-group/types";
import { ComboBoxFilterOptions, ComboBoxFilterType, ComboBoxItemModel } from "./components/combobox/types";
import { GxDataTransferInfo, ImageRender, LabelPosition } from "./common/types";
import { DropdownItemModel } from "./components/dropdown/types";
import { DraggableViewInfo, FlexibleLayout, FlexibleLayoutGroup, FlexibleLayoutItem, FlexibleLayoutItemExtended, FlexibleLayoutLeaf, FlexibleLayoutLeafType, FlexibleLayoutRenders, FlexibleLayoutViewRemoveResult, FlexibleLayoutWidget, ViewItemCloseInfo, ViewSelectedItemInfo, WidgetReorderInfo } from "./components/flexible-layout/internal/flexible-layout/types";
import { GridLocalization } from "./components/grid/ch-grid";
import { ChGridCellSelectionChangedEvent, ChGridMarkingChangedEvent, ChGridRowClickedEvent, ChGridRowContextMenuEvent, ChGridRowPressedEvent, ChGridSelectionChangedEvent } from "./components/grid/ch-grid-types";
import { ChGridColumnDragEvent, ChGridColumnFreeze, ChGridColumnFreezeChangedEvent, ChGridColumnHiddenChangedEvent, ChGridColumnOrderChangedEvent, ChGridColumnResizeEvent, ChGridColumnSelectorClickedEvent, ChGridColumnSizeChangedEvent, ChGridColumnSortChangedEvent, ChGridColumnSortDirection } from "./components/grid/grid-column/ch-grid-column-types";
import { ChGridInfiniteScrollState } from "./components/grid/grid-infinite-scroll/ch-grid-infinite-scroll";
import { Color, Size } from "./deprecated-components/icon/icon";
import { GroupExtended, LayoutSplitterDistribution, LayoutSplitterDistributionLeaf, LayoutSplitterItemAddResult, LayoutSplitterItemRemoveResult } from "./components/layout-splitter/types";
import { ListDirection, ListItemCloseInfo, ListSelectedItemInfo } from "./components/list/types";
import { MarkdownCodeRender } from "./components/markdown/parsers/types";
import { DataModelItemLabels, EntityInfo, ErrorText, ItemInfo, Mode } from "./components/next/data-modeling-item/next-data-modeling-item";
import { DataModel, EntityItem, EntityItemType, EntityNameToATTs } from "./components/next/data-modeling/data-model";
import { DataModelItemLabels as DataModelItemLabels1, ErrorText as ErrorText1 } from "./components/next/data-modeling-item/next-data-modeling-item";
import { NotificationMessageWithDelay } from "./components/notifications/notifications-types";
import { ChPaginatorActivePageChangedEvent, ChPaginatorPageNavigationRequestedEvent } from "./components/paginator/ch-paginator";
import { ChPaginatorNavigateClickedEvent, ChPaginatorNavigateType } from "./components/paginator/paginator-navigate/ch-paginator-navigate-types";
import { ChPaginatorPagesPageChangedEvent } from "./components/paginator/paginator-pages/ch-paginator-pages";
import { ChPopoverAlign, ChPopoverSizeMatch, PopoverActionElement } from "./components/popover/types";
import { ecLevel } from "./components/qr/ch-qr";
import { RadioItem } from "./components/radio-group/types";
import { SegmentedControlItem } from "./components/segmented-control/types";
import { SuggestItemSelectedEvent } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
import { FocusChangeAttempt, SuggestItemSelectedEvent as SuggestItemSelectedEvent1 } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
import { SelectorCategoryData } from "./components/test/test-suggest/test-suggest";
import { ChThemeLoadedEvent } from "./components/theme/theme-stylesheet";
import { checkedChTreeItem } from "./deprecated-components/tree/ch-tree";
import { chTreeItemData } from "./deprecated-components/tree-item/ch-tree-item";
import { TreeViewDataTransferInfo, TreeViewDropCheckInfo, TreeViewDropType, TreeViewItemCheckedInfo, TreeViewItemContextMenu, TreeViewItemDragStartInfo, TreeViewItemExpandedInfo, TreeViewItemNewCaption, TreeViewItemOpenReferenceInfo, TreeViewItemSelected, TreeViewItemSelectedInfo, TreeViewLines } from "./components/tree-view/internal/tree-view/types";
import { DragState } from "./components/tree-view/internal/tree-view-item/tree-view-item";
import { DragState as DragState1 } from "./components/tree-view/internal/tree-view-item/tree-view-item";
import { LazyLoadTreeItemsCallback, TreeViewFilterOptions, TreeViewFilterType, TreeViewImagePathCallback, TreeViewItemModel, TreeViewItemModelExtended, TreeViewOperationStatusModifyCaption, TreeViewRemoveItemsResult } from "./components/tree-view/types";
import { ChWindowAlign } from "./deprecated-components/window/ch-window";
import { GxGrid, GxGridColumn } from "./components/gx-grid/genexus";
import { GridChameleonState } from "./components/gx-grid/gx-grid-chameleon-state";
import { GridChameleonColumnFilterChanged } from "./components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter";
export { ItemsOverflowBehavior } from "./components/action-group/internal/action-group/types";
export { DropdownPosition } from "./components/dropdown/internal/dropdown/types";
export { ActionGroupItemModel } from "./components/action-group/types";
export { ComboBoxFilterOptions, ComboBoxFilterType, ComboBoxItemModel } from "./components/combobox/types";
export { GxDataTransferInfo, ImageRender, LabelPosition } from "./common/types";
export { DropdownItemModel } from "./components/dropdown/types";
export { DraggableViewInfo, FlexibleLayout, FlexibleLayoutGroup, FlexibleLayoutItem, FlexibleLayoutItemExtended, FlexibleLayoutLeaf, FlexibleLayoutLeafType, FlexibleLayoutRenders, FlexibleLayoutViewRemoveResult, FlexibleLayoutWidget, ViewItemCloseInfo, ViewSelectedItemInfo, WidgetReorderInfo } from "./components/flexible-layout/internal/flexible-layout/types";
export { GridLocalization } from "./components/grid/ch-grid";
export { ChGridCellSelectionChangedEvent, ChGridMarkingChangedEvent, ChGridRowClickedEvent, ChGridRowContextMenuEvent, ChGridRowPressedEvent, ChGridSelectionChangedEvent } from "./components/grid/ch-grid-types";
export { ChGridColumnDragEvent, ChGridColumnFreeze, ChGridColumnFreezeChangedEvent, ChGridColumnHiddenChangedEvent, ChGridColumnOrderChangedEvent, ChGridColumnResizeEvent, ChGridColumnSelectorClickedEvent, ChGridColumnSizeChangedEvent, ChGridColumnSortChangedEvent, ChGridColumnSortDirection } from "./components/grid/grid-column/ch-grid-column-types";
export { ChGridInfiniteScrollState } from "./components/grid/grid-infinite-scroll/ch-grid-infinite-scroll";
export { Color, Size } from "./deprecated-components/icon/icon";
export { GroupExtended, LayoutSplitterDistribution, LayoutSplitterDistributionLeaf, LayoutSplitterItemAddResult, LayoutSplitterItemRemoveResult } from "./components/layout-splitter/types";
export { ListDirection, ListItemCloseInfo, ListSelectedItemInfo } from "./components/list/types";
export { MarkdownCodeRender } from "./components/markdown/parsers/types";
export { DataModelItemLabels, EntityInfo, ErrorText, ItemInfo, Mode } from "./components/next/data-modeling-item/next-data-modeling-item";
export { DataModel, EntityItem, EntityItemType, EntityNameToATTs } from "./components/next/data-modeling/data-model";
export { DataModelItemLabels as DataModelItemLabels1, ErrorText as ErrorText1 } from "./components/next/data-modeling-item/next-data-modeling-item";
export { NotificationMessageWithDelay } from "./components/notifications/notifications-types";
export { ChPaginatorActivePageChangedEvent, ChPaginatorPageNavigationRequestedEvent } from "./components/paginator/ch-paginator";
export { ChPaginatorNavigateClickedEvent, ChPaginatorNavigateType } from "./components/paginator/paginator-navigate/ch-paginator-navigate-types";
export { ChPaginatorPagesPageChangedEvent } from "./components/paginator/paginator-pages/ch-paginator-pages";
export { ChPopoverAlign, ChPopoverSizeMatch, PopoverActionElement } from "./components/popover/types";
export { ecLevel } from "./components/qr/ch-qr";
export { RadioItem } from "./components/radio-group/types";
export { SegmentedControlItem } from "./components/segmented-control/types";
export { SuggestItemSelectedEvent } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
export { FocusChangeAttempt, SuggestItemSelectedEvent as SuggestItemSelectedEvent1 } from "./components/suggest/suggest-list-item/ch-suggest-list-item";
export { SelectorCategoryData } from "./components/test/test-suggest/test-suggest";
export { ChThemeLoadedEvent } from "./components/theme/theme-stylesheet";
export { checkedChTreeItem } from "./deprecated-components/tree/ch-tree";
export { chTreeItemData } from "./deprecated-components/tree-item/ch-tree-item";
export { TreeViewDataTransferInfo, TreeViewDropCheckInfo, TreeViewDropType, TreeViewItemCheckedInfo, TreeViewItemContextMenu, TreeViewItemDragStartInfo, TreeViewItemExpandedInfo, TreeViewItemNewCaption, TreeViewItemOpenReferenceInfo, TreeViewItemSelected, TreeViewItemSelectedInfo, TreeViewLines } from "./components/tree-view/internal/tree-view/types";
export { DragState } from "./components/tree-view/internal/tree-view-item/tree-view-item";
export { DragState as DragState1 } from "./components/tree-view/internal/tree-view-item/tree-view-item";
export { LazyLoadTreeItemsCallback, TreeViewFilterOptions, TreeViewFilterType, TreeViewImagePathCallback, TreeViewItemModel, TreeViewItemModelExtended, TreeViewOperationStatusModifyCaption, TreeViewRemoveItemsResult } from "./components/tree-view/types";
export { ChWindowAlign } from "./deprecated-components/window/ch-window";
export { GxGrid, GxGridColumn } from "./components/gx-grid/genexus";
export { GridChameleonState } from "./components/gx-grid/gx-grid-chameleon-state";
export { GridChameleonColumnFilterChanged } from "./components/gx-grid/gx-grid-column-filter/gx-grid-chameleon-column-filter";
export namespace Components {
    interface ChAccordion {
        /**
          * The description of the entity.
         */
        "accessibleDescription": string;
        /**
          * The name of the entity.
         */
        "accessibleName": string;
        /**
          * `true` if the accordion is expanded.
         */
        "expanded": boolean;
    }
    interface ChActionGroup {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName": string;
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior": ItemsOverflowBehavior;
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "moreActionsAccessibleName": string;
        /**
          * @todo Check a better convention for this property, for example, "ActionsInlineAlignment" This attribute determines the position of the More Actions button in the Action Group.  | Value   | Details                                                               | | --------| --------------------------------------------------------------------- | | `Start` | The More Actions Button is displayed to the left of the ActionGroup.  | | `End`   | The More Actions Button is displayed to the right of the ActionGroup. |
         */
        "moreActionsButtonPosition": "Start" | "End";
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition": DropdownPosition;
        /**
          * Determine if the dropdowns should be opened when the action is focused.
         */
        "openOnFocus": boolean;
    }
    interface ChActionGroupItem {
        /**
          * `true` if the control is floating. Useful to implement the `"ResponsiveCollapse"` value for the `itemsOverflowBehavior` property of the ch-action-group control.
         */
        "floating": boolean;
    }
    interface ChActionGroupRender {
        /**
          * Specifies the parts that are exported by the internal action-group. This property is useful to override the exported parts.
         */
        "actionGroupExportParts": string;
        /**
          * A CSS class to set as the `ch-action-group` element class.
         */
        "cssClass": string;
        /**
          * Specifies the parts that are exported by the internal dropdown. This property is useful to override the exported parts.
         */
        "dropdownExportParts": string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor": (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings": any;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback": (
    event: UIEvent,
    target: string,
    itemId: string
  ) => void;
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior": ItemsOverflowBehavior;
        /**
          * This property lets you define the model of the ch-action-group control.
         */
        "model": ActionGroupItemModel[];
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "moreActionsAccessibleName": string;
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition": DropdownPosition;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. TODO: Add implementation
         */
        "openOnFocus": boolean;
        /**
          * A CSS class to set as the `ch-dropdown-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "separatorCssClass": string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender": boolean;
    }
    interface ChAlert {
        /**
          * Determine the accessible name of the close button. Important for accessibility.
         */
        "closeButtonAccessibleName": string;
        /**
          * Countdown which initial state is dismissTimeout ms.
         */
        "countdown": number;
        /**
          * Specifies the time (ms) for the alert to be displayed. if `dismissTimeout = 0`, the alert will be always visible (unless is dismissed by the closeButton).
         */
        "dismissTimeout": 0;
        /**
          * Determine src of the left image.
         */
        "leftImgSrc": "";
        /**
          * Toggles the Pause on Hover functionality
         */
        "pauseOnHover": boolean;
        /**
          * Determine if the element is displayed or not.
         */
        "presented": boolean;
        /**
          * Determine if the closeButton is displayed or not.
         */
        "showCloseButton": boolean;
        /**
          * If dismissTimeout > 0, a progress bar is displayed at the bottom of the element showing the time left for the alert to show. The progress stops when the element is hovered.
         */
        "showTimeoutBar": boolean;
        /**
          * Sets the desired interval
         */
        "timerInterval": 50;
    }
    /**
     * This component allows you to scan a wide variety of types of barcode and QR
     * codes.
     */
    interface ChBarcodeScanner {
        /**
          * The height (in pixels) of the QR box displayed at the center of the video.
         */
        "barcodeBoxHeight": number;
        /**
          * The width (in pixels) of the QR box displayed at the center of the video.
         */
        "barcodeBoxWidth": number;
        /**
          * Specifies the ID of the selected camera. Only works if `cameraPreference === "SelectedById"`.
         */
        "cameraId"?: string;
        /**
          * Specifies the camera preference for scanning.
         */
        "cameraPreference": "Default" | "FrontCamera" | "BackCamera";
        /**
          * Specifies how much time (in ms) should pass before to emit the read event with the same last decoded text. If the last decoded text is different from the new decoded text, this property is ignored.
         */
        "readDebounce": number;
        /**
          * Scan a file a return a promise with the decoded text.
         */
        "scan": (imageFile: File) => Promise<string>;
        /**
          * `true` if the control is scanning.
         */
        "scanning": boolean;
    }
    interface ChCheckbox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName": string;
        /**
          * Specifies the label of the checkbox.
         */
        "caption": string;
        /**
          * The value when the checkbox is 'on'
         */
        "checkedValue": string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * True to highlight control when an action is fired.
         */
        "highlightable": boolean;
        /**
          * `true` if the control's value is indeterminate.
         */
        "indeterminate": boolean;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly": boolean;
        /**
          * The value when the checkbox is 'off'
         */
        "unCheckedValue": string;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface ChCodeEditor {
        /**
          * Allow the user to resize the diff editor split view. This property only works if `mode` === `"diff-editor"`.
         */
        "enableSplitViewResizing": boolean;
        /**
          * Specifies the language of the auto created model in the editor.
         */
        "language": string;
        /**
          * Specifies the rendered mode of the editor, allowing to set a normal editor or a diff editor.
         */
        "mode": "editor" | "diff-editor";
        /**
          * Specifies the modified value of the diff editor. This property only works if `mode` === `"diff-editor"`.
         */
        "modifiedValue": string;
        /**
          * Specifies if the modified value of the diff editor should be readonly. This property only works if `mode` === `"diff-editor"`.
         */
        "modifiedValueReadonly": boolean;
        /**
          * Specifies if the editor should be readonly. When `mode` === `"diff-editor"` this property will apply to the left pane.  - If `mode` === `"editor"` defaults to `false`.  - If `mode` === `"diff-editor"` defaults to `true`.
         */
        "readonly"?: boolean;
        /**
          * Render the differences in two side-by-side editors. Only works if `mode` === `"diff-editor"`.
         */
        "renderSideBySide": boolean;
        /**
          * Specifies the theme to be used for rendering.
         */
        "theme": string;
        /**
          * Specifies the value of the editor. If `mode` === `"diff-editor"`, this property will be used as the original model.
         */
        "value": string;
        /**
          * Specifies the schema URI for the YAML language.
         */
        "yamlSchemaUri": string;
    }
    interface ChComboBox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * This property lets you determine the expression that will be applied to the filter. Only works if `filterType = "caption" | "value"`.
         */
        "filter": string;
        /**
          * This property lets you determine the debounce time (in ms) that the control waits until it processes the changes to the filter property. Consecutive changes to the `filter` property between this range, reset the timeout to process the filter. Only works if `filterType = "caption" | "value"`.
         */
        "filterDebounce": number;
        /**
          * This property lets you determine the list of items that will be filtered. Only works if `filterType = "list"`.
         */
        "filterList": string[];
        /**
          * This property lets you determine the options that will be applied to the filter.
         */
        "filterOptions": ComboBoxFilterOptions;
        /**
          * This attribute lets you define what kind of filter is applied to items. Only items that satisfy the filter predicate will be displayed.  | Value     | Details                                                                                        | | --------- | ---------------------------------------------------------------------------------------------- | | `caption` | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  | | `list`    | Show only the items that are contained in the array determinate by the `filterList` property.  | | `value`   | Show only the items whose `value` satisfies the regex determinate by the `filter` property. | | `none`    | Show all items.                                                                                |
         */
        "filterType": ComboBoxFilterType;
        /**
          * Specifies the items of the control
         */
        "items": ComboBoxItemModel[];
        /**
          * This attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When multiple is specified, the control will show a scrolling list box instead of a single line dropdown.
         */
        "multiple": boolean;
        /**
          * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
         */
        "placeholder": string;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly": boolean;
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable": boolean;
        /**
          * Specifies the value (selected item) of the control.
         */
        "value"?: string;
    }
    /**
     * The `ch-dialog` component represents a modal or non-modal dialog box or other
     * interactive component.
     */
    interface ChDialog {
        /**
          * `true` if the dialog should be repositioned after resize.
         */
        "adjustPositionAfterResize": boolean;
        /**
          * "box" will allow the dialog to be draggable from both the header and the content. "header" will allow the dialog to be draggable only from the header. "no" disables dragging completely.
         */
        "allowDrag": "box" | "header" | "no";
        /**
          * Refers to the dialog title. I will ve visible if 'showHeader´is true.
         */
        "caption": string;
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element. This label is used for the close button of the header.
         */
        "closeButtonAccessibleName"?: string;
        /**
          * Specifies whether the dialog is hidden or visible.
         */
        "hidden": boolean;
        /**
          * Specifies whether the dialog is a modal or not. Modal dialog boxes interrupt interaction with the rest of the page being inert, while non-modal dialog boxes allow interaction with the rest of the page.  Note: If `hidden !== false`, this property does not reflect changes on runtime, since at the time of writing browsers do not support switching from modal to not-modal, (or vice-versa).
         */
        "modal": boolean;
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable": boolean;
        /**
          * Specifies whether the dialog footer is hidden or visible.
         */
        "showFooter": boolean;
        /**
          * Specifies whether the dialog header is hidden or visible.
         */
        "showHeader": boolean;
    }
    interface ChDropdown {
        /**
          * Specifies if the current parent of the item is the action-group control.
         */
        "actionGroupParent": boolean;
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonAccessibleName": string;
        /**
          * Specifies the caption that the control will display.
         */
        "caption": string;
        /**
          * Collapse the content of the dropdown.
         */
        "collapseDropdown": () => Promise<void>;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc": string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType": ImageRender;
        /**
          * Expand the content of the dropdown.
         */
        "expandDropdown": () => Promise<void>;
        /**
          * `true` to display the dropdown section.
         */
        "expanded": boolean;
        /**
          * Focus the dropdown action.
         */
        "focusElement": () => Promise<void>;
        /**
          * Specifies the hyperlink of the item. If this property is defined, the control will render an anchor tag with this `href`. Otherwise, it will render a button tag.
         */
        "href": string;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback": (event: UIEvent) => void;
        /**
          * Specifies whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf": boolean;
        /**
          * Level in the render at which the item is placed.
         */
        "level": number;
        /**
          * This attribute lets you specify if the control is nested in another dropdown. Useful to manage keyboard interaction.
         */
        "nestedDropdown": boolean;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. TODO: Add implementation
         */
        "openOnFocus": boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position": DropdownPosition;
        /**
          * Specifies the shortcut caption that the control will display.
         */
        "shortcut": string;
        /**
          * `true` to make available a slot to show a footer element.
         */
        "showFooter": boolean;
        /**
          * `true` to make available a slot to show a header element.
         */
        "showHeader": boolean;
        /**
          * Specifies the src for the left img.
         */
        "startImgSrc": string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType": ImageRender;
    }
    interface ChDropdownRender {
        /**
          * This attribute lets you specify the label for the first expandable button. Important for accessibility.
         */
        "buttonAccessibleName": string;
        /**
          * A CSS class to set as the `ch-dropdown` element class.
         */
        "cssClass": string;
        /**
          * Specifies the parts that are exported by the internal dropdown. This property is useful to override the exported parts.
         */
        "exportParts": string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor": (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings": any;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback": (
    event: UIEvent,
    target: string,
    itemId: string
  ) => void;
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "model": DropdownItemModel[];
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position": DropdownPosition;
        /**
          * A CSS class to set as the `ch-dropdown-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "separatorCssClass": string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender": boolean;
    }
    interface ChFlexibleLayout {
        "addSiblingView": (parentGroup: string, siblingItem: string, placedInTheSibling: "before" | "after", viewInfo: FlexibleLayoutLeaf, takeHalfTheSpaceOfTheSiblingItem: boolean) => Promise<boolean>;
        /**
          * Specifies the information of each view displayed.
         */
        "itemsInfo": Map<
    string,
    FlexibleLayoutItemExtended<FlexibleLayoutItem, FlexibleLayoutLeafType>
  >;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout": FlexibleLayout;
        /**
          * Specifies additional parts to export.
         */
        "layoutSplitterParts": string;
        /**
          * Schedules a new render for a leaf even if no state changed.
         */
        "refreshLeaf": (leafId: string) => Promise<void>;
        /**
          * Given the view ID and the item id, remove the page of the item from the view.
         */
        "removeItemPageInView": (viewId: string, itemId: string, forceRerender?: boolean) => Promise<void>;
        /**
          * Removes the view that is identified by the given ID. The layout is rearranged depending on the state of the removed view.
         */
        "removeView": (itemId: string) => Promise<FlexibleLayoutViewRemoveResult>;
    }
    interface ChFlexibleLayoutRender {
        /**
          * Add a view with widgets to render. The view will take the half space of the sibling view that its added with.
         */
        "addSiblingView": (parentGroup: string, siblingItem: string, placedInTheSibling: "before" | "after", viewInfo: FlexibleLayoutLeaf, takeHalfTheSpaceOfTheSiblingItem: boolean) => Promise<boolean>;
        /**
          * Add a widget in a `"tabbed"` type leaf. Only works if the parent leaf is `"tabbed"` type. If a widget with the same ID already exists, this method has not effect.  To add a widget in a `"single-content"` type leaf, use the `addSiblingView` method.
         */
        "addWidget": (leafId: string, widget: FlexibleLayoutWidget, selectWidget?: boolean) => Promise<void>;
        /**
          * A CSS class to set as the `ch-flexible-layout` element class.
         */
        "cssClass": string;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout": FlexibleLayout;
        /**
          * Removes a view and optionally all its rendered widget from the render. The reserved space will be given to the closest view.
         */
        "removeView": (leafId: string, removeRenderedWidgets: boolean) => Promise<FlexibleLayoutViewRemoveResult>;
        /**
          * Remove a widget from a `"tabbed"` type leaf. Only works if the parent leaf is `"tabbed"` type.  To remove a widget from a `"single-content"` type leaf, use the `removeView` method.
         */
        "removeWidget": (widgetId: string) => Promise<void>;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "renders": FlexibleLayoutRenders;
    }
    interface ChFormCheckbox {
        /**
          * The checkbox id
         */
        "checkboxId": string;
        /**
          * The presence of this attribute makes the checkbox checked by default
         */
        "checked": boolean;
        /**
          * The presence of this attribute disables the checkbox
         */
        "disabled": boolean;
        /**
          * The presence of this attribute makes the checkbox indeterminate
         */
        "indeterminate": boolean;
        /**
          * The checkbox label
         */
        "label": string;
        /**
          * The checkbox name
         */
        "name": string;
        /**
          * The checkbox value
         */
        "value": string;
    }
    /**
     * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.
     */
    interface ChGrid {
        /**
          * A boolean indicating whether the user can drag column headers to reorder columns.
         */
        "allowColumnReorder": boolean;
        /**
          * Ensures that the cell is visible within the control, scrolling the contents of the control if necessary.
          * @param cellId - The cellId of the cell to ensure visibility.
         */
        "cellEnsureVisible": (cellId: string) => Promise<void>;
        /**
          * Collapses a row, hiding its children.
          * @param rowId - The rowId of the row to collapse.
         */
        "collapseRow": (rowId: string) => Promise<void>;
        /**
          * One of "single" or "splitter", indicating the behavior of column resizing. "single", resize a single column at a time. "splitter", when adjusts the width of one column, the neighboring columns    are also resized proportionally, maintaining the overall width.
         */
        "columnResizeMode": "single" | "splitter";
        /**
          * Expands a row, showing its children.
          * @param rowId - The rowId of the row to expand.
         */
        "expandRow": (rowId: string) => Promise<void>;
        /**
          * Retrieves information about the currently focused cell.
         */
        "getFocusedCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the rowId of the currently focused row.
         */
        "getFocusedRow": () => Promise<string>;
        /**
          * Retrieves the rowId of the currently hovered row.
         */
        "getHoveredRow": () => Promise<string>;
        /**
          * Retrieves the list of rowId of the marked rows.
         */
        "getMarkedRows": () => Promise<string[]>;
        /**
          * Retrieves information about the next cell relative to the currently selected cell.
         */
        "getNextCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the rowId of the next row relative to the currently selected cell.
         */
        "getNextRow": () => Promise<string | void>;
        /**
          * Retrieves information about the previous cell relative to the currently selected cell.
         */
        "getPreviousCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the rowId of the previous row relative to the currently selected cell.
         */
        "getPreviousRow": () => Promise<string | void>;
        /**
          * Retrieves information about the currently selected cell.
         */
        "getSelectedCell": () => Promise<{ cellId: string; rowId: string; columnId: string; }>;
        /**
          * Retrieves the list of rowId of the selected rows.
         */
        "getSelectedRows": () => Promise<string[]>;
        /**
          * Specifies the keyboard navigation mode for the component. - "none": Disables keyboard navigation for the grid rows. - "select": Allows keyboard navigation by changing the selection of grid rows. - "focus": Allows keyboard navigation by focusing on grid rows, but does not change the selection.
         */
        "keyboardNavigationMode": "none" | "select" | "focus";
        /**
          * An object that contains localized strings for the grid.
         */
        "localization": GridLocalization;
        /**
          * Mark or unmark all rows.
          * @param marked - A boolean indicating whether to mark or unmark all rows.
         */
        "markAllRows": (marked?: boolean) => Promise<void>;
        /**
          * Mark or unmark a row.
          * @param rowId - The rowId of the row to select or deselect.
          * @param marked - A boolean indicating whether to mark or unmark the row.
         */
        "markRow": (rowId: string, marked?: boolean) => Promise<void>;
        /**
          * Ensures that the row is visible within the control, scrolling the contents of the control if necessary.
          * @param rowId - The rowId of the row to ensure visibility.
         */
        "rowEnsureVisible": (rowId: string) => Promise<void>;
        /**
          * A CSS class name applied to a row when it is focused.
         */
        "rowFocusedClass": string;
        /**
          * One of "false", "true" or "auto", indicating whether or not rows can be highlighted. "auto", row highlighting will be enabled if the row selection mode is set to "single" or "multiple".
         */
        "rowHighlightEnabled": boolean | "auto";
        /**
          * A CSS class name applied to a row when it is hovered.
         */
        "rowHighlightedClass": string;
        /**
          * A CSS class name applied to a row when it is marked.
         */
        "rowMarkedClass": string;
        /**
          * A CSS class name applied to a row when it is selected.
         */
        "rowSelectedClass": string;
        /**
          * One of "none", "single" or "multiple", indicating how rows can be selected. It can be set to "none" if no rows should be selectable, "single" if only one row can be selected at a time, or "multiple" if multiple rows can be selected at once.
         */
        "rowSelectionMode": "none" | "single" | "multiple";
        /**
          * Selects or deselects all rows.
          * @param selected - A boolean indicating whether to select or deselect all rows.
         */
        "selectAllRows": (selected?: boolean) => Promise<void>;
        /**
          * Select or deselect a cell. The cell can be identified by the cellId parameter or by using the rowId and columnId pair.
          * @param cellId - The cellId of the cell to select or deselect.
          * @param rowId - The rowId of the row containing the cell.
          * @param columnId - The columnId of the column containing the cell.
          * @param selected - A boolean indicating whether to select or deselect the cell.
         */
        "selectCell": (cellId?: string, rowId?: string, columnId?: string, selected?: boolean) => Promise<void>;
        /**
          * Selects or deselects a row.
          * @param rowId - The rowId of the row to select or deselect.
          * @param selected - A boolean indicating whether to select or deselect the row.
         */
        "selectRow": (rowId: string, selected?: boolean) => Promise<void>;
        /**
          * Synchronizes the state of a row in the grid.
         */
        "syncRowState": (el: HTMLElement) => Promise<void>;
    }
    /**
     * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.
     */
    interface ChGridActionRefresh {
        /**
          * Indicates whether the refresh button is disabled or not.
         */
        "disabled": boolean;
    }
    /**
     * The `ch-grid-action-settings` component represents a settings button for a grid action bar.
     */
    interface ChGridActionSettings {
        /**
          * Indicates whether the settings button is disabled or not.
         */
        "disabled": boolean;
    }
    /**
     * The `ch-grid-actionbar` component represents a container for a grid actions.
     */
    interface ChGridActionbar {
    }
    /**
     * The `ch-grid-column` component represents a grid column.
     */
    interface ChGridColumn {
        /**
          * @deprecated Use "columnImage" or "columnImageSet" instead. A URL to an icon to display in the column header.
         */
        "columnIconUrl": string;
        /**
          * A unique identifier for the column.
         */
        "columnId": string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImage": string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImageSet": string;
        /**
          * The text to display in the column header and settings.
         */
        "columnName": string;
        /**
          * Indicates whether the text in the column header is visible or not
         */
        "columnNameHidden": boolean;
        /**
          * @deprecated Use "columnTooltip" and "columnNameHidden" instead. One of "text" or "title", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.
         */
        "columnNamePosition": "text" | "title";
        /**
          * The text to display when the cursor is placed over the column header.
         */
        "columnTooltip": string;
        /**
          * One of "plain", "rich", or "tree", indicating the type of cell displayed in the column.
         */
        "columnType": "plain" | "rich" | "tree";
        /**
          * A CSS class name to apply to the display observer element used to detect changes in the column visibility.
         */
        "displayObserverClass": string;
        /**
          * One of "left" or "right", indicating whether the column should be "frozen" (i.e. remain visible when the user scrolls horizontally).
         */
        "freeze"?: ChGridColumnFreeze;
        /**
          * A boolean indicating whether the column should be hidden. The user can display it from the grid settings.
         */
        "hidden": boolean;
        /**
          * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).
         */
        "hideable": boolean;
        /**
          * A number indicating the order in which the column should appear.
         */
        "order": number;
        /**
          * A number indicating the physical order of the column (i.e. its position in the DOM).
         */
        "physicalOrder": number;
        /**
          * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).
         */
        "resizable": boolean;
        /**
          * A boolean indicating whether the column is currently being resized.
         */
        "resizing": boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType="rich").
         */
        "richRowActions": boolean;
        /**
          * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType="rich").
         */
        "richRowDrag": boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType="rich").
         */
        "richRowSelector": boolean;
        /**
          * One of "select" or "mark", indicating the mode of rich row selector. "select" indicates that the row selector is bound to the row selection. "mark" allows to mark a row independently of the selection.
         */
        "richRowSelectorMode": "select" | "mark";
        /**
          * Indicate the state of the rich row selector. "" indicates that all rows are unchecked. "checked" indicates that all rows are checked. "indeterminate" indicates that some rows are marked.
         */
        "richRowSelectorState": | ""
    | "checked"
    | "indeterminate";
        /**
          * A boolean indicating whether the user should be able to open a settings panel for the column.
         */
        "settingable": boolean;
        /**
          * A boolean indicating whether the settings panel for the column should be visible.
         */
        "showSettings": boolean;
        /**
          * A string indicating the width of the column. Any value supported by the "grid-template-columns" CSS property is valid.
         */
        "size": string;
        /**
          * One of "asc" or "desc", indicating the current sort direction.
         */
        "sortDirection"?: ChGridColumnSortDirection;
        /**
          * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).
         */
        "sortable": boolean;
    }
    /**
     * The `ch-grid-column-display` component is responsible for determining the
     * visibility of a grid column and updating its hidden property based on
     * whether the monitored class is visible or not.
     */
    interface ChGridColumnDisplay {
        /**
          * The column element that is being monitored.
         */
        "column": HTMLChGridColumnElement;
    }
    /**
     * The `ch-grid-column-resize` component responsible for resizing a column in a grid.
     */
    interface ChGridColumnResize {
        /**
          * The column element that is being resized.
         */
        "column": HTMLChGridColumnElement;
    }
    /**
     * The `ch-grid-column-settings` component represents a settings window for a column.
     */
    interface ChGridColumnSettings {
        /**
          * The `HTMLChGridColumnElement` that the settings window is associated with.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show": boolean;
    }
    /**
     * The `ch-grid-columnset` component represents a group of columns.
     */
    interface ChGridColumnset {
    }
    /**
     * The 'ch-grid-infinite-scroll' provides infinite scroll functionality for a 'ch-grid' component
     */
    interface ChGridInfiniteScroll {
        /**
          * Indicates that the grid is already loaded.
         */
        "complete": () => Promise<void>;
        /**
          * Indicates whether the grid is loading or already loaded.
         */
        "status": ChGridInfiniteScrollState;
    }
    /**
     * The `ch-grid-row-actions` component represents a group row actions.
     */
    interface ChGridRowActions {
        /**
          * Closes the row actions window.
         */
        "close": () => Promise<void>;
        /**
          * Opens the row actions on the row-actions-button cell.
         */
        "openRowActions": (cell: HTMLElement) => Promise<void>;
        /**
          * Opens the row actions on the row-actions-button cell.
         */
        "openRowContext": (clientX: number, clientY: number) => Promise<void>;
        /**
          * Opens the row actions on row hover.
         */
        "openRowHover": (row: HTMLElement) => Promise<void>;
        /**
          * Indicates that the row actions are displayed when the row-actions-button is pressed.
         */
        "showOnRowActions": boolean;
        /**
          * Indicates that the row actions are displayed when right-clicks on the row.
         */
        "showOnRowContext": boolean;
        /**
          * Indicates to show row actions when hovering over row.
         */
        "showOnRowHover": boolean;
    }
    /**
     * The `ch-grid-rowset-empty` component represents a container to "empty message" when ch-grid-rowset is empty.
     */
    interface ChGridRowsetEmpty {
    }
    /**
     * The `ch-grid-rowset-legend` component represents a caption for the `ch-grid-rowset` element.
     */
    interface ChGridRowsetLegend {
    }
    /**
     * The `ch-grid-settings` component represents a settings window for a grid component.
     */
    interface ChGridSettings {
        /**
          * The `HTMLChGridElement` that the settings window is associated with.
         */
        "grid": HTMLChGridElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show": boolean;
    }
    /**
     * The `ch-grid-settings-columns` component represents the settings for a grid's columns.
     */
    interface ChGridSettingsColumns {
        /**
          * An array of column elements to render.
         */
        "columns": HTMLChGridColumnElement[];
    }
    /**
     * The `ch-grid-virtual-scroller` component that displays a subset of items.
     * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen
     * based on the viewport size and scroll position.
     */
    interface ChGridVirtualScroller {
        /**
          * The list of items to be rendered in the grid.
         */
        "items": any[];
        /**
          * The number of elements in the items list. Use if the list changes, without recreating the array.
         */
        "itemsCount": number;
        /**
          * The list of items to display within the current viewport.
         */
        "viewPortItems": any[];
    }
    interface ChIcon {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": boolean;
        /**
          * The color of the icon.
         */
        "color": Color;
        /**
          * If enabled, the icon will be loaded lazily when it's visible in the viewport.
         */
        "lazy": boolean;
        /**
          * The size of the icon. Possible values: regular, small.
         */
        "size": Size;
        /**
          * The URL of the icon.
         */
        "src": string;
    }
    interface ChIntersectionObserver {
        /**
          * Bottom margin around the root element
         */
        "bottomMargin": string;
        /**
          * Left margin around the root element
         */
        "leftMargin": string;
        /**
          * Right margin around the root element
         */
        "rightMargin": string;
        /**
          * Set the ID of the component that is used as the viewport, default is the browser.
         */
        "root": string;
        /**
          * Numeric values representing percentages of the target element which are visible.
         */
        "threshold": string;
        /**
          * Top margin around the root element
         */
        "topMargin": string;
    }
    interface ChLayoutSplitter {
        "addSiblingLeaf": (parentGroup: string, siblingItem: string, placedInTheSibling: "before" | "after", leafInfo: LayoutSplitterDistributionLeaf, takeHalfTheSpaceOfTheSiblingItem: boolean) => Promise<LayoutSplitterItemAddResult>;
        /**
          * This attribute lets you specify the label for the drag bar. Important for accessibility.
         */
        "barAccessibleName": string;
        /**
          * This attribute lets you specify if the resize operation is disabled in all drag bars. If `true`, the drag bars are disabled.
         */
        "dragBarDisabled": boolean;
        /**
          * Specifies the resizing increment (in pixel) that is applied when using the keyboard to resize a drag bar.
         */
        "incrementWithKeyboard": number;
        /**
          * Specifies the list of component that are displayed. Each component will be separated via a drag bar.
         */
        "layout": LayoutSplitterDistribution;
        /**
          * Schedules a new render of the control even if no state changed.
         */
        "refreshLayout": () => Promise<void>;
        /**
          * Removes the item that is identified by the given ID. The layout is rearranged depending on the state of the removed item.
         */
        "removeItem": (itemId: string) => Promise<LayoutSplitterItemRemoveResult>;
    }
    interface ChList {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName": string;
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element. This label is used for the close button of the captions.
         */
        "closeButtonAccessibleName": string;
        /**
          * `true` to hide the close button in the items.
         */
        "closeButtonHidden": boolean;
        /**
          * Specifies the flexible layout type.
         */
        "direction": ListDirection;
        /**
          * When the control is sortable, the items can be dragged outside of the tab-list. This property lets you specify if this behavior is disabled.
         */
        "dragOutsideDisabled": boolean;
        /**
          * Ends the preview of the dragged item. Useful for ending the preview via keyboard interaction.
         */
        "endDragPreview": () => Promise<void>;
        /**
          * `true` if the group has is view section expanded. Otherwise, only the toolbar will be displayed.
         */
        "expanded": boolean;
        /**
          * Returns the info associated to the draggable view.
         */
        "getDraggableViews": () => Promise<DraggableViewInfo>;
        /**
          * Specifies the items of the tab control.
         */
        "items": FlexibleLayoutWidget[];
        /**
          * Promotes the drag preview to the top layer. Useful to avoid z-index issues.
         */
        "promoteDragPreviewToTopLayer": () => Promise<void>;
        /**
          * Given an id, remove the page from the render
         */
        "removePage": (pageId: string, forceRerender?: boolean) => Promise<void>;
        /**
          * Specifies the selected item of the widgets array.
         */
        "selectedId": string;
        /**
          * `true` to show the captions of the items.
         */
        "showCaptions": boolean;
        /**
          * `true` to enable sorting the tab buttons by dragging them in the tab-list. If sortable !== true, the tab buttons can not be dragged out either.
         */
        "sortable": boolean;
    }
    /**
     * A control to render markdown syntax. It supports GitHub Flavored Markdown
     * (GFM) and code highlighting.
     *  - It parses the incoming markdown to [mdast](https://github.com/syntax-tree/mdast) using [micromark](https://github.com/micromark/micromark) via [mdast-util-from-markdown](https://github.com/syntax-tree/mdast-util-from-markdown).
     * - After that, it implements a reactivity layer by implementing its own render for the mdast. With this, changes to the input markdown only update the portion of the DOM that changes.
     * - It supports Github Flavored Markdown (GFM) by using [mdast-util-gfm](https://github.com/syntax-tree/mdast-util-gfm) and [micromark-extension-gfm](https://github.com/micromark/micromark-extension-gfm).
     * - It supports code highlight by parsing the incomming code of the markdown to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.
     * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).
     * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.
     */
    interface ChMarkdown {
        /**
          * `true` to render potentially dangerous user content when rendering HTML with the option `rawHtml === true`
         */
        "allowDangerousHtml": boolean;
        /**
          * `true` to render raw HTML with sanitization.
         */
        "rawHtml": boolean;
        /**
          * This property allows us to implement custom rendering for the code blocks.
         */
        "renderCode": MarkdownCodeRender;
        /**
          * Specifies the markdown string to parse.
         */
        "value": string;
    }
    interface ChNextDataModeling {
    }
    interface ChNextDataModelingItem {
        /**
          * This attribute lets you specify if the actions in the `mode === "add"` are visible.
         */
        "actionsVisible": boolean;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions": DataModelItemLabels;
        /**
          * Check errors in the item when `level !== 0`
         */
        "checkErrors": (errors: "yes" | "no" | "unknown", event: CustomEvent | UIEvent) => Promise<void>;
        /**
          * Remove the value of the input when mode === "add" | "edit"
         */
        "clearInput": () => Promise<void>;
        /**
          * The dataType of the field.
         */
        "dataType": string;
        /**
          * Deletes the field.
         */
        "delete": (event: UIEvent) => Promise<void>;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled": boolean;
        /**
          * This property maps entities of the current dataModel with their corresponding ATTs.
         */
        "entityNameToATTs": EntityNameToATTs;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts": { [key in ErrorText]: string };
        /**
          * This property specifies the defined field names of the entity parent.
         */
        "fieldNames": string[];
        /**
          * Hides the waiting mode to continue editing the field.
         */
        "hideWaitingMode": () => Promise<void>;
        /**
          * This property specifies at which collection level the field is located.
         */
        "level": 0 | 1 | 2;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts": number;
        /**
          * This attribute specifies the operating mode of the control
         */
        "mode": Mode;
        /**
          * The name of the field.
         */
        "name": string;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly": boolean;
        /**
          * Set the adding mode for the first field of the entity.
         */
        "setAddingMode": () => Promise<void>;
        /**
          * `true` to show the new field button when `mode === "add"`
         */
        "showNewFieldBtn": boolean;
        /**
          * The type of the field.
         */
        "type": EntityItemType;
    }
    interface ChNextDataModelingRender {
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class when adding mode is enabled.
         */
        "addingModeCommonClass": string;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions": DataModelItemLabels1;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class.
         */
        "commonClass": string;
        /**
          * This callback is used to created a new SDT GxCollectionField based on the EntityItem type.
         */
        "createGxCollectionCallback": () => EntityItem[];
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class.
         */
        "cssClass": string;
        /**
          * This property represents the UI model that is currently rendered.
         */
        "dataModel": DataModel;
        /**
          * This property represents a copy of the UI model that is currently rendered. Useful for making changes that may or may not be accepted by the server.
         */
        "dataModelToEdit": DataModel;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled": boolean;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0"` and `mode === "add"`.
         */
        "entityAddingModeClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0"` and `mode !== "add"`.
         */
        "entityClass": string;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts": { [key in ErrorText1]: string };
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0" | "1"` and `mode === "add"`.
         */
        "fieldAddingModeClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "1"` and `mode !== "add"`.
         */
        "fieldClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with (`level === "0"` and `mode !== "add"`) or `level === "1" | "2"`.
         */
        "fieldCommonClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class with `level === "1"`.
         */
        "fieldContainerClass": string;
        /**
          * This property is a WA due to Angular's bug not letting execute UC 2.0 methods on different layouts.
         */
        "hideLoading": any;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts": number;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly": boolean;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level = "2"` and `mode === "add"`.
         */
        "subFieldAddingModeClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level = "2"` and `mode !== "add"`.
         */
        "subFieldClass": string;
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class with `level === "2"`.
         */
        "subFieldContainerClass": string;
    }
    interface ChNextProgressBar {
        /**
          * It specifies the main text that is shown on the progress.
         */
        "caption": string;
        /**
          * A CSS class to set as the `ch-next-progress-bar` element class.
         */
        "cssClass": string;
        /**
          * This attribute lets you specify the value of the progress.
         */
        "currentStep": number;
        /**
          * It specifies more information that is shown on the progress.
         */
        "description": string;
        /**
          * This attribute lets you specify if the progress bar is rendered.
         */
        "presented": boolean;
        /**
          * This attribute lets you specify the amount of steps for the progress.
         */
        "steps": number;
    }
    interface ChNotifications {
        "delayToAnimateNewNotifications": number;
        "notifications": NotificationMessageWithDelay[];
        "position": "bottom-start" | "bottom-end";
        "timeToDismissNotifications": number;
        "timeType": "Seconds" | "Milliseconds";
    }
    interface ChNotificationsItem {
        "buttonImgSrc": string;
        "closeButtonLabel": string;
        "leftImgSrc": string;
        /**
          * `true` to show the close notification button
         */
        "showCloseButton": boolean;
        "timeToDismiss": 5000;
    }
    /**
     * The 'ch-paginator' component represents a paginator control for navigating through pages.
     */
    interface ChPaginator {
        /**
          * The active page number.
         */
        "activePage": number;
        /**
          * Indicates that the end has been reached. Use when total pages are not known (totalPages = -1).
         */
        "hasNextPage": boolean;
        /**
          * The total number of pages. Use -1 if not known and 'hasNextPage' property to indicate that the end has been reached.
         */
        "totalPages": 1;
    }
    /**
     * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.
     */
    interface ChPaginatorNavigate {
        /**
          * Flag indicating if the button is disabled.
         */
        "disabled": boolean;
        /**
          * The type of navigation button.
         */
        "type": ChPaginatorNavigateType;
    }
    /**
     * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.
     */
    interface ChPaginatorPages {
        /**
          * The maximum number of items to display in the pagination.
         */
        "maxSize": number;
        /**
          * The active page number.
         */
        "page": number;
        /**
          * Flag to render the first and last pages.
         */
        "renderFirstLastPages": boolean;
        /**
          * The text to display for the dots.
         */
        "textDots": string;
        /**
          * The total number of pages.
         */
        "totalPages": 1;
    }
    /**
     * The `ch-popover` component represents a popover container that is positioned
     * relative to an element, but placed on the top layer using `position: fixed`.
     */
    interface ChPopover {
        /**
          * `true` if the `actionElement` binds the ch-popover using an external ID. If so, the `popoverTargetElement` property won't be configured in the action element.
         */
        "actionById": boolean;
        /**
          * Specifies a reference of the action that controls the popover control.
         */
        "actionElement"?: PopoverActionElement;
        /**
          * Specifies the drag behavior of the popover. If `allowDrag === "header"`, a slot with the `"header"` name will be available to place the header content.
         */
        "allowDrag": "box" | "header" | "no";
        /**
          * Specifies the block alignment of the window.
         */
        "blockAlign": ChPopoverAlign;
        /**
          * Specifies how the popover adapts its block size.  - "content": The block size of the control will be determined by its    content block size.  - "action-element": The block size of the control will match the block    size of the `actionElement`.  - "action-element-as-minimum": The minimum block size of the control    will match the block size of the `actionElement`.  If the control is resized at runtime, only the "action-element-as-minimum" value will still work.
         */
        "blockSizeMatch": ChPopoverSizeMatch;
        /**
          * This property only applies for `"manual"` mode. In native popovers, when using `"manual"` mode the popover doesn't close when clicking outside the control. This property allows to close the popover when clicking outside in `"manual"` mode.
         */
        "closeOnClickOutside": boolean;
        /**
          * `true` if the control is not stacked with another top layer.
         */
        "firstLayer": boolean;
        /**
          * Specifies whether the popover is hidden or visible.
         */
        "hidden": boolean;
        /**
          * Specifies the inline alignment of the window.
         */
        "inlineAlign": ChPopoverAlign;
        /**
          * Specifies how the popover adapts its inline size.  - "content": The inline size of the control will be determined by its    content inline size.  - "action-element": The inline size of the control will match the inline    size of the `actionElement`.  - "action-element-as-minimum": The minimum inline size of the control    will match the inline size of the `actionElement`.  If the control is resized at runtime, only the "action-element-as-minimum" value will still work.
         */
        "inlineSizeMatch": ChPopoverSizeMatch;
        /**
          * Popovers that have the `"auto"` state can be "light dismissed" by selecting outside the popover area, and generally only allow one popover to be displayed on-screen at a time. By contrast, `"manual"` popovers must always be explicitly hidden, but allow for use cases such as nested popovers in menus.
         */
        "mode": "auto" | "manual";
        /**
          * Specifies an alternate position to try when the control overflows the window.
         */
        "positionTry": "flip-block" | "flip-inline" | "none";
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable": boolean;
    }
    interface ChQr {
        /**
          * The background color. By default is transparent.
         */
        "background": string | null;
        /**
          * Means "Error correction levels". The four values L, M, Q, and H will use %7, 15%, 25%, and 30% of the QR code for error correction respectively. So on one hand the code will get bigger but chances are also higher that it will be read without errors later on. This value is by default High (H)
         */
        "ecLevel": ecLevel;
        /**
          * What color you want your QR code to be. By default is black.
         */
        "fill": string;
        /**
          * Defines how round the blocks should be. Numbers from 0 (squares) to 0.5 (maximum round) are supported.
         */
        "radius": number;
        /**
          * The total size of the final QR code in pixels - it will be a square. This value is by default "128"
         */
        "size": number;
        /**
          * Any kind of text, also links, email addresses, any thing.
         */
        "text": string | undefined;
    }
    /**
     * The radio group control is used to render a short list of mutually exclusive options.
     * It contains radio items to allow users to select one option from the list of options.
     */
    interface ChRadioGroupRender {
        /**
          * This attribute lets you specify if the radio-group is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * This property lets you define the items of the ch-radio-group-render control.
         */
        "items"?: RadioItem[];
        /**
          * The value of the control.
         */
        "value": string;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     * This control represents and item of the ch-segmented-control-render
     */
    interface ChSegmentedControlItem {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * `true` if the control is the not the first or last item in the ch-segmented-control-render.
         */
        "between": boolean;
        /**
          * Specifies the caption that the control will display.
         */
        "caption"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc": string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType": Exclude<ImageRender, "img">;
        /**
          * `true` if the control is the first item in the ch-segmented-control-render.
         */
        "first": boolean;
        /**
          * `true` if the control is the last item in the ch-segmented-control-render.
         */
        "last": boolean;
        /**
          * Specifies if the control is selected.
         */
        "selected": boolean;
        /**
          * Specifies the src of the start image.
         */
        "startImgSrc": string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType": Exclude<ImageRender, "img">;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     */
    interface ChSegmentedControlRender {
        /**
          * Specifies the parts that are exported by the internal segmented-control-item. This property is useful to override the exported parts.
         */
        "exportParts": string;
        /**
          * A CSS class to set as the `ch-segmented-control-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "itemCssClass": string;
        /**
          * This property lets you define the items of the ch-segmented-control-render control.
         */
        "items"?: SegmentedControlItem[];
        /**
          * Specifies the ID of the selected item
         */
        "selectedId": string;
    }
    interface ChSelect {
        "arrowIconSrc": string;
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": false;
        "disabled": boolean;
        "height": string;
        "iconSrc": string;
        "name": string;
        "width": string;
    }
    interface ChSelectOption {
        /**
          * If enabled, the option icons will display its inherent/natural color
         */
        "autoColor": true;
        /**
          * Determines if the option is disabled
         */
        "disabled": boolean;
        "height": string;
        /**
          * Set the left side icon
         */
        "leftIconSrc": string;
        /**
          * Set the right side icon
         */
        "rightIconSrc": string;
        /**
          * Determines the selected option
         */
        "selected": boolean;
        /**
          * The select option's value
         */
        "value": string;
    }
    interface ChShortcuts {
        /**
          * Key to show shortcut tooltips.
         */
        "showKey": "F10";
        /**
          * The URL of the shortcut definitions.
         */
        "src": string;
        /**
          * Suspend shortcuts.
         */
        "suspend": boolean;
    }
    interface ChShowcase {
        /**
          * Specifies the name of the control.
         */
        "componentName": string;
        /**
          * Specifies the title for the current showcase.
         */
        "pageName": string;
        /**
          * Specifies the HTML directory where the showcase for the control is placed.
         */
        "pageSrc": string;
        /**
          * Specifies the theme used in the iframe of the control
         */
        "theme": "light" | "dark";
    }
    interface ChSidebar {
        "expandButtonAccessibleName": string;
        /**
          * Specifies whether the control is expanded or collapsed.
         */
        "expanded": boolean;
        /**
          * `true` to display a expandable button at the bottom of the control.
         */
        "showExpandButton": boolean;
    }
    interface ChSidebarMenu {
        /**
          * The active item
         */
        "activeItem": string;
        /**
          * The initial active item (optional)
         */
        "activeItemId": string;
        /**
          * Determines if the menu can be collapsed
         */
        "collapsible": boolean;
        /**
          * Allows to set the distance to the top of the page on the menu
         */
        "distanceToTop": number;
        /**
          * Determines if the menu is collapsed
         */
        "isCollapsed": boolean;
        /**
          * The menu title
         */
        "menuTitle": string;
        /**
          * The presence of this attribute allows the menu to have only one list opened at the same time
         */
        "singleListOpen": boolean;
    }
    interface ChSidebarMenuList {
    }
    interface ChSidebarMenuListItem {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor": boolean;
        /**
          * The first list item icon (optional)
         */
        "itemIconSrc": string;
        /**
          * If this attribute is present the item will be initially uncollapsed
         */
        "uncollapsed": boolean;
    }
    /**
     * The slider control is a input where the user selects a value from within a given range.
     */
    interface ChSlider {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
         */
        "disabled": false;
        /**
          * This attribute lets you specify maximum value of the slider.
         */
        "maxValue": number;
        /**
          * This attribute lets you specify minimum value of the slider.
         */
        "minValue": number;
        /**
          * This attribute lets you indicate whether the control should display a bubble with the current value upon interaction.
         */
        "showValue": false;
        /**
          * This attribute lets you specify the step of the slider.  This attribute is useful when the values of the slider can only take some discrete values. For example, if valid values are `[10, 20, 30]` set the `minValue` to `10`, the maxValue to `30`, and the step to `10`. If the step is `0`, the any intermediate value is valid.
         */
        "step": number;
        /**
          * The value of the control.
         */
        "value": number;
    }
    interface ChStepList {
    }
    interface ChStepListItem {
        /**
          * Set the left side icon
         */
        "iconSrc": string;
    }
    /**
     * It allows to include styles in the shadow-root of chameleon components,
     * for example, to style the scrollbars.
     * Use it in a similar way to the html STYLE tag or
     * referencing an external stylesheet in a similar way to the html LINK tag.
     */
    interface ChStyle {
        /**
          * Specifies the location of the stylesheet document
         */
        "href": string;
    }
    interface ChSuggest {
        /**
          * If true, it will position the cursor at the end when the input is focused.
         */
        "cursorEnd": false;
        /**
          * The debounce amount in milliseconds (This is the time the suggest waits after the user has finished typing, to show the suggestions).
         */
        "debounce": number;
        /**
          * The label
         */
        "label": string;
        /**
          * The label position
         */
        "labelPosition": LabelPosition;
        /**
          * @description It selects/highlights the input text.
         */
        "selectInputText": () => Promise<void>;
        /**
          * Wether or not the suggest has a header. The header will show the "suggestTitle" if provided, and a close button.
         */
        "showHeader": false;
        /**
          * Whether or not to display the label
         */
        "showLabel": boolean;
        /**
          * The suggest title (optional). This is not the same as the "label", rather, this is the title that will appear inside the dropdown. This title will only be visible if "showHeader" is set to true.
         */
        "suggestTitle": string;
        /**
          * This is the suggest value.
         */
        "value": string;
    }
    interface ChSuggestList {
        /**
          * The label
         */
        "label": string;
    }
    interface ChSuggestListItem {
        /**
          * The icon url
         */
        "iconSrc": string;
        /**
          * The item value
         */
        "value": any;
    }
    interface ChTestFlexibleLayout {
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout": FlexibleLayout;
    }
    interface ChTestSuggest {
        /**
          * Callback invoked when user writes on object selector input, return possible options to show in autocomplete list
         */
        "selectorSourceCallback"?: (
    prefix: string
  ) => Promise<SelectorCategoryData[]>;
    }
    interface ChTextblock {
        /**
          * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
         */
        "format": "Text" | "HTML";
        /**
          * True to cut text when it overflows, showing an ellipsis.
         */
        "lineClamp": boolean;
        /**
          * Determine the tooltip text that will be displayed when the pointer is over the control
         */
        "tooltip": string;
        /**
          * Determine the way that the tooltip text will be displayed
         */
        "tooltipShowMode": "always" | "line-clamp";
    }
    /**
     * It allows you to load a style sheet in a similar way to the
     * native LINK or STYLE tags, but assigning it a name so that
     * it can be reused in different contexts,
     * either in the Document or in a Shadow-Root.
     */
    interface ChTheme {
        /**
          * A string containing the baseURL used to resolve relative URLs in the stylesheet
         */
        "baseUrl": string;
        /**
          * Specifies the location of the stylesheet theme
         */
        "href": string;
        /**
          * Indicates whether the theme has successfully loaded
         */
        "loaded": boolean;
        /**
          * Specifies the name of the theme to instantiate
         */
        "name": string;
    }
    interface ChTimer {
        /**
          * Sets the accesible name of the timer.
         */
        "accessibleName": string;
        /**
          * Sets the animationTime to set the custom var for the css animation.
         */
        "animationTime": number;
        /**
          * Sets the presented property to handle the component presentation.
         */
        "presented": boolean;
        /**
          * Sets the progress propiety to determine the progress.
         */
        "progress": number;
    }
    interface ChTooltip {
        /**
          * Specifies the delay (in ms) for the tooltip to be displayed.
         */
        "delay": number;
        /**
          * Specifies the position of the tooltip relative to the container element.
         */
        "position": | "OutsideStart_OutsideStart"
    | "InsideStart_OutsideStart"
    | "Center_OutsideStart"
    | "InsideEnd_OutsideStart"
    | "OutsideEnd_OutsideStart"
    | "OutsideStart_InsideStart"
    | "OutsideEnd_InsideStart"
    | "OutsideStart_Center"
    | "OutsideEnd_Center"
    | "OutsideStart_InsideEnd"
    | "OutsideEnd_InsideEnd"
    | "OutsideStart_OutsideEnd"
    | "InsideStart_OutsideEnd"
    | "Center_OutsideEnd"
    | "InsideEnd_OutsideEnd"
    | "OutsideEnd_OutsideEnd";
        /**
          * Specifies the tooltip description.
         */
        "tooltipId": string;
    }
    interface ChTree {
        /**
          * Set this attribute if you want all this tree tree-items to have a checkbox
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want all this tree tree-items to have the checkbox checked
         */
        "checked": boolean;
        /**
          * @returns an array of the ch-tree-items that are checked. Each array item is an object with "id" and "innerText".
         */
        "getChecked": () => Promise<checkedChTreeItem[]>;
        /**
          * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
         */
        "toggleCheckboxes": boolean;
    }
    interface ChTreeItem {
        /**
          * Set this attribute if you want the ch-tree-item to display a checkbox
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want the ch-tree-item checkbox to be checked by default
         */
        "checked": boolean;
        "disabled": boolean;
        /**
          * Set this attribute if this tree-item has a resource to be downloaded;
         */
        "download": boolean;
        /**
          * Set this attribute when you have downloaded the resource
         */
        "downloaded": boolean;
        /**
          * Set this attribute when you are downloading a resource
         */
        "downloading": boolean;
        "firstTreeItem": boolean;
        "hasChildTree": boolean;
        "indeterminate": boolean;
        /**
          * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
         */
        "isLeaf": boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftIcon": string;
        /**
          * If this tree-item has a nested tree, set this attribute to make the tree open by default
         */
        "opened": boolean;
        /**
          * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightIcon": string;
        /**
          * The presence of this attribute sets the tree-item as selected
         */
        "selected": boolean;
        "updateTreeVerticalLineHeight": () => Promise<void>;
    }
    interface ChTreeView {
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection": boolean;
        /**
          * This property lets you specify the time (in ms) that the mouse must be over in a subtree to open it when dragging.
         */
        "openSubTreeCountdown": number;
        /**
          * Given an item id, it scrolls into the item's view.
         */
        "scrollIntoVisible": (treeItemId: string) => Promise<void>;
        /**
          * `true` to scroll in the tree when dragging an item near the edges of the tree.
         */
        "scrollToEdgeOnDrag": boolean;
        /**
          * Callback that is executed to get the current selected items.
         */
        "selectedItemsCallback": () => Map<
    string,
    TreeViewItemSelectedInfo
  >;
        /**
          * Update the information about the valid droppable zones.
          * @param requestTimestamp Time where the request to the server was made. Useful to avoid having old information.
          * @param newContainerId ID of the container where the drag is trying to be made.
          * @param draggedItems Information about the dragged items.
          * @param validDrop Current state of the droppable zone.
         */
        "updateValidDropZone": (requestTimestamp: number, newContainerId: string, draggedItems: GxDataTransferInfo[], dropType: TreeViewDropType, validDrop: boolean) => Promise<void>;
        /**
          * This property lets you specify if the tree is waiting to process the drop of items.
         */
        "waitDropProcessing": boolean;
    }
    interface ChTreeViewDrop {
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState": DragState;
        /**
          * Level in the tree at which the item is placed.
         */
        "level": number;
        /**
          * Specifies the id of the tree item that this element controls.
         */
        "treeItemId": string;
        /**
          * Specifies the type of drop that is performed over the control.
         */
        "type": Exclude<TreeViewDropType, "above">;
    }
    interface ChTreeViewItem {
        /**
          * This attributes specifies the caption of the control
         */
        "caption": string;
        /**
          * Set this attribute if you want display a checkbox in the control.
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want the checkbox to be checked by default. Only works if `checkbox = true`
         */
        "checked": boolean;
        /**
          * Set this attribute if you want to set a custom render for the control, by passing a slot.
         */
        "customRender": boolean;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled": boolean;
        /**
          * This attribute lets you specify when items are being lazy loaded in the control.
         */
        "downloading": boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in the control. If `true`, the control can't be dragged.
         */
        "dragDisabled": boolean;
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState": DragState1;
        /**
          * This attribute lets you specify if the drop operation is disabled in the control. If `true`, the control won't accept any drops.
         */
        "dropDisabled": boolean;
        /**
          * This attribute lets you specify if the edit operation is enabled in the control. If `true`, the control can edit its caption in place.
         */
        "editable": boolean;
        /**
          * Set this attribute when the item is in edit mode
         */
        "editing": boolean;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc": string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType": ImageRender;
        /**
          * `true` to expand the control on click interaction. If `false`, with mouse interaction the control will only be expanded on double click.
         */
        "expandOnClick": boolean;
        /**
          * Specifies what kind of expandable button is displayed. Only works if `leaf === false`.  - `"expandableButton"`: Expandable button that allows to expand/collapse     the items of the control.  - `"decorative"`: Only a decorative icon is rendered to display the state     of the item.
         */
        "expandableButton": "action" | "decorative" | "no";
        /**
          * If the item has a sub-tree, this attribute determines if the subtree is displayed.
         */
        "expanded": boolean;
        /**
          * Focus the last item in its subtree. If the control is not expanded, it focus the control.
         */
        "focusLastItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the next item in the tree. If the control is expanded, it focuses the first subitem in its tree.
         */
        "focusNextItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the next sibling item in the tree.
         */
        "focusNextSibling": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * Focus the previous item in the tree. If the previous item is expanded, it focuses the last subitem in its tree.
         */
        "focusPreviousItem": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * `true` if the checkbox's value is indeterminate.
         */
        "indeterminate": boolean;
        /**
          * This attribute specifies if the control is the last items in its subtree
         */
        "lastItem": boolean;
        /**
          * Determine if the items are lazy loaded when opening the first time the control.
         */
        "lazyLoad": boolean;
        /**
          * The presence of this attribute determine whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf": boolean;
        /**
          * Level in the tree at which the item is placed.
         */
        "level": number;
        /**
          * This attribute represents additional info for the control that is included when dragging the item.
         */
        "metadata": string;
        /**
          * Specifies a set of parts to use in every DOM element of the control.
         */
        "parts"?: string;
        /**
          * This attribute lets you specify if the item is selected
         */
        "selected": boolean;
        /**
          * Set focus in the control.
         */
        "setFocus": (ctrlKeyPressed: boolean) => Promise<void>;
        /**
          * `true` to show the downloading spinner when lazy loading the sub items of the control.
         */
        "showDownloadingSpinner": boolean;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines": TreeViewLines;
        /**
          * Specifies the src of the start image.
         */
        "startImgSrc": string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType": ImageRender;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked.
         */
        "toggleCheckboxes": boolean;
        /**
          * Update `checked` and `indeterminate` properties.
         */
        "updateChecked": (newChecked: boolean, newIndeterminate: boolean) => Promise<void>;
    }
    interface ChTreeViewRender {
        /**
          * Callback that is executed when an element tries to drop in another item of the tree. Returns whether the drop is valid.
         */
        "checkDroppableZoneCallback": (
    dropInformation: TreeViewDropCheckInfo
  ) => Promise<boolean>;
        /**
          * Set this attribute if you want display a checkbox in all items by default.
         */
        "checkbox": boolean;
        /**
          * Set this attribute if you want the checkbox to be checked in all items by default. Only works if `checkbox = true`
         */
        "checked": boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in all items by default. If `true`, the items can't be dragged.
         */
        "dragDisabled": boolean;
        /**
          * This attribute lets you specify if the drop operation is disabled in all items by default. If `true`, the items won't accept any drops.
         */
        "dropDisabled": boolean;
        /**
          * Given the drop accepting, the data transfer info and the external items, it process the drops of the items in the tree.
         */
        "dropItems": (acceptDrop: boolean, dataTransferInfo: TreeViewDataTransferInfo, items?: TreeViewItemModel[]) => Promise<void>;
        /**
          * Callback that is executed when a list of items request to be dropped into another item.
         */
        "dropItemsCallback": (
    dataTransferInfo: TreeViewDataTransferInfo
  ) => Promise<{ acceptDrop: boolean; items?: TreeViewItemModel[] }>;
        /**
          * This attribute lets you specify which kind of drop operation can be effected in the items.
         */
        "dropMode": "above" | "before-and-after" | "all";
        /**
          * This attribute lets you specify if the edit operation is enabled in all items by default. If `true`, the items can edit its caption in place.
         */
        "editableItems": boolean;
        /**
          * Specifies if a tree-view-item is expanded on click interaction. If `true` the tree-view-item is expanded on click interaction. If `false`, with mouse interaction the tree-view-item will only be expanded on double click.
         */
        "expandOnClick": boolean;
        /**
          * Specifies what kind of expandable button is displayed in the items by default.  - `"expandableButton"`: Expandable button that allows to expand/collapse     the items of the control.  - `"decorative"`: Only a decorative icon is rendered to display the state     of the item.
         */
        "expandableButton": "action" | "decorative" | "no";
        /**
          * This property lets you determine the expression that will be applied to the filter. Only works if `filterType = "caption" | "metadata"`.
         */
        "filter": string;
        /**
          * This property lets you determine the debounce time (in ms) that the control waits until it processes the changes to the filter property. Consecutive changes to the `filter` property between this range, reset the timeout to process the filter. Only works if `filterType = "caption" | "metadata"`.
         */
        "filterDebounce": number;
        /**
          * This property lets you determine the list of items that will be filtered. Only works if `filterType = "list"`.
         */
        "filterList": string[];
        /**
          * This property lets you determine the options that will be applied to the filter.
         */
        "filterOptions": TreeViewFilterOptions;
        /**
          * This attribute lets you define what kind of filter is applied to items. Only items that satisfy the filter predicate will be displayed.  | Value       | Details                                                                                        | | ----------- | ---------------------------------------------------------------------------------------------- | | `checked`   | Show only the items that have a checkbox and are checked.                                      | | `unchecked` | Show only the items that have a checkbox and are not checked.                                  | | `caption`   | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  | | `metadata`  | Show only the items whose `metadata` satisfies the regex determinate by the `filter` property. | | `list`      | Show only the items that are contained in the array determinate by the `filterList` property.  | | `none`      | Show all items.                                                                                |
         */
        "filterType": TreeViewFilterType;
        /**
          * This property specifies a callback that is executed when the path for an item image needs to be resolved. With this callback, there is no need to re-implement item rendering (`renderItem` property) just to change the path used for the images.
         */
        "getImagePathCallback": TreeViewImagePathCallback;
        /**
          * Given a list of ids, it returns an array of the items that exists in the given list.
         */
        "getItemsInfo": (itemsId: string[]) => Promise<TreeViewItemModelExtended[]>;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor": (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings": any;
        /**
          * Callback that is executed when a item request to load its subitems.
         */
        "lazyLoadTreeItemsCallback": LazyLoadTreeItemsCallback;
        /**
          * Given an item id, an array of items to add, the download status and the lazy state, updates the item's UI Model.
         */
        "loadLazyContent": (itemId: string, items?: TreeViewItemModel[], downloading?: boolean, lazy?: boolean) => Promise<void>;
        /**
          * Callback that is executed when a item request to modify its caption.
         */
        "modifyItemCaptionCallback": (
    treeItemId: string,
    newCaption: string
  ) => Promise<TreeViewOperationStatusModifyCaption>;
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection": boolean;
        /**
          * Given an item id and the additional properties to update before and after reload, it reloads the items of the `itemId` node by using the `lazyLoadTreeItemsCallback` property.
         */
        "reloadItems": (itemId: string, beforeProperties?: Partial<TreeViewItemModel>, afterProperties?: Partial<TreeViewItemModel>) => Promise<boolean>;
        /**
          * Given a list of ids, removes the items and their children in the tree.
         */
        "removeItems": (items: string[]) => Promise<void>;
        /**
          * This property allows us to implement custom rendering of tree items.
         */
        "renderItem": (
    itemModel: TreeViewItemModel | any,
    treeState: ChTreeViewRender,
    treeHasFilter: boolean,
    lastItem: boolean,
    level: number,
    dropBeforeAndAfterEnabled: boolean,
    useGxRender?: boolean
  ) => any;
        /**
          * Given the path of the item (represent by a sorted array containing all ids from the root to the item) and the additional properties to update after, it displays and scrolls into the item view. The path can also be a string representing the id of the item to scroll into.  When using a path, this method will fail if:   - The path does not start from the root element.   - The path contains a cycle.   - The path does not correspond to a valid path on the server:     - One of the item of the path, except for the last one, is a leaf.     - An item in the path does not exists on the server.     - The path has repeated items.     - And so on.
         */
        "scrollIntoVisible": (path: string | string[], afterProperties?: Partial<TreeViewItemModel>) => Promise<boolean>;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines": TreeViewLines;
        /**
          * Callback that is executed when the treeModel is changed to order its items.
         */
        "sortItemsCallback": (subModel: TreeViewItemModel[]) => void;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked. This attribute will be used in all items by default.
         */
        "toggleCheckboxes": boolean;
        /**
          * This method is used to toggle a tree item by the tree item id/ids.
          * @param treeItemIds An array id the tree items to be toggled.
          * @param expand A boolean indicating that the tree item should be expanded or collapsed. (optional)
          * @returns The modified items after the method was called.
         */
        "toggleItems": (treeItemIds: string[], expand?: boolean) => Promise<TreeViewItemExpandedInfo[]>;
        /**
          * This property lets you define the model of the ch-tree-view-render control.
         */
        "treeModel": TreeViewItemModel[];
        /**
          * Given a subset of item's properties, it updates all item UI models.
         */
        "updateAllItemsProperties": (properties: { expanded?: boolean; checked?: boolean; }) => Promise<void>;
        /**
          * Given a item list and the properties to update, it updates the properties of the items in the list.
         */
        "updateItemsProperties": (items: string[], properties: Partial<TreeViewItemModel>) => Promise<void>;
        /**
          * Update the information about the valid droppable zones.
          * @param requestTimestamp Time where the request to the server was made. Useful to avoid having old information.
          * @param newContainerId ID of the container where the drag is trying to be made.
          * @param draggedItems Information about the dragged items.
          * @param validDrop Current state of the droppable zone.
          * @param dropType Type of drop that wants to be effected
         */
        "updateValidDropZone": (requestTimestamp: number, newContainerId: string, draggedItems: GxDataTransferInfo[], dropType: TreeViewDropType, validDrop: boolean) => Promise<void>;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender": boolean;
    }
    /**
     * The 'ch-window' component represents a popup container that is positioned
     * relative to an element or the screen.
     */
    interface ChWindow {
        /**
          * Specifies the drag behavior of the window.
         */
        "allowDrag": "no" | "header" | "box";
        /**
          * The caption or title of the window.
         */
        "caption": string;
        /**
          * Determines whether the window should close when the Escape key is pressed.
         */
        "closeOnEscape": boolean;
        /**
          * Determines whether the window should close when clicked outside.
         */
        "closeOnOutsideClick": boolean;
        /**
          * The text for the close button.
         */
        "closeText": string;
        /**
          * The tooltip text for the close button.
         */
        "closeTooltip": string;
        /**
          * The container element for the window.
         */
        "container"?: HTMLElement;
        /**
          * Determines if the window is hidden or visible.
         */
        "hidden": boolean;
        /**
          * Specifies whether the window should be displayed as a modal.
         */
        "modal": boolean;
        /**
          * This attribute lets you specify if a footer is rendered at the bottom of the window.
         */
        "showFooter": boolean;
        /**
          * This attribute lets you specify if a header is rendered on top of the window.
         */
        "showHeader": boolean;
        /**
          * This attribute lets you specify if a div wrapper is rendered for the default slot.
         */
        "showMain": boolean;
        /**
          * This attribute lets you specify if a div between the container and the window space.
         */
        "showSeparation": boolean;
        /**
          * The horizontal alignment of the window.
         */
        "xAlign": ChWindowAlign;
        /**
          * The vertical alignment of the window.
         */
        "yAlign": ChWindowAlign;
    }
    /**
     * The 'ch-window-close' component represents the close button for the 'ch-window' component.
     */
    interface ChWindowClose {
        /**
          * Specifies whether the close button is disabled.
         */
        "disabled": boolean;
    }
    interface GxGridChameleon {
        /**
          * The GxGrid instance representing the data to be displayed in the grid.
         */
        "grid": GxGrid;
        /**
          * The timestamp indicating the time when the grid was last updated.
         */
        "gridTimestamp": number;
        /**
          * The UI state of the Grid.
         */
        "state": GridChameleonState;
    }
    /**
     * Represents a component that provides filtering controls for a grid column.
     */
    interface GxGridChameleonColumnFilter {
        /**
          * The text to display on the "Apply" button.
         */
        "buttonApplyText": string;
        /**
          * The text to display on the "Reset" button.
         */
        "buttonResetText": string;
        /**
          * The grid column associated with this filter.
         */
        "column": GxGridColumn;
        /**
          * The value to filter for equality comparison.
         */
        "equal": string;
        /**
          * The value to filter for greater-than comparison.
         */
        "greater": string;
        /**
          * The value to filter for less-than comparison.
         */
        "less": string;
    }
}
export interface ChAccordionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChAccordionElement;
}
export interface ChActionGroupCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChActionGroupElement;
}
export interface ChAlertCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChAlertElement;
}
export interface ChBarcodeScannerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChBarcodeScannerElement;
}
export interface ChCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChCheckboxElement;
}
export interface ChComboBoxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChComboBoxElement;
}
export interface ChDialogCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChDialogElement;
}
export interface ChDropdownCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChDropdownElement;
}
export interface ChFlexibleLayoutCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChFlexibleLayoutElement;
}
export interface ChFormCheckboxCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChFormCheckboxElement;
}
export interface ChGridCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridElement;
}
export interface ChGridActionRefreshCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridActionRefreshElement;
}
export interface ChGridActionSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridActionSettingsElement;
}
export interface ChGridColumnCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridColumnElement;
}
export interface ChGridColumnResizeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridColumnResizeElement;
}
export interface ChGridInfiniteScrollCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridInfiniteScrollElement;
}
export interface ChGridRowActionsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridRowActionsElement;
}
export interface ChGridRowsetLegendCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridRowsetLegendElement;
}
export interface ChGridSettingsCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridSettingsElement;
}
export interface ChGridVirtualScrollerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChGridVirtualScrollerElement;
}
export interface ChIntersectionObserverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChIntersectionObserverElement;
}
export interface ChListCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChListElement;
}
export interface ChNextDataModelingItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChNextDataModelingItemElement;
}
export interface ChNextDataModelingRenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChNextDataModelingRenderElement;
}
export interface ChNotificationsItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChNotificationsItemElement;
}
export interface ChPaginatorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorElement;
}
export interface ChPaginatorNavigateCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorNavigateElement;
}
export interface ChPaginatorPagesCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPaginatorPagesElement;
}
export interface ChPopoverCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChPopoverElement;
}
export interface ChRadioGroupRenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChRadioGroupRenderElement;
}
export interface ChSegmentedControlItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSegmentedControlItemElement;
}
export interface ChSegmentedControlRenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSegmentedControlRenderElement;
}
export interface ChSelectCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSelectElement;
}
export interface ChSelectOptionCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSelectOptionElement;
}
export interface ChSidebarCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSidebarElement;
}
export interface ChSidebarMenuCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSidebarMenuElement;
}
export interface ChSidebarMenuListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSidebarMenuListItemElement;
}
export interface ChSliderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSliderElement;
}
export interface ChStepListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChStepListItemElement;
}
export interface ChSuggestCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSuggestElement;
}
export interface ChSuggestListItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChSuggestListItemElement;
}
export interface ChThemeCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChThemeElement;
}
export interface ChTreeItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeItemElement;
}
export interface ChTreeViewCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeViewElement;
}
export interface ChTreeViewItemCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeViewItemElement;
}
export interface ChTreeViewRenderCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChTreeViewRenderElement;
}
export interface ChWindowCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChWindowElement;
}
export interface ChWindowCloseCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLChWindowCloseElement;
}
export interface GxGridChameleonColumnFilterCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLGxGridChameleonColumnFilterElement;
}
declare global {
    interface HTMLChAccordionElementEventMap {
        "expandedChange": boolean;
    }
    interface HTMLChAccordionElement extends Components.ChAccordion, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChAccordionElementEventMap>(type: K, listener: (this: HTMLChAccordionElement, ev: ChAccordionCustomEvent<HTMLChAccordionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChAccordionElementEventMap>(type: K, listener: (this: HTMLChAccordionElement, ev: ChAccordionCustomEvent<HTMLChAccordionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChAccordionElement: {
        prototype: HTMLChAccordionElement;
        new (): HTMLChAccordionElement;
    };
    interface HTMLChActionGroupElementEventMap {
        "displayedItemsCountChange": number;
        "moreActionsButtonExpandedChange": boolean;
    }
    interface HTMLChActionGroupElement extends Components.ChActionGroup, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChActionGroupElementEventMap>(type: K, listener: (this: HTMLChActionGroupElement, ev: ChActionGroupCustomEvent<HTMLChActionGroupElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChActionGroupElementEventMap>(type: K, listener: (this: HTMLChActionGroupElement, ev: ChActionGroupCustomEvent<HTMLChActionGroupElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChActionGroupElement: {
        prototype: HTMLChActionGroupElement;
        new (): HTMLChActionGroupElement;
    };
    interface HTMLChActionGroupItemElement extends Components.ChActionGroupItem, HTMLStencilElement {
    }
    var HTMLChActionGroupItemElement: {
        prototype: HTMLChActionGroupItemElement;
        new (): HTMLChActionGroupItemElement;
    };
    interface HTMLChActionGroupRenderElement extends Components.ChActionGroupRender, HTMLStencilElement {
    }
    var HTMLChActionGroupRenderElement: {
        prototype: HTMLChActionGroupRenderElement;
        new (): HTMLChActionGroupRenderElement;
    };
    interface HTMLChAlertElementEventMap {
        "close": any;
    }
    interface HTMLChAlertElement extends Components.ChAlert, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChAlertElementEventMap>(type: K, listener: (this: HTMLChAlertElement, ev: ChAlertCustomEvent<HTMLChAlertElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChAlertElementEventMap>(type: K, listener: (this: HTMLChAlertElement, ev: ChAlertCustomEvent<HTMLChAlertElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChAlertElement: {
        prototype: HTMLChAlertElement;
        new (): HTMLChAlertElement;
    };
    interface HTMLChBarcodeScannerElementEventMap {
        "cameras": string[];
        "read": string;
    }
    /**
     * This component allows you to scan a wide variety of types of barcode and QR
     * codes.
     */
    interface HTMLChBarcodeScannerElement extends Components.ChBarcodeScanner, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChBarcodeScannerElementEventMap>(type: K, listener: (this: HTMLChBarcodeScannerElement, ev: ChBarcodeScannerCustomEvent<HTMLChBarcodeScannerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChBarcodeScannerElementEventMap>(type: K, listener: (this: HTMLChBarcodeScannerElement, ev: ChBarcodeScannerCustomEvent<HTMLChBarcodeScannerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChBarcodeScannerElement: {
        prototype: HTMLChBarcodeScannerElement;
        new (): HTMLChBarcodeScannerElement;
    };
    interface HTMLChCheckboxElementEventMap {
        "click": any;
        "input": any;
    }
    interface HTMLChCheckboxElement extends Components.ChCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChCheckboxElementEventMap>(type: K, listener: (this: HTMLChCheckboxElement, ev: ChCheckboxCustomEvent<HTMLChCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChCheckboxElementEventMap>(type: K, listener: (this: HTMLChCheckboxElement, ev: ChCheckboxCustomEvent<HTMLChCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChCheckboxElement: {
        prototype: HTMLChCheckboxElement;
        new (): HTMLChCheckboxElement;
    };
    interface HTMLChCodeEditorElement extends Components.ChCodeEditor, HTMLStencilElement {
    }
    var HTMLChCodeEditorElement: {
        prototype: HTMLChCodeEditorElement;
        new (): HTMLChCodeEditorElement;
    };
    interface HTMLChComboBoxElementEventMap {
        "input": string;
    }
    interface HTMLChComboBoxElement extends Components.ChComboBox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChComboBoxElementEventMap>(type: K, listener: (this: HTMLChComboBoxElement, ev: ChComboBoxCustomEvent<HTMLChComboBoxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChComboBoxElementEventMap>(type: K, listener: (this: HTMLChComboBoxElement, ev: ChComboBoxCustomEvent<HTMLChComboBoxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChComboBoxElement: {
        prototype: HTMLChComboBoxElement;
        new (): HTMLChComboBoxElement;
    };
    interface HTMLChDialogElementEventMap {
        "dialogClosed": any;
    }
    /**
     * The `ch-dialog` component represents a modal or non-modal dialog box or other
     * interactive component.
     */
    interface HTMLChDialogElement extends Components.ChDialog, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChDialogElementEventMap>(type: K, listener: (this: HTMLChDialogElement, ev: ChDialogCustomEvent<HTMLChDialogElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChDialogElementEventMap>(type: K, listener: (this: HTMLChDialogElement, ev: ChDialogCustomEvent<HTMLChDialogElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChDialogElement: {
        prototype: HTMLChDialogElement;
        new (): HTMLChDialogElement;
    };
    interface HTMLChDropdownElementEventMap {
        "expandedChange": boolean;
    }
    interface HTMLChDropdownElement extends Components.ChDropdown, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChDropdownElementEventMap>(type: K, listener: (this: HTMLChDropdownElement, ev: ChDropdownCustomEvent<HTMLChDropdownElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChDropdownElementEventMap>(type: K, listener: (this: HTMLChDropdownElement, ev: ChDropdownCustomEvent<HTMLChDropdownElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChDropdownElement: {
        prototype: HTMLChDropdownElement;
        new (): HTMLChDropdownElement;
    };
    interface HTMLChDropdownRenderElement extends Components.ChDropdownRender, HTMLStencilElement {
    }
    var HTMLChDropdownRenderElement: {
        prototype: HTMLChDropdownRenderElement;
        new (): HTMLChDropdownRenderElement;
    };
    interface HTMLChFlexibleLayoutElementEventMap {
        "viewItemClose": ViewItemCloseInfo;
        "selectedViewItemChange": ViewSelectedItemInfo;
        "viewItemReorder": WidgetReorderInfo;
    }
    interface HTMLChFlexibleLayoutElement extends Components.ChFlexibleLayout, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChFlexibleLayoutElementEventMap>(type: K, listener: (this: HTMLChFlexibleLayoutElement, ev: ChFlexibleLayoutCustomEvent<HTMLChFlexibleLayoutElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChFlexibleLayoutElementEventMap>(type: K, listener: (this: HTMLChFlexibleLayoutElement, ev: ChFlexibleLayoutCustomEvent<HTMLChFlexibleLayoutElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChFlexibleLayoutElement: {
        prototype: HTMLChFlexibleLayoutElement;
        new (): HTMLChFlexibleLayoutElement;
    };
    interface HTMLChFlexibleLayoutRenderElement extends Components.ChFlexibleLayoutRender, HTMLStencilElement {
    }
    var HTMLChFlexibleLayoutRenderElement: {
        prototype: HTMLChFlexibleLayoutRenderElement;
        new (): HTMLChFlexibleLayoutRenderElement;
    };
    interface HTMLChFormCheckboxElementEventMap {
        "change": any;
    }
    interface HTMLChFormCheckboxElement extends Components.ChFormCheckbox, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChFormCheckboxElementEventMap>(type: K, listener: (this: HTMLChFormCheckboxElement, ev: ChFormCheckboxCustomEvent<HTMLChFormCheckboxElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChFormCheckboxElementEventMap>(type: K, listener: (this: HTMLChFormCheckboxElement, ev: ChFormCheckboxCustomEvent<HTMLChFormCheckboxElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChFormCheckboxElement: {
        prototype: HTMLChFormCheckboxElement;
        new (): HTMLChFormCheckboxElement;
    };
    interface HTMLChGridElementEventMap {
        "selectionChanged": ChGridSelectionChangedEvent;
        "rowMarkingChanged": ChGridMarkingChangedEvent;
        "cellSelectionChanged": ChGridCellSelectionChangedEvent;
        "rowClicked": ChGridRowClickedEvent;
        "rowDoubleClicked": ChGridRowClickedEvent;
        "rowEnterPressed": ChGridRowPressedEvent;
        "rowContextMenu": ChGridRowContextMenuEvent;
    }
    /**
     * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.
     */
    interface HTMLChGridElement extends Components.ChGrid, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridElementEventMap>(type: K, listener: (this: HTMLChGridElement, ev: ChGridCustomEvent<HTMLChGridElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridElementEventMap>(type: K, listener: (this: HTMLChGridElement, ev: ChGridCustomEvent<HTMLChGridElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridElement: {
        prototype: HTMLChGridElement;
        new (): HTMLChGridElement;
    };
    interface HTMLChGridActionRefreshElementEventMap {
        "refreshClicked": any;
    }
    /**
     * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.
     */
    interface HTMLChGridActionRefreshElement extends Components.ChGridActionRefresh, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridActionRefreshElementEventMap>(type: K, listener: (this: HTMLChGridActionRefreshElement, ev: ChGridActionRefreshCustomEvent<HTMLChGridActionRefreshElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridActionRefreshElementEventMap>(type: K, listener: (this: HTMLChGridActionRefreshElement, ev: ChGridActionRefreshCustomEvent<HTMLChGridActionRefreshElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridActionRefreshElement: {
        prototype: HTMLChGridActionRefreshElement;
        new (): HTMLChGridActionRefreshElement;
    };
    interface HTMLChGridActionSettingsElementEventMap {
        "settingsShowClicked": any;
    }
    /**
     * The `ch-grid-action-settings` component represents a settings button for a grid action bar.
     */
    interface HTMLChGridActionSettingsElement extends Components.ChGridActionSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridActionSettingsElementEventMap>(type: K, listener: (this: HTMLChGridActionSettingsElement, ev: ChGridActionSettingsCustomEvent<HTMLChGridActionSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridActionSettingsElementEventMap>(type: K, listener: (this: HTMLChGridActionSettingsElement, ev: ChGridActionSettingsCustomEvent<HTMLChGridActionSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridActionSettingsElement: {
        prototype: HTMLChGridActionSettingsElement;
        new (): HTMLChGridActionSettingsElement;
    };
    /**
     * The `ch-grid-actionbar` component represents a container for a grid actions.
     */
    interface HTMLChGridActionbarElement extends Components.ChGridActionbar, HTMLStencilElement {
    }
    var HTMLChGridActionbarElement: {
        prototype: HTMLChGridActionbarElement;
        new (): HTMLChGridActionbarElement;
    };
    interface HTMLChGridColumnElementEventMap {
        "columnHiddenChanged": ChGridColumnHiddenChangedEvent;
        "columnSizeChanging": ChGridColumnSizeChangedEvent;
        "columnSizeChanged": ChGridColumnSizeChangedEvent;
        "columnOrderChanged": ChGridColumnOrderChangedEvent;
        "columnSortChanged": ChGridColumnSortChangedEvent;
        "columnFreezeChanged": ChGridColumnFreezeChangedEvent;
        "columnDragStarted": ChGridColumnDragEvent;
        "columnDragging": ChGridColumnDragEvent;
        "columnDragEnded": ChGridColumnDragEvent;
        "columnSelectorClicked": ChGridColumnSelectorClickedEvent;
    }
    /**
     * The `ch-grid-column` component represents a grid column.
     */
    interface HTMLChGridColumnElement extends Components.ChGridColumn, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridColumnElementEventMap>(type: K, listener: (this: HTMLChGridColumnElement, ev: ChGridColumnCustomEvent<HTMLChGridColumnElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridColumnElementEventMap>(type: K, listener: (this: HTMLChGridColumnElement, ev: ChGridColumnCustomEvent<HTMLChGridColumnElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridColumnElement: {
        prototype: HTMLChGridColumnElement;
        new (): HTMLChGridColumnElement;
    };
    /**
     * The `ch-grid-column-display` component is responsible for determining the
     * visibility of a grid column and updating its hidden property based on
     * whether the monitored class is visible or not.
     */
    interface HTMLChGridColumnDisplayElement extends Components.ChGridColumnDisplay, HTMLStencilElement {
    }
    var HTMLChGridColumnDisplayElement: {
        prototype: HTMLChGridColumnDisplayElement;
        new (): HTMLChGridColumnDisplayElement;
    };
    interface HTMLChGridColumnResizeElementEventMap {
        "columnResizeStarted": ChGridColumnResizeEvent;
        "columnResizing": ChGridColumnResizeEvent;
        "columnResizeFinished": ChGridColumnResizeEvent;
    }
    /**
     * The `ch-grid-column-resize` component responsible for resizing a column in a grid.
     */
    interface HTMLChGridColumnResizeElement extends Components.ChGridColumnResize, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridColumnResizeElementEventMap>(type: K, listener: (this: HTMLChGridColumnResizeElement, ev: ChGridColumnResizeCustomEvent<HTMLChGridColumnResizeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridColumnResizeElementEventMap>(type: K, listener: (this: HTMLChGridColumnResizeElement, ev: ChGridColumnResizeCustomEvent<HTMLChGridColumnResizeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridColumnResizeElement: {
        prototype: HTMLChGridColumnResizeElement;
        new (): HTMLChGridColumnResizeElement;
    };
    /**
     * The `ch-grid-column-settings` component represents a settings window for a column.
     */
    interface HTMLChGridColumnSettingsElement extends Components.ChGridColumnSettings, HTMLStencilElement {
    }
    var HTMLChGridColumnSettingsElement: {
        prototype: HTMLChGridColumnSettingsElement;
        new (): HTMLChGridColumnSettingsElement;
    };
    /**
     * The `ch-grid-columnset` component represents a group of columns.
     */
    interface HTMLChGridColumnsetElement extends Components.ChGridColumnset, HTMLStencilElement {
    }
    var HTMLChGridColumnsetElement: {
        prototype: HTMLChGridColumnsetElement;
        new (): HTMLChGridColumnsetElement;
    };
    interface HTMLChGridInfiniteScrollElementEventMap {
        "infinite": any;
    }
    /**
     * The 'ch-grid-infinite-scroll' provides infinite scroll functionality for a 'ch-grid' component
     */
    interface HTMLChGridInfiniteScrollElement extends Components.ChGridInfiniteScroll, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridInfiniteScrollElementEventMap>(type: K, listener: (this: HTMLChGridInfiniteScrollElement, ev: ChGridInfiniteScrollCustomEvent<HTMLChGridInfiniteScrollElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridInfiniteScrollElementEventMap>(type: K, listener: (this: HTMLChGridInfiniteScrollElement, ev: ChGridInfiniteScrollCustomEvent<HTMLChGridInfiniteScrollElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridInfiniteScrollElement: {
        prototype: HTMLChGridInfiniteScrollElement;
        new (): HTMLChGridInfiniteScrollElement;
    };
    interface HTMLChGridRowActionsElementEventMap {
        "rowActionOpened": any;
    }
    /**
     * The `ch-grid-row-actions` component represents a group row actions.
     */
    interface HTMLChGridRowActionsElement extends Components.ChGridRowActions, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridRowActionsElementEventMap>(type: K, listener: (this: HTMLChGridRowActionsElement, ev: ChGridRowActionsCustomEvent<HTMLChGridRowActionsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridRowActionsElementEventMap>(type: K, listener: (this: HTMLChGridRowActionsElement, ev: ChGridRowActionsCustomEvent<HTMLChGridRowActionsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridRowActionsElement: {
        prototype: HTMLChGridRowActionsElement;
        new (): HTMLChGridRowActionsElement;
    };
    /**
     * The `ch-grid-rowset-empty` component represents a container to "empty message" when ch-grid-rowset is empty.
     */
    interface HTMLChGridRowsetEmptyElement extends Components.ChGridRowsetEmpty, HTMLStencilElement {
    }
    var HTMLChGridRowsetEmptyElement: {
        prototype: HTMLChGridRowsetEmptyElement;
        new (): HTMLChGridRowsetEmptyElement;
    };
    interface HTMLChGridRowsetLegendElementEventMap {
        "rowsetLegendClicked": CustomEvent;
    }
    /**
     * The `ch-grid-rowset-legend` component represents a caption for the `ch-grid-rowset` element.
     */
    interface HTMLChGridRowsetLegendElement extends Components.ChGridRowsetLegend, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridRowsetLegendElementEventMap>(type: K, listener: (this: HTMLChGridRowsetLegendElement, ev: ChGridRowsetLegendCustomEvent<HTMLChGridRowsetLegendElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridRowsetLegendElementEventMap>(type: K, listener: (this: HTMLChGridRowsetLegendElement, ev: ChGridRowsetLegendCustomEvent<HTMLChGridRowsetLegendElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridRowsetLegendElement: {
        prototype: HTMLChGridRowsetLegendElement;
        new (): HTMLChGridRowsetLegendElement;
    };
    interface HTMLChGridSettingsElementEventMap {
        "settingsCloseClicked": any;
    }
    /**
     * The `ch-grid-settings` component represents a settings window for a grid component.
     */
    interface HTMLChGridSettingsElement extends Components.ChGridSettings, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridSettingsElementEventMap>(type: K, listener: (this: HTMLChGridSettingsElement, ev: ChGridSettingsCustomEvent<HTMLChGridSettingsElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridSettingsElementEventMap>(type: K, listener: (this: HTMLChGridSettingsElement, ev: ChGridSettingsCustomEvent<HTMLChGridSettingsElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridSettingsElement: {
        prototype: HTMLChGridSettingsElement;
        new (): HTMLChGridSettingsElement;
    };
    /**
     * The `ch-grid-settings-columns` component represents the settings for a grid's columns.
     */
    interface HTMLChGridSettingsColumnsElement extends Components.ChGridSettingsColumns, HTMLStencilElement {
    }
    var HTMLChGridSettingsColumnsElement: {
        prototype: HTMLChGridSettingsColumnsElement;
        new (): HTMLChGridSettingsColumnsElement;
    };
    interface HTMLChGridVirtualScrollerElementEventMap {
        "viewPortItemsChanged": any;
    }
    /**
     * The `ch-grid-virtual-scroller` component that displays a subset of items.
     * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen
     * based on the viewport size and scroll position.
     */
    interface HTMLChGridVirtualScrollerElement extends Components.ChGridVirtualScroller, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChGridVirtualScrollerElementEventMap>(type: K, listener: (this: HTMLChGridVirtualScrollerElement, ev: ChGridVirtualScrollerCustomEvent<HTMLChGridVirtualScrollerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChGridVirtualScrollerElementEventMap>(type: K, listener: (this: HTMLChGridVirtualScrollerElement, ev: ChGridVirtualScrollerCustomEvent<HTMLChGridVirtualScrollerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChGridVirtualScrollerElement: {
        prototype: HTMLChGridVirtualScrollerElement;
        new (): HTMLChGridVirtualScrollerElement;
    };
    interface HTMLChIconElement extends Components.ChIcon, HTMLStencilElement {
    }
    var HTMLChIconElement: {
        prototype: HTMLChIconElement;
        new (): HTMLChIconElement;
    };
    interface HTMLChIntersectionObserverElementEventMap {
        "intersectionUpdate": IntersectionObserverEntry;
    }
    interface HTMLChIntersectionObserverElement extends Components.ChIntersectionObserver, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChIntersectionObserverElementEventMap>(type: K, listener: (this: HTMLChIntersectionObserverElement, ev: ChIntersectionObserverCustomEvent<HTMLChIntersectionObserverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChIntersectionObserverElementEventMap>(type: K, listener: (this: HTMLChIntersectionObserverElement, ev: ChIntersectionObserverCustomEvent<HTMLChIntersectionObserverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChIntersectionObserverElement: {
        prototype: HTMLChIntersectionObserverElement;
        new (): HTMLChIntersectionObserverElement;
    };
    interface HTMLChLayoutSplitterElement extends Components.ChLayoutSplitter, HTMLStencilElement {
    }
    var HTMLChLayoutSplitterElement: {
        prototype: HTMLChLayoutSplitterElement;
        new (): HTMLChLayoutSplitterElement;
    };
    interface HTMLChListElementEventMap {
        "expandMainGroup": string;
        "itemClose": ListItemCloseInfo;
        "selectedItemChange": ListSelectedItemInfo;
        "itemDragStart": number;
    }
    interface HTMLChListElement extends Components.ChList, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChListElementEventMap>(type: K, listener: (this: HTMLChListElement, ev: ChListCustomEvent<HTMLChListElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChListElementEventMap>(type: K, listener: (this: HTMLChListElement, ev: ChListCustomEvent<HTMLChListElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChListElement: {
        prototype: HTMLChListElement;
        new (): HTMLChListElement;
    };
    /**
     * A control to render markdown syntax. It supports GitHub Flavored Markdown
     * (GFM) and code highlighting.
     *  - It parses the incoming markdown to [mdast](https://github.com/syntax-tree/mdast) using [micromark](https://github.com/micromark/micromark) via [mdast-util-from-markdown](https://github.com/syntax-tree/mdast-util-from-markdown).
     * - After that, it implements a reactivity layer by implementing its own render for the mdast. With this, changes to the input markdown only update the portion of the DOM that changes.
     * - It supports Github Flavored Markdown (GFM) by using [mdast-util-gfm](https://github.com/syntax-tree/mdast-util-gfm) and [micromark-extension-gfm](https://github.com/micromark/micromark-extension-gfm).
     * - It supports code highlight by parsing the incomming code of the markdown to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.
     * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).
     * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.
     */
    interface HTMLChMarkdownElement extends Components.ChMarkdown, HTMLStencilElement {
    }
    var HTMLChMarkdownElement: {
        prototype: HTMLChMarkdownElement;
        new (): HTMLChMarkdownElement;
    };
    interface HTMLChNextDataModelingElement extends Components.ChNextDataModeling, HTMLStencilElement {
    }
    var HTMLChNextDataModelingElement: {
        prototype: HTMLChNextDataModelingElement;
        new (): HTMLChNextDataModelingElement;
    };
    interface HTMLChNextDataModelingItemElementEventMap {
        "deleteField": any;
        "editField": ItemInfo;
        "newEntity": EntityInfo;
        "firstNewField": ItemInfo;
        "firstNewFieldErrors": any;
        "newField": ItemInfo;
    }
    interface HTMLChNextDataModelingItemElement extends Components.ChNextDataModelingItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChNextDataModelingItemElementEventMap>(type: K, listener: (this: HTMLChNextDataModelingItemElement, ev: ChNextDataModelingItemCustomEvent<HTMLChNextDataModelingItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChNextDataModelingItemElementEventMap>(type: K, listener: (this: HTMLChNextDataModelingItemElement, ev: ChNextDataModelingItemCustomEvent<HTMLChNextDataModelingItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChNextDataModelingItemElement: {
        prototype: HTMLChNextDataModelingItemElement;
        new (): HTMLChNextDataModelingItemElement;
    };
    interface HTMLChNextDataModelingRenderElementEventMap {
        "fieldAdded": any;
        "fieldRemoved": any;
    }
    interface HTMLChNextDataModelingRenderElement extends Components.ChNextDataModelingRender, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChNextDataModelingRenderElementEventMap>(type: K, listener: (this: HTMLChNextDataModelingRenderElement, ev: ChNextDataModelingRenderCustomEvent<HTMLChNextDataModelingRenderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChNextDataModelingRenderElementEventMap>(type: K, listener: (this: HTMLChNextDataModelingRenderElement, ev: ChNextDataModelingRenderCustomEvent<HTMLChNextDataModelingRenderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChNextDataModelingRenderElement: {
        prototype: HTMLChNextDataModelingRenderElement;
        new (): HTMLChNextDataModelingRenderElement;
    };
    interface HTMLChNextProgressBarElement extends Components.ChNextProgressBar, HTMLStencilElement {
    }
    var HTMLChNextProgressBarElement: {
        prototype: HTMLChNextProgressBarElement;
        new (): HTMLChNextProgressBarElement;
    };
    interface HTMLChNotificationsElement extends Components.ChNotifications, HTMLStencilElement {
    }
    var HTMLChNotificationsElement: {
        prototype: HTMLChNotificationsElement;
        new (): HTMLChNotificationsElement;
    };
    interface HTMLChNotificationsItemElementEventMap {
        "notificationClick": number;
        "notificationDismiss": number;
    }
    interface HTMLChNotificationsItemElement extends Components.ChNotificationsItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChNotificationsItemElementEventMap>(type: K, listener: (this: HTMLChNotificationsItemElement, ev: ChNotificationsItemCustomEvent<HTMLChNotificationsItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChNotificationsItemElementEventMap>(type: K, listener: (this: HTMLChNotificationsItemElement, ev: ChNotificationsItemCustomEvent<HTMLChNotificationsItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChNotificationsItemElement: {
        prototype: HTMLChNotificationsItemElement;
        new (): HTMLChNotificationsItemElement;
    };
    interface HTMLChPaginatorElementEventMap {
        "activePageChanged": ChPaginatorActivePageChangedEvent;
        "pageNavigationRequested": ChPaginatorPageNavigationRequestedEvent;
    }
    /**
     * The 'ch-paginator' component represents a paginator control for navigating through pages.
     */
    interface HTMLChPaginatorElement extends Components.ChPaginator, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChPaginatorElementEventMap>(type: K, listener: (this: HTMLChPaginatorElement, ev: ChPaginatorCustomEvent<HTMLChPaginatorElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChPaginatorElementEventMap>(type: K, listener: (this: HTMLChPaginatorElement, ev: ChPaginatorCustomEvent<HTMLChPaginatorElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChPaginatorElement: {
        prototype: HTMLChPaginatorElement;
        new (): HTMLChPaginatorElement;
    };
    interface HTMLChPaginatorNavigateElementEventMap {
        "navigateClicked": ChPaginatorNavigateClickedEvent;
    }
    /**
     * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.
     */
    interface HTMLChPaginatorNavigateElement extends Components.ChPaginatorNavigate, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChPaginatorNavigateElementEventMap>(type: K, listener: (this: HTMLChPaginatorNavigateElement, ev: ChPaginatorNavigateCustomEvent<HTMLChPaginatorNavigateElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChPaginatorNavigateElementEventMap>(type: K, listener: (this: HTMLChPaginatorNavigateElement, ev: ChPaginatorNavigateCustomEvent<HTMLChPaginatorNavigateElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChPaginatorNavigateElement: {
        prototype: HTMLChPaginatorNavigateElement;
        new (): HTMLChPaginatorNavigateElement;
    };
    interface HTMLChPaginatorPagesElementEventMap {
        "pageChanged": ChPaginatorPagesPageChangedEvent;
    }
    /**
     * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.
     */
    interface HTMLChPaginatorPagesElement extends Components.ChPaginatorPages, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChPaginatorPagesElementEventMap>(type: K, listener: (this: HTMLChPaginatorPagesElement, ev: ChPaginatorPagesCustomEvent<HTMLChPaginatorPagesElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChPaginatorPagesElementEventMap>(type: K, listener: (this: HTMLChPaginatorPagesElement, ev: ChPaginatorPagesCustomEvent<HTMLChPaginatorPagesElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChPaginatorPagesElement: {
        prototype: HTMLChPaginatorPagesElement;
        new (): HTMLChPaginatorPagesElement;
    };
    interface HTMLChPopoverElementEventMap {
        "popoverOpened": any;
        "popoverClosed": any;
    }
    /**
     * The `ch-popover` component represents a popover container that is positioned
     * relative to an element, but placed on the top layer using `position: fixed`.
     */
    interface HTMLChPopoverElement extends Components.ChPopover, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChPopoverElementEventMap>(type: K, listener: (this: HTMLChPopoverElement, ev: ChPopoverCustomEvent<HTMLChPopoverElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChPopoverElementEventMap>(type: K, listener: (this: HTMLChPopoverElement, ev: ChPopoverCustomEvent<HTMLChPopoverElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChPopoverElement: {
        prototype: HTMLChPopoverElement;
        new (): HTMLChPopoverElement;
    };
    interface HTMLChQrElement extends Components.ChQr, HTMLStencilElement {
    }
    var HTMLChQrElement: {
        prototype: HTMLChQrElement;
        new (): HTMLChQrElement;
    };
    interface HTMLChRadioGroupRenderElementEventMap {
        "change": string;
    }
    /**
     * The radio group control is used to render a short list of mutually exclusive options.
     * It contains radio items to allow users to select one option from the list of options.
     */
    interface HTMLChRadioGroupRenderElement extends Components.ChRadioGroupRender, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChRadioGroupRenderElementEventMap>(type: K, listener: (this: HTMLChRadioGroupRenderElement, ev: ChRadioGroupRenderCustomEvent<HTMLChRadioGroupRenderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChRadioGroupRenderElementEventMap>(type: K, listener: (this: HTMLChRadioGroupRenderElement, ev: ChRadioGroupRenderCustomEvent<HTMLChRadioGroupRenderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChRadioGroupRenderElement: {
        prototype: HTMLChRadioGroupRenderElement;
        new (): HTMLChRadioGroupRenderElement;
    };
    interface HTMLChSegmentedControlItemElementEventMap {
        "selectedChange": string;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     * This control represents and item of the ch-segmented-control-render
     */
    interface HTMLChSegmentedControlItemElement extends Components.ChSegmentedControlItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSegmentedControlItemElementEventMap>(type: K, listener: (this: HTMLChSegmentedControlItemElement, ev: ChSegmentedControlItemCustomEvent<HTMLChSegmentedControlItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSegmentedControlItemElementEventMap>(type: K, listener: (this: HTMLChSegmentedControlItemElement, ev: ChSegmentedControlItemCustomEvent<HTMLChSegmentedControlItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSegmentedControlItemElement: {
        prototype: HTMLChSegmentedControlItemElement;
        new (): HTMLChSegmentedControlItemElement;
    };
    interface HTMLChSegmentedControlRenderElementEventMap {
        "selectedItemChange": string;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     */
    interface HTMLChSegmentedControlRenderElement extends Components.ChSegmentedControlRender, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSegmentedControlRenderElementEventMap>(type: K, listener: (this: HTMLChSegmentedControlRenderElement, ev: ChSegmentedControlRenderCustomEvent<HTMLChSegmentedControlRenderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSegmentedControlRenderElementEventMap>(type: K, listener: (this: HTMLChSegmentedControlRenderElement, ev: ChSegmentedControlRenderCustomEvent<HTMLChSegmentedControlRenderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSegmentedControlRenderElement: {
        prototype: HTMLChSegmentedControlRenderElement;
        new (): HTMLChSegmentedControlRenderElement;
    };
    interface HTMLChSelectElementEventMap {
        "onToggle": any;
        "optionClickedEvent": any;
    }
    interface HTMLChSelectElement extends Components.ChSelect, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSelectElementEventMap>(type: K, listener: (this: HTMLChSelectElement, ev: ChSelectCustomEvent<HTMLChSelectElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSelectElementEventMap>(type: K, listener: (this: HTMLChSelectElement, ev: ChSelectCustomEvent<HTMLChSelectElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSelectElement: {
        prototype: HTMLChSelectElement;
        new (): HTMLChSelectElement;
    };
    interface HTMLChSelectOptionElementEventMap {
        "itemClicked": any;
    }
    interface HTMLChSelectOptionElement extends Components.ChSelectOption, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSelectOptionElementEventMap>(type: K, listener: (this: HTMLChSelectOptionElement, ev: ChSelectOptionCustomEvent<HTMLChSelectOptionElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSelectOptionElementEventMap>(type: K, listener: (this: HTMLChSelectOptionElement, ev: ChSelectOptionCustomEvent<HTMLChSelectOptionElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSelectOptionElement: {
        prototype: HTMLChSelectOptionElement;
        new (): HTMLChSelectOptionElement;
    };
    interface HTMLChShortcutsElement extends Components.ChShortcuts, HTMLStencilElement {
    }
    var HTMLChShortcutsElement: {
        prototype: HTMLChShortcutsElement;
        new (): HTMLChShortcutsElement;
    };
    interface HTMLChShowcaseElement extends Components.ChShowcase, HTMLStencilElement {
    }
    var HTMLChShowcaseElement: {
        prototype: HTMLChShowcaseElement;
        new (): HTMLChShowcaseElement;
    };
    interface HTMLChSidebarElementEventMap {
        "expandedChange": boolean;
    }
    interface HTMLChSidebarElement extends Components.ChSidebar, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSidebarElementEventMap>(type: K, listener: (this: HTMLChSidebarElement, ev: ChSidebarCustomEvent<HTMLChSidebarElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSidebarElementEventMap>(type: K, listener: (this: HTMLChSidebarElement, ev: ChSidebarCustomEvent<HTMLChSidebarElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSidebarElement: {
        prototype: HTMLChSidebarElement;
        new (): HTMLChSidebarElement;
    };
    interface HTMLChSidebarMenuElementEventMap {
        "itemClicked": any;
        "collapseBtnClicked": any;
    }
    interface HTMLChSidebarMenuElement extends Components.ChSidebarMenu, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSidebarMenuElementEventMap>(type: K, listener: (this: HTMLChSidebarMenuElement, ev: ChSidebarMenuCustomEvent<HTMLChSidebarMenuElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSidebarMenuElementEventMap>(type: K, listener: (this: HTMLChSidebarMenuElement, ev: ChSidebarMenuCustomEvent<HTMLChSidebarMenuElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSidebarMenuElement: {
        prototype: HTMLChSidebarMenuElement;
        new (): HTMLChSidebarMenuElement;
    };
    interface HTMLChSidebarMenuListElement extends Components.ChSidebarMenuList, HTMLStencilElement {
    }
    var HTMLChSidebarMenuListElement: {
        prototype: HTMLChSidebarMenuListElement;
        new (): HTMLChSidebarMenuListElement;
    };
    interface HTMLChSidebarMenuListItemElementEventMap {
        "itemClickedEvent": any;
    }
    interface HTMLChSidebarMenuListItemElement extends Components.ChSidebarMenuListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSidebarMenuListItemElementEventMap>(type: K, listener: (this: HTMLChSidebarMenuListItemElement, ev: ChSidebarMenuListItemCustomEvent<HTMLChSidebarMenuListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSidebarMenuListItemElementEventMap>(type: K, listener: (this: HTMLChSidebarMenuListItemElement, ev: ChSidebarMenuListItemCustomEvent<HTMLChSidebarMenuListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSidebarMenuListItemElement: {
        prototype: HTMLChSidebarMenuListItemElement;
        new (): HTMLChSidebarMenuListItemElement;
    };
    interface HTMLChSliderElementEventMap {
        "change": number;
        "input": number;
    }
    /**
     * The slider control is a input where the user selects a value from within a given range.
     */
    interface HTMLChSliderElement extends Components.ChSlider, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSliderElementEventMap>(type: K, listener: (this: HTMLChSliderElement, ev: ChSliderCustomEvent<HTMLChSliderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSliderElementEventMap>(type: K, listener: (this: HTMLChSliderElement, ev: ChSliderCustomEvent<HTMLChSliderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSliderElement: {
        prototype: HTMLChSliderElement;
        new (): HTMLChSliderElement;
    };
    interface HTMLChStepListElement extends Components.ChStepList, HTMLStencilElement {
    }
    var HTMLChStepListElement: {
        prototype: HTMLChStepListElement;
        new (): HTMLChStepListElement;
    };
    interface HTMLChStepListItemElementEventMap {
        "itemClicked": any;
    }
    interface HTMLChStepListItemElement extends Components.ChStepListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChStepListItemElementEventMap>(type: K, listener: (this: HTMLChStepListItemElement, ev: ChStepListItemCustomEvent<HTMLChStepListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChStepListItemElementEventMap>(type: K, listener: (this: HTMLChStepListItemElement, ev: ChStepListItemCustomEvent<HTMLChStepListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChStepListItemElement: {
        prototype: HTMLChStepListItemElement;
        new (): HTMLChStepListItemElement;
    };
    /**
     * It allows to include styles in the shadow-root of chameleon components,
     * for example, to style the scrollbars.
     * Use it in a similar way to the html STYLE tag or
     * referencing an external stylesheet in a similar way to the html LINK tag.
     */
    interface HTMLChStyleElement extends Components.ChStyle, HTMLStencilElement {
    }
    var HTMLChStyleElement: {
        prototype: HTMLChStyleElement;
        new (): HTMLChStyleElement;
    };
    interface HTMLChSuggestElementEventMap {
        "valueChanged": string;
        "selectionChanged": SuggestItemSelectedEvent;
    }
    interface HTMLChSuggestElement extends Components.ChSuggest, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSuggestElementEventMap>(type: K, listener: (this: HTMLChSuggestElement, ev: ChSuggestCustomEvent<HTMLChSuggestElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSuggestElementEventMap>(type: K, listener: (this: HTMLChSuggestElement, ev: ChSuggestCustomEvent<HTMLChSuggestElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSuggestElement: {
        prototype: HTMLChSuggestElement;
        new (): HTMLChSuggestElement;
    };
    interface HTMLChSuggestListElement extends Components.ChSuggestList, HTMLStencilElement {
    }
    var HTMLChSuggestListElement: {
        prototype: HTMLChSuggestListElement;
        new (): HTMLChSuggestListElement;
    };
    interface HTMLChSuggestListItemElementEventMap {
        "itemSelected": SuggestItemSelectedEvent1;
        "focusChangeAttempt": FocusChangeAttempt;
    }
    interface HTMLChSuggestListItemElement extends Components.ChSuggestListItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChSuggestListItemElementEventMap>(type: K, listener: (this: HTMLChSuggestListItemElement, ev: ChSuggestListItemCustomEvent<HTMLChSuggestListItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChSuggestListItemElementEventMap>(type: K, listener: (this: HTMLChSuggestListItemElement, ev: ChSuggestListItemCustomEvent<HTMLChSuggestListItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChSuggestListItemElement: {
        prototype: HTMLChSuggestListItemElement;
        new (): HTMLChSuggestListItemElement;
    };
    interface HTMLChTestFlexibleLayoutElement extends Components.ChTestFlexibleLayout, HTMLStencilElement {
    }
    var HTMLChTestFlexibleLayoutElement: {
        prototype: HTMLChTestFlexibleLayoutElement;
        new (): HTMLChTestFlexibleLayoutElement;
    };
    interface HTMLChTestSuggestElement extends Components.ChTestSuggest, HTMLStencilElement {
    }
    var HTMLChTestSuggestElement: {
        prototype: HTMLChTestSuggestElement;
        new (): HTMLChTestSuggestElement;
    };
    interface HTMLChTextblockElement extends Components.ChTextblock, HTMLStencilElement {
    }
    var HTMLChTextblockElement: {
        prototype: HTMLChTextblockElement;
        new (): HTMLChTextblockElement;
    };
    interface HTMLChThemeElementEventMap {
        "themeLoaded": ChThemeLoadedEvent;
    }
    /**
     * It allows you to load a style sheet in a similar way to the
     * native LINK or STYLE tags, but assigning it a name so that
     * it can be reused in different contexts,
     * either in the Document or in a Shadow-Root.
     */
    interface HTMLChThemeElement extends Components.ChTheme, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChThemeElementEventMap>(type: K, listener: (this: HTMLChThemeElement, ev: ChThemeCustomEvent<HTMLChThemeElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChThemeElementEventMap>(type: K, listener: (this: HTMLChThemeElement, ev: ChThemeCustomEvent<HTMLChThemeElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChThemeElement: {
        prototype: HTMLChThemeElement;
        new (): HTMLChThemeElement;
    };
    interface HTMLChTimerElement extends Components.ChTimer, HTMLStencilElement {
    }
    var HTMLChTimerElement: {
        prototype: HTMLChTimerElement;
        new (): HTMLChTimerElement;
    };
    interface HTMLChTooltipElement extends Components.ChTooltip, HTMLStencilElement {
    }
    var HTMLChTooltipElement: {
        prototype: HTMLChTooltipElement;
        new (): HTMLChTooltipElement;
    };
    interface HTMLChTreeElement extends Components.ChTree, HTMLStencilElement {
    }
    var HTMLChTreeElement: {
        prototype: HTMLChTreeElement;
        new (): HTMLChTreeElement;
    };
    interface HTMLChTreeItemElementEventMap {
        "liItemClicked": any;
        "toggleIconClicked": any;
        "checkboxClickedEvent": chTreeItemData;
    }
    interface HTMLChTreeItemElement extends Components.ChTreeItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChTreeItemElementEventMap>(type: K, listener: (this: HTMLChTreeItemElement, ev: ChTreeItemCustomEvent<HTMLChTreeItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChTreeItemElementEventMap>(type: K, listener: (this: HTMLChTreeItemElement, ev: ChTreeItemCustomEvent<HTMLChTreeItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChTreeItemElement: {
        prototype: HTMLChTreeItemElement;
        new (): HTMLChTreeItemElement;
    };
    interface HTMLChTreeViewElementEventMap {
        "droppableZoneEnter": TreeViewDropCheckInfo;
        "expandedItemChange": TreeViewItemExpandedInfo;
        "itemContextmenu": TreeViewItemContextMenu;
        "itemsDropped": TreeViewDataTransferInfo;
        "selectedItemsChange": Map<string, TreeViewItemSelectedInfo>;
    }
    interface HTMLChTreeViewElement extends Components.ChTreeView, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChTreeViewElementEventMap>(type: K, listener: (this: HTMLChTreeViewElement, ev: ChTreeViewCustomEvent<HTMLChTreeViewElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChTreeViewElementEventMap>(type: K, listener: (this: HTMLChTreeViewElement, ev: ChTreeViewCustomEvent<HTMLChTreeViewElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChTreeViewElement: {
        prototype: HTMLChTreeViewElement;
        new (): HTMLChTreeViewElement;
    };
    interface HTMLChTreeViewDropElement extends Components.ChTreeViewDrop, HTMLStencilElement {
    }
    var HTMLChTreeViewDropElement: {
        prototype: HTMLChTreeViewDropElement;
        new (): HTMLChTreeViewDropElement;
    };
    interface HTMLChTreeViewItemElementEventMap {
        "checkboxChange": TreeViewItemCheckedInfo;
        "checkboxToggleChange": TreeViewItemCheckedInfo;
        "itemDragStart": TreeViewItemDragStartInfo;
        "itemDragEnd": any;
        "loadLazyContent": string;
        "modifyCaption": TreeViewItemNewCaption;
        "openReference": TreeViewItemOpenReferenceInfo;
        "selectedItemChange": TreeViewItemSelected;
    }
    interface HTMLChTreeViewItemElement extends Components.ChTreeViewItem, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChTreeViewItemElementEventMap>(type: K, listener: (this: HTMLChTreeViewItemElement, ev: ChTreeViewItemCustomEvent<HTMLChTreeViewItemElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChTreeViewItemElementEventMap>(type: K, listener: (this: HTMLChTreeViewItemElement, ev: ChTreeViewItemCustomEvent<HTMLChTreeViewItemElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChTreeViewItemElement: {
        prototype: HTMLChTreeViewItemElement;
        new (): HTMLChTreeViewItemElement;
    };
    interface HTMLChTreeViewRenderElementEventMap {
        "checkedItemsChange": Map<string, TreeViewItemModelExtended>;
        "itemContextmenu": TreeViewItemContextMenu;
        "itemOpenReference": TreeViewItemOpenReferenceInfo;
        "selectedItemsChange": TreeViewItemModelExtended[];
    }
    interface HTMLChTreeViewRenderElement extends Components.ChTreeViewRender, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChTreeViewRenderElementEventMap>(type: K, listener: (this: HTMLChTreeViewRenderElement, ev: ChTreeViewRenderCustomEvent<HTMLChTreeViewRenderElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChTreeViewRenderElementEventMap>(type: K, listener: (this: HTMLChTreeViewRenderElement, ev: ChTreeViewRenderCustomEvent<HTMLChTreeViewRenderElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChTreeViewRenderElement: {
        prototype: HTMLChTreeViewRenderElement;
        new (): HTMLChTreeViewRenderElement;
    };
    interface HTMLChWindowElementEventMap {
        "windowOpened": any;
        "windowClosed": any;
    }
    /**
     * The 'ch-window' component represents a popup container that is positioned
     * relative to an element or the screen.
     */
    interface HTMLChWindowElement extends Components.ChWindow, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChWindowElementEventMap>(type: K, listener: (this: HTMLChWindowElement, ev: ChWindowCustomEvent<HTMLChWindowElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChWindowElementEventMap>(type: K, listener: (this: HTMLChWindowElement, ev: ChWindowCustomEvent<HTMLChWindowElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChWindowElement: {
        prototype: HTMLChWindowElement;
        new (): HTMLChWindowElement;
    };
    interface HTMLChWindowCloseElementEventMap {
        "windowCloseClicked": any;
    }
    /**
     * The 'ch-window-close' component represents the close button for the 'ch-window' component.
     */
    interface HTMLChWindowCloseElement extends Components.ChWindowClose, HTMLStencilElement {
        addEventListener<K extends keyof HTMLChWindowCloseElementEventMap>(type: K, listener: (this: HTMLChWindowCloseElement, ev: ChWindowCloseCustomEvent<HTMLChWindowCloseElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLChWindowCloseElementEventMap>(type: K, listener: (this: HTMLChWindowCloseElement, ev: ChWindowCloseCustomEvent<HTMLChWindowCloseElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLChWindowCloseElement: {
        prototype: HTMLChWindowCloseElement;
        new (): HTMLChWindowCloseElement;
    };
    interface HTMLGxGridChameleonElement extends Components.GxGridChameleon, HTMLStencilElement {
    }
    var HTMLGxGridChameleonElement: {
        prototype: HTMLGxGridChameleonElement;
        new (): HTMLGxGridChameleonElement;
    };
    interface HTMLGxGridChameleonColumnFilterElementEventMap {
        "columnSettingsChanged": GridChameleonColumnFilterChanged;
    }
    /**
     * Represents a component that provides filtering controls for a grid column.
     */
    interface HTMLGxGridChameleonColumnFilterElement extends Components.GxGridChameleonColumnFilter, HTMLStencilElement {
        addEventListener<K extends keyof HTMLGxGridChameleonColumnFilterElementEventMap>(type: K, listener: (this: HTMLGxGridChameleonColumnFilterElement, ev: GxGridChameleonColumnFilterCustomEvent<HTMLGxGridChameleonColumnFilterElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLGxGridChameleonColumnFilterElementEventMap>(type: K, listener: (this: HTMLGxGridChameleonColumnFilterElement, ev: GxGridChameleonColumnFilterCustomEvent<HTMLGxGridChameleonColumnFilterElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLGxGridChameleonColumnFilterElement: {
        prototype: HTMLGxGridChameleonColumnFilterElement;
        new (): HTMLGxGridChameleonColumnFilterElement;
    };
    interface HTMLElementTagNameMap {
        "ch-accordion": HTMLChAccordionElement;
        "ch-action-group": HTMLChActionGroupElement;
        "ch-action-group-item": HTMLChActionGroupItemElement;
        "ch-action-group-render": HTMLChActionGroupRenderElement;
        "ch-alert": HTMLChAlertElement;
        "ch-barcode-scanner": HTMLChBarcodeScannerElement;
        "ch-checkbox": HTMLChCheckboxElement;
        "ch-code-editor": HTMLChCodeEditorElement;
        "ch-combo-box": HTMLChComboBoxElement;
        "ch-dialog": HTMLChDialogElement;
        "ch-dropdown": HTMLChDropdownElement;
        "ch-dropdown-render": HTMLChDropdownRenderElement;
        "ch-flexible-layout": HTMLChFlexibleLayoutElement;
        "ch-flexible-layout-render": HTMLChFlexibleLayoutRenderElement;
        "ch-form-checkbox": HTMLChFormCheckboxElement;
        "ch-grid": HTMLChGridElement;
        "ch-grid-action-refresh": HTMLChGridActionRefreshElement;
        "ch-grid-action-settings": HTMLChGridActionSettingsElement;
        "ch-grid-actionbar": HTMLChGridActionbarElement;
        "ch-grid-column": HTMLChGridColumnElement;
        "ch-grid-column-display": HTMLChGridColumnDisplayElement;
        "ch-grid-column-resize": HTMLChGridColumnResizeElement;
        "ch-grid-column-settings": HTMLChGridColumnSettingsElement;
        "ch-grid-columnset": HTMLChGridColumnsetElement;
        "ch-grid-infinite-scroll": HTMLChGridInfiniteScrollElement;
        "ch-grid-row-actions": HTMLChGridRowActionsElement;
        "ch-grid-rowset-empty": HTMLChGridRowsetEmptyElement;
        "ch-grid-rowset-legend": HTMLChGridRowsetLegendElement;
        "ch-grid-settings": HTMLChGridSettingsElement;
        "ch-grid-settings-columns": HTMLChGridSettingsColumnsElement;
        "ch-grid-virtual-scroller": HTMLChGridVirtualScrollerElement;
        "ch-icon": HTMLChIconElement;
        "ch-intersection-observer": HTMLChIntersectionObserverElement;
        "ch-layout-splitter": HTMLChLayoutSplitterElement;
        "ch-list": HTMLChListElement;
        "ch-markdown": HTMLChMarkdownElement;
        "ch-next-data-modeling": HTMLChNextDataModelingElement;
        "ch-next-data-modeling-item": HTMLChNextDataModelingItemElement;
        "ch-next-data-modeling-render": HTMLChNextDataModelingRenderElement;
        "ch-next-progress-bar": HTMLChNextProgressBarElement;
        "ch-notifications": HTMLChNotificationsElement;
        "ch-notifications-item": HTMLChNotificationsItemElement;
        "ch-paginator": HTMLChPaginatorElement;
        "ch-paginator-navigate": HTMLChPaginatorNavigateElement;
        "ch-paginator-pages": HTMLChPaginatorPagesElement;
        "ch-popover": HTMLChPopoverElement;
        "ch-qr": HTMLChQrElement;
        "ch-radio-group-render": HTMLChRadioGroupRenderElement;
        "ch-segmented-control-item": HTMLChSegmentedControlItemElement;
        "ch-segmented-control-render": HTMLChSegmentedControlRenderElement;
        "ch-select": HTMLChSelectElement;
        "ch-select-option": HTMLChSelectOptionElement;
        "ch-shortcuts": HTMLChShortcutsElement;
        "ch-showcase": HTMLChShowcaseElement;
        "ch-sidebar": HTMLChSidebarElement;
        "ch-sidebar-menu": HTMLChSidebarMenuElement;
        "ch-sidebar-menu-list": HTMLChSidebarMenuListElement;
        "ch-sidebar-menu-list-item": HTMLChSidebarMenuListItemElement;
        "ch-slider": HTMLChSliderElement;
        "ch-step-list": HTMLChStepListElement;
        "ch-step-list-item": HTMLChStepListItemElement;
        "ch-style": HTMLChStyleElement;
        "ch-suggest": HTMLChSuggestElement;
        "ch-suggest-list": HTMLChSuggestListElement;
        "ch-suggest-list-item": HTMLChSuggestListItemElement;
        "ch-test-flexible-layout": HTMLChTestFlexibleLayoutElement;
        "ch-test-suggest": HTMLChTestSuggestElement;
        "ch-textblock": HTMLChTextblockElement;
        "ch-theme": HTMLChThemeElement;
        "ch-timer": HTMLChTimerElement;
        "ch-tooltip": HTMLChTooltipElement;
        "ch-tree": HTMLChTreeElement;
        "ch-tree-item": HTMLChTreeItemElement;
        "ch-tree-view": HTMLChTreeViewElement;
        "ch-tree-view-drop": HTMLChTreeViewDropElement;
        "ch-tree-view-item": HTMLChTreeViewItemElement;
        "ch-tree-view-render": HTMLChTreeViewRenderElement;
        "ch-window": HTMLChWindowElement;
        "ch-window-close": HTMLChWindowCloseElement;
        "gx-grid-chameleon": HTMLGxGridChameleonElement;
        "gx-grid-chameleon-column-filter": HTMLGxGridChameleonColumnFilterElement;
    }
}
declare namespace LocalJSX {
    interface ChAccordion {
        /**
          * The description of the entity.
         */
        "accessibleDescription"?: string;
        /**
          * The name of the entity.
         */
        "accessibleName"?: string;
        /**
          * `true` if the accordion is expanded.
         */
        "expanded"?: boolean;
        /**
          * Fired when the content is expanded or collapsed
         */
        "onExpandedChange"?: (event: ChAccordionCustomEvent<boolean>) => void;
    }
    interface ChActionGroup {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior"?: ItemsOverflowBehavior;
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "moreActionsAccessibleName"?: string;
        /**
          * @todo Check a better convention for this property, for example, "ActionsInlineAlignment" This attribute determines the position of the More Actions button in the Action Group.  | Value   | Details                                                               | | --------| --------------------------------------------------------------------- | | `Start` | The More Actions Button is displayed to the left of the ActionGroup.  | | `End`   | The More Actions Button is displayed to the right of the ActionGroup. |
         */
        "moreActionsButtonPosition"?: "Start" | "End";
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition"?: DropdownPosition;
        /**
          * Fired when the item is targeted or not.
         */
        "onDisplayedItemsCountChange"?: (event: ChActionGroupCustomEvent<number>) => void;
        /**
          * Fired when the more actions button is expanded or collapsed.
         */
        "onMoreActionsButtonExpandedChange"?: (event: ChActionGroupCustomEvent<boolean>) => void;
        /**
          * Determine if the dropdowns should be opened when the action is focused.
         */
        "openOnFocus"?: boolean;
    }
    interface ChActionGroupItem {
        /**
          * `true` if the control is floating. Useful to implement the `"ResponsiveCollapse"` value for the `itemsOverflowBehavior` property of the ch-action-group control.
         */
        "floating"?: boolean;
    }
    interface ChActionGroupRender {
        /**
          * Specifies the parts that are exported by the internal action-group. This property is useful to override the exported parts.
         */
        "actionGroupExportParts"?: string;
        /**
          * A CSS class to set as the `ch-action-group` element class.
         */
        "cssClass"?: string;
        /**
          * Specifies the parts that are exported by the internal dropdown. This property is useful to override the exported parts.
         */
        "dropdownExportParts"?: string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor"?: (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings"?: any;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback"?: (
    event: UIEvent,
    target: string,
    itemId: string
  ) => void;
        /**
          * This attribute determines how items behave when the content of the ActionGroup overflows horizontal. This property is needed to make the control responsive to changes in the Width of the container of ActionGroup.  | Value                 | Details                                                                                          | | --------------------- | ------------------------------------------------------------------------------------------------ | | `Add Scroll`          | The items of the ActionGroup that overflow horizontally are shown by means of a scroll.          | | `Multiline`           | The ActionGroup items that overflow horizontally are shown in a second line of the control.      | | `Responsive Collapse` | The Action Group items, when they start to overflow the control, are placed in the More Actions. |
         */
        "itemsOverflowBehavior"?: ItemsOverflowBehavior;
        /**
          * This property lets you define the model of the ch-action-group control.
         */
        "model"?: ActionGroupItemModel[];
        /**
          * This attribute lets you specify the label for the more actions button. Important for accessibility.
         */
        "moreActionsAccessibleName"?: string;
        /**
          * Specifies the position of the dropdown section that is placed relative to the more actions button.
         */
        "moreActionsDropdownPosition"?: DropdownPosition;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. TODO: Add implementation
         */
        "openOnFocus"?: boolean;
        /**
          * A CSS class to set as the `ch-dropdown-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "separatorCssClass"?: string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender"?: boolean;
    }
    interface ChAlert {
        /**
          * Determine the accessible name of the close button. Important for accessibility.
         */
        "closeButtonAccessibleName"?: string;
        /**
          * Countdown which initial state is dismissTimeout ms.
         */
        "countdown"?: number;
        /**
          * Specifies the time (ms) for the alert to be displayed. if `dismissTimeout = 0`, the alert will be always visible (unless is dismissed by the closeButton).
         */
        "dismissTimeout"?: 0;
        /**
          * Determine src of the left image.
         */
        "leftImgSrc"?: "";
        /**
          * Fires close event
         */
        "onClose"?: (event: ChAlertCustomEvent<any>) => void;
        /**
          * Toggles the Pause on Hover functionality
         */
        "pauseOnHover"?: boolean;
        /**
          * Determine if the element is displayed or not.
         */
        "presented"?: boolean;
        /**
          * Determine if the closeButton is displayed or not.
         */
        "showCloseButton"?: boolean;
        /**
          * If dismissTimeout > 0, a progress bar is displayed at the bottom of the element showing the time left for the alert to show. The progress stops when the element is hovered.
         */
        "showTimeoutBar"?: boolean;
        /**
          * Sets the desired interval
         */
        "timerInterval"?: 50;
    }
    /**
     * This component allows you to scan a wide variety of types of barcode and QR
     * codes.
     */
    interface ChBarcodeScanner {
        /**
          * The height (in pixels) of the QR box displayed at the center of the video.
         */
        "barcodeBoxHeight"?: number;
        /**
          * The width (in pixels) of the QR box displayed at the center of the video.
         */
        "barcodeBoxWidth"?: number;
        /**
          * Specifies the ID of the selected camera. Only works if `cameraPreference === "SelectedById"`.
         */
        "cameraId"?: string;
        /**
          * Specifies the camera preference for scanning.
         */
        "cameraPreference"?: "Default" | "FrontCamera" | "BackCamera";
        /**
          * Fired when the control is first rendered. Contains the ids about all available cameras.
         */
        "onCameras"?: (event: ChBarcodeScannerCustomEvent<string[]>) => void;
        /**
          * Fired when a new barcode is decoded.
         */
        "onRead"?: (event: ChBarcodeScannerCustomEvent<string>) => void;
        /**
          * Specifies how much time (in ms) should pass before to emit the read event with the same last decoded text. If the last decoded text is different from the new decoded text, this property is ignored.
         */
        "readDebounce"?: number;
        /**
          * `true` if the control is scanning.
         */
        "scanning"?: boolean;
    }
    interface ChCheckbox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * Specifies the label of the checkbox.
         */
        "caption"?: string;
        /**
          * The value when the checkbox is 'on'
         */
        "checkedValue": string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * True to highlight control when an action is fired.
         */
        "highlightable"?: boolean;
        /**
          * `true` if the control's value is indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * Emitted when the element is clicked or the space key is pressed and released.
         */
        "onClick"?: (event: ChCheckboxCustomEvent<any>) => void;
        /**
          * The `input` event is emitted when a change to the element's value is committed by the user.
         */
        "onInput"?: (event: ChCheckboxCustomEvent<any>) => void;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly"?: boolean;
        /**
          * The value when the checkbox is 'off'
         */
        "unCheckedValue": string;
        /**
          * The value of the control.
         */
        "value": string;
    }
    interface ChCodeEditor {
        /**
          * Allow the user to resize the diff editor split view. This property only works if `mode` === `"diff-editor"`.
         */
        "enableSplitViewResizing"?: boolean;
        /**
          * Specifies the language of the auto created model in the editor.
         */
        "language": string;
        /**
          * Specifies the rendered mode of the editor, allowing to set a normal editor or a diff editor.
         */
        "mode"?: "editor" | "diff-editor";
        /**
          * Specifies the modified value of the diff editor. This property only works if `mode` === `"diff-editor"`.
         */
        "modifiedValue"?: string;
        /**
          * Specifies if the modified value of the diff editor should be readonly. This property only works if `mode` === `"diff-editor"`.
         */
        "modifiedValueReadonly"?: boolean;
        /**
          * Specifies if the editor should be readonly. When `mode` === `"diff-editor"` this property will apply to the left pane.  - If `mode` === `"editor"` defaults to `false`.  - If `mode` === `"diff-editor"` defaults to `true`.
         */
        "readonly"?: boolean;
        /**
          * Render the differences in two side-by-side editors. Only works if `mode` === `"diff-editor"`.
         */
        "renderSideBySide"?: boolean;
        /**
          * Specifies the theme to be used for rendering.
         */
        "theme"?: string;
        /**
          * Specifies the value of the editor. If `mode` === `"diff-editor"`, this property will be used as the original model.
         */
        "value"?: string;
        /**
          * Specifies the schema URI for the YAML language.
         */
        "yamlSchemaUri"?: string;
    }
    interface ChComboBox {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * This property lets you determine the expression that will be applied to the filter. Only works if `filterType = "caption" | "value"`.
         */
        "filter"?: string;
        /**
          * This property lets you determine the debounce time (in ms) that the control waits until it processes the changes to the filter property. Consecutive changes to the `filter` property between this range, reset the timeout to process the filter. Only works if `filterType = "caption" | "value"`.
         */
        "filterDebounce"?: number;
        /**
          * This property lets you determine the list of items that will be filtered. Only works if `filterType = "list"`.
         */
        "filterList"?: string[];
        /**
          * This property lets you determine the options that will be applied to the filter.
         */
        "filterOptions"?: ComboBoxFilterOptions;
        /**
          * This attribute lets you define what kind of filter is applied to items. Only items that satisfy the filter predicate will be displayed.  | Value     | Details                                                                                        | | --------- | ---------------------------------------------------------------------------------------------- | | `caption` | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  | | `list`    | Show only the items that are contained in the array determinate by the `filterList` property.  | | `value`   | Show only the items whose `value` satisfies the regex determinate by the `filter` property. | | `none`    | Show all items.                                                                                |
         */
        "filterType"?: ComboBoxFilterType;
        /**
          * Specifies the items of the control
         */
        "items"?: ComboBoxItemModel[];
        /**
          * This attribute indicates that multiple options can be selected in the list. If it is not specified, then only one option can be selected at a time. When multiple is specified, the control will show a scrolling list box instead of a single line dropdown.
         */
        "multiple"?: boolean;
        /**
          * The `input` event is emitted when a change to the element's value is committed by the user.
         */
        "onInput"?: (event: ChComboBoxCustomEvent<string>) => void;
        /**
          * A hint to the user of what can be entered in the control. Same as [placeholder](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-placeholder) attribute for `input` elements.
         */
        "placeholder"?: string;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly"?: boolean;
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable"?: boolean;
        /**
          * Specifies the value (selected item) of the control.
         */
        "value"?: string;
    }
    /**
     * The `ch-dialog` component represents a modal or non-modal dialog box or other
     * interactive component.
     */
    interface ChDialog {
        /**
          * `true` if the dialog should be repositioned after resize.
         */
        "adjustPositionAfterResize"?: boolean;
        /**
          * "box" will allow the dialog to be draggable from both the header and the content. "header" will allow the dialog to be draggable only from the header. "no" disables dragging completely.
         */
        "allowDrag"?: "box" | "header" | "no";
        /**
          * Refers to the dialog title. I will ve visible if 'showHeader´is true.
         */
        "caption"?: string;
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element. This label is used for the close button of the header.
         */
        "closeButtonAccessibleName"?: string;
        /**
          * Specifies whether the dialog is hidden or visible.
         */
        "hidden"?: boolean;
        /**
          * Specifies whether the dialog is a modal or not. Modal dialog boxes interrupt interaction with the rest of the page being inert, while non-modal dialog boxes allow interaction with the rest of the page.  Note: If `hidden !== false`, this property does not reflect changes on runtime, since at the time of writing browsers do not support switching from modal to not-modal, (or vice-versa).
         */
        "modal"?: boolean;
        /**
          * Emitted when the dialog is closed.
         */
        "onDialogClosed"?: (event: ChDialogCustomEvent<any>) => void;
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable"?: boolean;
        /**
          * Specifies whether the dialog footer is hidden or visible.
         */
        "showFooter"?: boolean;
        /**
          * Specifies whether the dialog header is hidden or visible.
         */
        "showHeader"?: boolean;
    }
    interface ChDropdown {
        /**
          * Specifies if the current parent of the item is the action-group control.
         */
        "actionGroupParent"?: boolean;
        /**
          * This attribute lets you specify the label for the expandable button. Important for accessibility.
         */
        "buttonAccessibleName"?: string;
        /**
          * Specifies the caption that the control will display.
         */
        "caption"?: string;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc"?: string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType"?: ImageRender;
        /**
          * `true` to display the dropdown section.
         */
        "expanded"?: boolean;
        /**
          * Specifies the hyperlink of the item. If this property is defined, the control will render an anchor tag with this `href`. Otherwise, it will render a button tag.
         */
        "href"?: string;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback"?: (event: UIEvent) => void;
        /**
          * Specifies whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf"?: boolean;
        /**
          * Level in the render at which the item is placed.
         */
        "level"?: number;
        /**
          * This attribute lets you specify if the control is nested in another dropdown. Useful to manage keyboard interaction.
         */
        "nestedDropdown"?: boolean;
        /**
          * Fired when the visibility of the dropdown section is changed by user interaction.
         */
        "onExpandedChange"?: (event: ChDropdownCustomEvent<boolean>) => void;
        /**
          * Determine if the dropdown section should be opened when the expandable button of the control is focused. TODO: Add implementation
         */
        "openOnFocus"?: boolean;
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position"?: DropdownPosition;
        /**
          * Specifies the shortcut caption that the control will display.
         */
        "shortcut"?: string;
        /**
          * `true` to make available a slot to show a footer element.
         */
        "showFooter"?: boolean;
        /**
          * `true` to make available a slot to show a header element.
         */
        "showHeader"?: boolean;
        /**
          * Specifies the src for the left img.
         */
        "startImgSrc"?: string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType"?: ImageRender;
    }
    interface ChDropdownRender {
        /**
          * This attribute lets you specify the label for the first expandable button. Important for accessibility.
         */
        "buttonAccessibleName"?: string;
        /**
          * A CSS class to set as the `ch-dropdown` element class.
         */
        "cssClass"?: string;
        /**
          * Specifies the parts that are exported by the internal dropdown. This property is useful to override the exported parts.
         */
        "exportParts"?: string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor"?: (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings"?: any;
        /**
          * This callback is executed when an item is clicked.
         */
        "itemClickCallback"?: (
    event: UIEvent,
    target: string,
    itemId: string
  ) => void;
        /**
          * This property lets you define the model of the ch-dropdown control.
         */
        "model"?: DropdownItemModel[];
        /**
          * Specifies the position of the dropdown section that is placed relative to the expandable button.
         */
        "position"?: DropdownPosition;
        /**
          * A CSS class to set as the `ch-dropdown-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "separatorCssClass"?: string;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender"?: boolean;
    }
    interface ChFlexibleLayout {
        /**
          * Specifies the information of each view displayed.
         */
        "itemsInfo"?: Map<
    string,
    FlexibleLayoutItemExtended<FlexibleLayoutItem, FlexibleLayoutLeafType>
  >;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout"?: FlexibleLayout;
        /**
          * Specifies additional parts to export.
         */
        "layoutSplitterParts"?: string;
        /**
          * Fired when the selected item change.
         */
        "onSelectedViewItemChange"?: (event: ChFlexibleLayoutCustomEvent<ViewSelectedItemInfo>) => void;
        /**
          * Fired when a item of a view request to be closed.
         */
        "onViewItemClose"?: (event: ChFlexibleLayoutCustomEvent<ViewItemCloseInfo>) => void;
        /**
          * Fired when a widget is dragged and dropped into a view.
         */
        "onViewItemReorder"?: (event: ChFlexibleLayoutCustomEvent<WidgetReorderInfo>) => void;
    }
    interface ChFlexibleLayoutRender {
        /**
          * A CSS class to set as the `ch-flexible-layout` element class.
         */
        "cssClass"?: string;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout"?: FlexibleLayout;
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "renders"?: FlexibleLayoutRenders;
    }
    interface ChFormCheckbox {
        /**
          * The checkbox id
         */
        "checkboxId"?: string;
        /**
          * The presence of this attribute makes the checkbox checked by default
         */
        "checked"?: boolean;
        /**
          * The presence of this attribute disables the checkbox
         */
        "disabled"?: boolean;
        /**
          * The presence of this attribute makes the checkbox indeterminate
         */
        "indeterminate"?: boolean;
        /**
          * The checkbox label
         */
        "label"?: string;
        /**
          * The checkbox name
         */
        "name"?: string;
        "onChange"?: (event: ChFormCheckboxCustomEvent<any>) => void;
        /**
          * The checkbox value
         */
        "value"?: string;
    }
    /**
     * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.
     */
    interface ChGrid {
        /**
          * A boolean indicating whether the user can drag column headers to reorder columns.
         */
        "allowColumnReorder"?: boolean;
        /**
          * One of "single" or "splitter", indicating the behavior of column resizing. "single", resize a single column at a time. "splitter", when adjusts the width of one column, the neighboring columns    are also resized proportionally, maintaining the overall width.
         */
        "columnResizeMode"?: "single" | "splitter";
        /**
          * Specifies the keyboard navigation mode for the component. - "none": Disables keyboard navigation for the grid rows. - "select": Allows keyboard navigation by changing the selection of grid rows. - "focus": Allows keyboard navigation by focusing on grid rows, but does not change the selection.
         */
        "keyboardNavigationMode"?: "none" | "select" | "focus";
        /**
          * An object that contains localized strings for the grid.
         */
        "localization"?: GridLocalization;
        /**
          * Event emitted when the cell selection is changed.
         */
        "onCellSelectionChanged"?: (event: ChGridCustomEvent<ChGridCellSelectionChangedEvent>) => void;
        /**
          * Event emitted when a row is clicked.
         */
        "onRowClicked"?: (event: ChGridCustomEvent<ChGridRowClickedEvent>) => void;
        /**
          * Event emitted when attempts to open a context menu on a row.
         */
        "onRowContextMenu"?: (event: ChGridCustomEvent<ChGridRowContextMenuEvent>) => void;
        /**
          * Event emitted when a row is double clicked.
         */
        "onRowDoubleClicked"?: (event: ChGridCustomEvent<ChGridRowClickedEvent>) => void;
        /**
          * Event emitted when Enter is pressed on a row.
         */
        "onRowEnterPressed"?: (event: ChGridCustomEvent<ChGridRowPressedEvent>) => void;
        /**
          * Event emitted when the row marking is changed.
         */
        "onRowMarkingChanged"?: (event: ChGridCustomEvent<ChGridMarkingChangedEvent>) => void;
        /**
          * Event emitted when the row selection is changed.
         */
        "onSelectionChanged"?: (event: ChGridCustomEvent<ChGridSelectionChangedEvent>) => void;
        /**
          * A CSS class name applied to a row when it is focused.
         */
        "rowFocusedClass"?: string;
        /**
          * One of "false", "true" or "auto", indicating whether or not rows can be highlighted. "auto", row highlighting will be enabled if the row selection mode is set to "single" or "multiple".
         */
        "rowHighlightEnabled"?: boolean | "auto";
        /**
          * A CSS class name applied to a row when it is hovered.
         */
        "rowHighlightedClass"?: string;
        /**
          * A CSS class name applied to a row when it is marked.
         */
        "rowMarkedClass"?: string;
        /**
          * A CSS class name applied to a row when it is selected.
         */
        "rowSelectedClass"?: string;
        /**
          * One of "none", "single" or "multiple", indicating how rows can be selected. It can be set to "none" if no rows should be selectable, "single" if only one row can be selected at a time, or "multiple" if multiple rows can be selected at once.
         */
        "rowSelectionMode"?: "none" | "single" | "multiple";
    }
    /**
     * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.
     */
    interface ChGridActionRefresh {
        /**
          * Indicates whether the refresh button is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the refresh button is clicked.
         */
        "onRefreshClicked"?: (event: ChGridActionRefreshCustomEvent<any>) => void;
    }
    /**
     * The `ch-grid-action-settings` component represents a settings button for a grid action bar.
     */
    interface ChGridActionSettings {
        /**
          * Indicates whether the settings button is disabled or not.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the settings button is clicked.
         */
        "onSettingsShowClicked"?: (event: ChGridActionSettingsCustomEvent<any>) => void;
    }
    /**
     * The `ch-grid-actionbar` component represents a container for a grid actions.
     */
    interface ChGridActionbar {
    }
    /**
     * The `ch-grid-column` component represents a grid column.
     */
    interface ChGridColumn {
        /**
          * @deprecated Use "columnImage" or "columnImageSet" instead. A URL to an icon to display in the column header.
         */
        "columnIconUrl"?: string;
        /**
          * A unique identifier for the column.
         */
        "columnId"?: string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImage"?: string;
        /**
          * A URL to an icon to display in the column header.
         */
        "columnImageSet"?: string;
        /**
          * The text to display in the column header and settings.
         */
        "columnName"?: string;
        /**
          * Indicates whether the text in the column header is visible or not
         */
        "columnNameHidden"?: boolean;
        /**
          * @deprecated Use "columnTooltip" and "columnNameHidden" instead. One of "text" or "title", indicating whether the `columnName` should be displayed as the column text or as tooltip of the column image.
         */
        "columnNamePosition"?: "text" | "title";
        /**
          * The text to display when the cursor is placed over the column header.
         */
        "columnTooltip"?: string;
        /**
          * One of "plain", "rich", or "tree", indicating the type of cell displayed in the column.
         */
        "columnType"?: "plain" | "rich" | "tree";
        /**
          * A CSS class name to apply to the display observer element used to detect changes in the column visibility.
         */
        "displayObserverClass"?: string;
        /**
          * One of "left" or "right", indicating whether the column should be "frozen" (i.e. remain visible when the user scrolls horizontally).
         */
        "freeze"?: ChGridColumnFreeze;
        /**
          * A boolean indicating whether the column should be hidden. The user can display it from the grid settings.
         */
        "hidden"?: boolean;
        /**
          * A boolean indicating whether the column should be hideable (i.e. whether the user should be able to show/hide the column).
         */
        "hideable"?: boolean;
        /**
          * Event emitted when the user stops dragging the column header to move it.
         */
        "onColumnDragEnded"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the user is dragging the column header to move it.
         */
        "onColumnDragStarted"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the user is dragging the column header to move it.
         */
        "onColumnDragging"?: (event: ChGridColumnCustomEvent<ChGridColumnDragEvent>) => void;
        /**
          * Event emitted when the `freeze` property is changed.
         */
        "onColumnFreezeChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnFreezeChangedEvent>) => void;
        /**
          * Event emitted when the `hidden` property is changed.
         */
        "onColumnHiddenChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnHiddenChangedEvent>) => void;
        /**
          * Event emitted when the `order` property is changed.
         */
        "onColumnOrderChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnOrderChangedEvent>) => void;
        /**
          * Event emitted when the user clicks the row selector checkbox (only applicable for `richRowSelector="true"`.
         */
        "onColumnSelectorClicked"?: (event: ChGridColumnCustomEvent<ChGridColumnSelectorClickedEvent>) => void;
        /**
          * Event emitted when the `size` property has been changed (i.e. when the user finishes dragging to resize the column).
         */
        "onColumnSizeChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnSizeChangedEvent>) => void;
        /**
          * Event emitted when the `size` property is currently being changed (i.e. when the user is dragging to resize the column).
         */
        "onColumnSizeChanging"?: (event: ChGridColumnCustomEvent<ChGridColumnSizeChangedEvent>) => void;
        /**
          * Event emitted when the `sortDirection` property is changed.
         */
        "onColumnSortChanged"?: (event: ChGridColumnCustomEvent<ChGridColumnSortChangedEvent>) => void;
        /**
          * A number indicating the order in which the column should appear.
         */
        "order"?: number;
        /**
          * A number indicating the physical order of the column (i.e. its position in the DOM).
         */
        "physicalOrder"?: number;
        /**
          * A boolean indicating whether the column should be resizable (i.e. whether the user should be able to drag its width).
         */
        "resizable"?: boolean;
        /**
          * A boolean indicating whether the column is currently being resized.
         */
        "resizing"?: boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a set of action buttons (only applicable for columnType="rich").
         */
        "richRowActions"?: boolean;
        /**
          * A boolean value indicating whether the column cells are draggable to reorder the grid rows (only applicable for columnType="rich").
         */
        "richRowDrag"?: boolean;
        /**
          * A boolean indicating whether the column cells in the grid should have a checkbox selector (only applicable for columnType="rich").
         */
        "richRowSelector"?: boolean;
        /**
          * One of "select" or "mark", indicating the mode of rich row selector. "select" indicates that the row selector is bound to the row selection. "mark" allows to mark a row independently of the selection.
         */
        "richRowSelectorMode"?: "select" | "mark";
        /**
          * Indicate the state of the rich row selector. "" indicates that all rows are unchecked. "checked" indicates that all rows are checked. "indeterminate" indicates that some rows are marked.
         */
        "richRowSelectorState"?: | ""
    | "checked"
    | "indeterminate";
        /**
          * A boolean indicating whether the user should be able to open a settings panel for the column.
         */
        "settingable"?: boolean;
        /**
          * A boolean indicating whether the settings panel for the column should be visible.
         */
        "showSettings"?: boolean;
        /**
          * A string indicating the width of the column. Any value supported by the "grid-template-columns" CSS property is valid.
         */
        "size"?: string;
        /**
          * One of "asc" or "desc", indicating the current sort direction.
         */
        "sortDirection"?: ChGridColumnSortDirection;
        /**
          * A boolean indicating whether the column should be sortable (i.e. whether the user should be able to click the column header to sort the data).
         */
        "sortable"?: boolean;
    }
    /**
     * The `ch-grid-column-display` component is responsible for determining the
     * visibility of a grid column and updating its hidden property based on
     * whether the monitored class is visible or not.
     */
    interface ChGridColumnDisplay {
        /**
          * The column element that is being monitored.
         */
        "column": HTMLChGridColumnElement;
    }
    /**
     * The `ch-grid-column-resize` component responsible for resizing a column in a grid.
     */
    interface ChGridColumnResize {
        /**
          * The column element that is being resized.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Event emitted when the user finishes resizing the column.
         */
        "onColumnResizeFinished"?: (event: ChGridColumnResizeCustomEvent<ChGridColumnResizeEvent>) => void;
        /**
          * Event emitted when the user starts resizing the column.
         */
        "onColumnResizeStarted"?: (event: ChGridColumnResizeCustomEvent<ChGridColumnResizeEvent>) => void;
        /**
          * Event emitted when the user is resizing the column.
         */
        "onColumnResizing"?: (event: ChGridColumnResizeCustomEvent<ChGridColumnResizeEvent>) => void;
    }
    /**
     * The `ch-grid-column-settings` component represents a settings window for a column.
     */
    interface ChGridColumnSettings {
        /**
          * The `HTMLChGridColumnElement` that the settings window is associated with.
         */
        "column": HTMLChGridColumnElement;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show"?: boolean;
    }
    /**
     * The `ch-grid-columnset` component represents a group of columns.
     */
    interface ChGridColumnset {
    }
    /**
     * The 'ch-grid-infinite-scroll' provides infinite scroll functionality for a 'ch-grid' component
     */
    interface ChGridInfiniteScroll {
        /**
          * Event emitted when end is reached.
         */
        "onInfinite"?: (event: ChGridInfiniteScrollCustomEvent<any>) => void;
        /**
          * Indicates whether the grid is loading or already loaded.
         */
        "status"?: ChGridInfiniteScrollState;
    }
    /**
     * The `ch-grid-row-actions` component represents a group row actions.
     */
    interface ChGridRowActions {
        /**
          * Event emitted when row actions is opened.
         */
        "onRowActionOpened"?: (event: ChGridRowActionsCustomEvent<any>) => void;
        /**
          * Indicates that the row actions are displayed when the row-actions-button is pressed.
         */
        "showOnRowActions"?: boolean;
        /**
          * Indicates that the row actions are displayed when right-clicks on the row.
         */
        "showOnRowContext"?: boolean;
        /**
          * Indicates to show row actions when hovering over row.
         */
        "showOnRowHover"?: boolean;
    }
    /**
     * The `ch-grid-rowset-empty` component represents a container to "empty message" when ch-grid-rowset is empty.
     */
    interface ChGridRowsetEmpty {
    }
    /**
     * The `ch-grid-rowset-legend` component represents a caption for the `ch-grid-rowset` element.
     */
    interface ChGridRowsetLegend {
        /**
          * Event emitted when the legend is clicked.
         */
        "onRowsetLegendClicked"?: (event: ChGridRowsetLegendCustomEvent<CustomEvent>) => void;
    }
    /**
     * The `ch-grid-settings` component represents a settings window for a grid component.
     */
    interface ChGridSettings {
        /**
          * The `HTMLChGridElement` that the settings window is associated with.
         */
        "grid": HTMLChGridElement;
        /**
          * Event emitted when the close button of the settings window is clicked.
         */
        "onSettingsCloseClicked"?: (event: ChGridSettingsCustomEvent<any>) => void;
        /**
          * Indicates whether the settings window is currently shown or not.
         */
        "show"?: boolean;
    }
    /**
     * The `ch-grid-settings-columns` component represents the settings for a grid's columns.
     */
    interface ChGridSettingsColumns {
        /**
          * An array of column elements to render.
         */
        "columns": HTMLChGridColumnElement[];
    }
    /**
     * The `ch-grid-virtual-scroller` component that displays a subset of items.
     * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen
     * based on the viewport size and scroll position.
     */
    interface ChGridVirtualScroller {
        /**
          * The list of items to be rendered in the grid.
         */
        "items"?: any[];
        /**
          * The number of elements in the items list. Use if the list changes, without recreating the array.
         */
        "itemsCount"?: number;
        /**
          * Event emitted when the list of visible items in the grid changes.
         */
        "onViewPortItemsChanged"?: (event: ChGridVirtualScrollerCustomEvent<any>) => void;
        /**
          * The list of items to display within the current viewport.
         */
        "viewPortItems"?: any[];
    }
    interface ChIcon {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: boolean;
        /**
          * The color of the icon.
         */
        "color"?: Color;
        /**
          * If enabled, the icon will be loaded lazily when it's visible in the viewport.
         */
        "lazy"?: boolean;
        /**
          * The size of the icon. Possible values: regular, small.
         */
        "size"?: Size;
        /**
          * The URL of the icon.
         */
        "src"?: string;
    }
    interface ChIntersectionObserver {
        /**
          * Bottom margin around the root element
         */
        "bottomMargin"?: string;
        /**
          * Left margin around the root element
         */
        "leftMargin"?: string;
        /**
          * Emitted whenever the control reaches a threshold specified by the threshold property
          * @param IntersectionObserverEntry Details of intersection object.
         */
        "onIntersectionUpdate"?: (event: ChIntersectionObserverCustomEvent<IntersectionObserverEntry>) => void;
        /**
          * Right margin around the root element
         */
        "rightMargin"?: string;
        /**
          * Set the ID of the component that is used as the viewport, default is the browser.
         */
        "root"?: string;
        /**
          * Numeric values representing percentages of the target element which are visible.
         */
        "threshold"?: string;
        /**
          * Top margin around the root element
         */
        "topMargin"?: string;
    }
    interface ChLayoutSplitter {
        /**
          * This attribute lets you specify the label for the drag bar. Important for accessibility.
         */
        "barAccessibleName"?: string;
        /**
          * This attribute lets you specify if the resize operation is disabled in all drag bars. If `true`, the drag bars are disabled.
         */
        "dragBarDisabled"?: boolean;
        /**
          * Specifies the resizing increment (in pixel) that is applied when using the keyboard to resize a drag bar.
         */
        "incrementWithKeyboard"?: number;
        /**
          * Specifies the list of component that are displayed. Each component will be separated via a drag bar.
         */
        "layout"?: LayoutSplitterDistribution;
    }
    interface ChList {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element. This label is used for the close button of the captions.
         */
        "closeButtonAccessibleName"?: string;
        /**
          * `true` to hide the close button in the items.
         */
        "closeButtonHidden"?: boolean;
        /**
          * Specifies the flexible layout type.
         */
        "direction"?: ListDirection;
        /**
          * When the control is sortable, the items can be dragged outside of the tab-list. This property lets you specify if this behavior is disabled.
         */
        "dragOutsideDisabled"?: boolean;
        /**
          * `true` if the group has is view section expanded. Otherwise, only the toolbar will be displayed.
         */
        "expanded"?: boolean;
        /**
          * Specifies the items of the tab control.
         */
        "items"?: FlexibleLayoutWidget[];
        /**
          * Fired when an item of the main group is double clicked.
         */
        "onExpandMainGroup"?: (event: ChListCustomEvent<string>) => void;
        /**
          * Fired the close button of an item is clicked.
         */
        "onItemClose"?: (event: ChListCustomEvent<ListItemCloseInfo>) => void;
        /**
          * Fired the first time a caption button is dragged outside of its tab list.
         */
        "onItemDragStart"?: (event: ChListCustomEvent<number>) => void;
        /**
          * Fired when the selected item change.
         */
        "onSelectedItemChange"?: (event: ChListCustomEvent<ListSelectedItemInfo>) => void;
        /**
          * Specifies the selected item of the widgets array.
         */
        "selectedId"?: string;
        /**
          * `true` to show the captions of the items.
         */
        "showCaptions"?: boolean;
        /**
          * `true` to enable sorting the tab buttons by dragging them in the tab-list. If sortable !== true, the tab buttons can not be dragged out either.
         */
        "sortable"?: boolean;
    }
    /**
     * A control to render markdown syntax. It supports GitHub Flavored Markdown
     * (GFM) and code highlighting.
     *  - It parses the incoming markdown to [mdast](https://github.com/syntax-tree/mdast) using [micromark](https://github.com/micromark/micromark) via [mdast-util-from-markdown](https://github.com/syntax-tree/mdast-util-from-markdown).
     * - After that, it implements a reactivity layer by implementing its own render for the mdast. With this, changes to the input markdown only update the portion of the DOM that changes.
     * - It supports Github Flavored Markdown (GFM) by using [mdast-util-gfm](https://github.com/syntax-tree/mdast-util-gfm) and [micromark-extension-gfm](https://github.com/micromark/micromark-extension-gfm).
     * - It supports code highlight by parsing the incomming code of the markdown to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.
     * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).
     * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.
     */
    interface ChMarkdown {
        /**
          * `true` to render potentially dangerous user content when rendering HTML with the option `rawHtml === true`
         */
        "allowDangerousHtml"?: boolean;
        /**
          * `true` to render raw HTML with sanitization.
         */
        "rawHtml"?: boolean;
        /**
          * This property allows us to implement custom rendering for the code blocks.
         */
        "renderCode"?: MarkdownCodeRender;
        /**
          * Specifies the markdown string to parse.
         */
        "value"?: string;
    }
    interface ChNextDataModeling {
    }
    interface ChNextDataModelingItem {
        /**
          * This attribute lets you specify if the actions in the `mode === "add"` are visible.
         */
        "actionsVisible"?: boolean;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions"?: DataModelItemLabels;
        /**
          * The dataType of the field.
         */
        "dataType"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled"?: boolean;
        /**
          * This property maps entities of the current dataModel with their corresponding ATTs.
         */
        "entityNameToATTs"?: EntityNameToATTs;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts"?: { [key in ErrorText]: string };
        /**
          * This property specifies the defined field names of the entity parent.
         */
        "fieldNames"?: string[];
        /**
          * This property specifies at which collection level the field is located.
         */
        "level"?: 0 | 1 | 2;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts"?: number;
        /**
          * This attribute specifies the operating mode of the control
         */
        "mode"?: Mode;
        /**
          * The name of the field.
         */
        "name"?: string;
        /**
          * Fired when the item is confirmed to be deleted
         */
        "onDeleteField"?: (event: ChNextDataModelingItemCustomEvent<any>) => void;
        /**
          * Fired when the item is edited
         */
        "onEditField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * Fired when a new file is committed to be added when adding a new entity (level === 0)
         */
        "onFirstNewField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * Fired when the new field of the new entity tries to commits the adding operation, but fails because it has errors
         */
        "onFirstNewFieldErrors"?: (event: ChNextDataModelingItemCustomEvent<any>) => void;
        /**
          * Fired when a new entity is committed to be added
         */
        "onNewEntity"?: (event: ChNextDataModelingItemCustomEvent<EntityInfo>) => void;
        /**
          * Fired when a new file is committed to be added
         */
        "onNewField"?: (event: ChNextDataModelingItemCustomEvent<ItemInfo>) => void;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly"?: boolean;
        /**
          * `true` to show the new field button when `mode === "add"`
         */
        "showNewFieldBtn"?: boolean;
        /**
          * The type of the field.
         */
        "type"?: EntityItemType;
    }
    interface ChNextDataModelingRender {
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class when adding mode is enabled.
         */
        "addingModeCommonClass"?: string;
        /**
          * The labels used in the buttons of the items. Important for accessibility.
         */
        "captions"?: DataModelItemLabels1;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class.
         */
        "commonClass"?: string;
        /**
          * This callback is used to created a new SDT GxCollectionField based on the EntityItem type.
         */
        "createGxCollectionCallback"?: () => EntityItem[];
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class.
         */
        "cssClass"?: string;
        /**
          * This property represents the UI model that is currently rendered.
         */
        "dataModel"?: DataModel;
        /**
          * This property represents a copy of the UI model that is currently rendered. Useful for making changes that may or may not be accepted by the server.
         */
        "dataModelToEdit"?: DataModel;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event.
         */
        "disabled"?: boolean;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0"` and `mode === "add"`.
         */
        "entityAddingModeClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0"` and `mode !== "add"`.
         */
        "entityClass"?: string;
        /**
          * The error texts used for the new field input.
         */
        "errorTexts"?: { [key in ErrorText1]: string };
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "0" | "1"` and `mode === "add"`.
         */
        "fieldAddingModeClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level === "1"` and `mode !== "add"`.
         */
        "fieldClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with (`level === "0"` and `mode !== "add"`) or `level === "1" | "2"`.
         */
        "fieldCommonClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class with `level === "1"`.
         */
        "fieldContainerClass"?: string;
        /**
          * This property is a WA due to Angular's bug not letting execute UC 2.0 methods on different layouts.
         */
        "hideLoading"?: any;
        /**
          * Determine the maximum amount of ATTs displayed per entity.
         */
        "maxAtts"?: number;
        /**
          * Emitted when a new field is added or edited.
         */
        "onFieldAdded"?: (event: ChNextDataModelingRenderCustomEvent<any>) => void;
        /**
          * Emitted when a new field is removed.
         */
        "onFieldRemoved"?: (event: ChNextDataModelingRenderCustomEvent<any>) => void;
        /**
          * This attribute indicates that the user cannot modify the value of the control. Same as [readonly](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#attr-readonly) attribute for `input` elements.
         */
        "readonly"?: boolean;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level = "2"` and `mode === "add"`.
         */
        "subFieldAddingModeClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling-item` element class with `level = "2"` and `mode !== "add"`.
         */
        "subFieldClass"?: string;
        /**
          * A CSS class to set as the `ch-next-data-modeling` element class with `level === "2"`.
         */
        "subFieldContainerClass"?: string;
    }
    interface ChNextProgressBar {
        /**
          * It specifies the main text that is shown on the progress.
         */
        "caption"?: string;
        /**
          * A CSS class to set as the `ch-next-progress-bar` element class.
         */
        "cssClass"?: string;
        /**
          * This attribute lets you specify the value of the progress.
         */
        "currentStep"?: number;
        /**
          * It specifies more information that is shown on the progress.
         */
        "description"?: string;
        /**
          * This attribute lets you specify if the progress bar is rendered.
         */
        "presented"?: boolean;
        /**
          * This attribute lets you specify the amount of steps for the progress.
         */
        "steps"?: number;
    }
    interface ChNotifications {
        "delayToAnimateNewNotifications"?: number;
        "notifications"?: NotificationMessageWithDelay[];
        "position"?: "bottom-start" | "bottom-end";
        "timeToDismissNotifications"?: number;
        "timeType"?: "Seconds" | "Milliseconds";
    }
    interface ChNotificationsItem {
        "buttonImgSrc"?: string;
        "closeButtonLabel"?: string;
        "leftImgSrc"?: string;
        "onNotificationClick"?: (event: ChNotificationsItemCustomEvent<number>) => void;
        "onNotificationDismiss"?: (event: ChNotificationsItemCustomEvent<number>) => void;
        /**
          * `true` to show the close notification button
         */
        "showCloseButton"?: boolean;
        "timeToDismiss"?: 5000;
    }
    /**
     * The 'ch-paginator' component represents a paginator control for navigating through pages.
     */
    interface ChPaginator {
        /**
          * The active page number.
         */
        "activePage"?: number;
        /**
          * Indicates that the end has been reached. Use when total pages are not known (totalPages = -1).
         */
        "hasNextPage"?: boolean;
        /**
          * Event emitted when the active page changes.
         */
        "onActivePageChanged"?: (event: ChPaginatorCustomEvent<ChPaginatorActivePageChangedEvent>) => void;
        /**
          * Event emitted when the navigation is requested.
         */
        "onPageNavigationRequested"?: (event: ChPaginatorCustomEvent<ChPaginatorPageNavigationRequestedEvent>) => void;
        /**
          * The total number of pages. Use -1 if not known and 'hasNextPage' property to indicate that the end has been reached.
         */
        "totalPages"?: 1;
    }
    /**
     * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.
     */
    interface ChPaginatorNavigate {
        /**
          * Flag indicating if the button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Event emitted when the navigation button is pressed.
         */
        "onNavigateClicked"?: (event: ChPaginatorNavigateCustomEvent<ChPaginatorNavigateClickedEvent>) => void;
        /**
          * The type of navigation button.
         */
        "type"?: ChPaginatorNavigateType;
    }
    /**
     * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.
     */
    interface ChPaginatorPages {
        /**
          * The maximum number of items to display in the pagination.
         */
        "maxSize"?: number;
        /**
          * Event emitted when the page changes.
         */
        "onPageChanged"?: (event: ChPaginatorPagesCustomEvent<ChPaginatorPagesPageChangedEvent>) => void;
        /**
          * The active page number.
         */
        "page"?: number;
        /**
          * Flag to render the first and last pages.
         */
        "renderFirstLastPages"?: boolean;
        /**
          * The text to display for the dots.
         */
        "textDots"?: string;
        /**
          * The total number of pages.
         */
        "totalPages"?: 1;
    }
    /**
     * The `ch-popover` component represents a popover container that is positioned
     * relative to an element, but placed on the top layer using `position: fixed`.
     */
    interface ChPopover {
        /**
          * `true` if the `actionElement` binds the ch-popover using an external ID. If so, the `popoverTargetElement` property won't be configured in the action element.
         */
        "actionById"?: boolean;
        /**
          * Specifies a reference of the action that controls the popover control.
         */
        "actionElement"?: PopoverActionElement;
        /**
          * Specifies the drag behavior of the popover. If `allowDrag === "header"`, a slot with the `"header"` name will be available to place the header content.
         */
        "allowDrag"?: "box" | "header" | "no";
        /**
          * Specifies the block alignment of the window.
         */
        "blockAlign"?: ChPopoverAlign;
        /**
          * Specifies how the popover adapts its block size.  - "content": The block size of the control will be determined by its    content block size.  - "action-element": The block size of the control will match the block    size of the `actionElement`.  - "action-element-as-minimum": The minimum block size of the control    will match the block size of the `actionElement`.  If the control is resized at runtime, only the "action-element-as-minimum" value will still work.
         */
        "blockSizeMatch"?: ChPopoverSizeMatch;
        /**
          * This property only applies for `"manual"` mode. In native popovers, when using `"manual"` mode the popover doesn't close when clicking outside the control. This property allows to close the popover when clicking outside in `"manual"` mode.
         */
        "closeOnClickOutside"?: boolean;
        /**
          * `true` if the control is not stacked with another top layer.
         */
        "firstLayer"?: boolean;
        /**
          * Specifies whether the popover is hidden or visible.
         */
        "hidden"?: boolean;
        /**
          * Specifies the inline alignment of the window.
         */
        "inlineAlign"?: ChPopoverAlign;
        /**
          * Specifies how the popover adapts its inline size.  - "content": The inline size of the control will be determined by its    content inline size.  - "action-element": The inline size of the control will match the inline    size of the `actionElement`.  - "action-element-as-minimum": The minimum inline size of the control    will match the inline size of the `actionElement`.  If the control is resized at runtime, only the "action-element-as-minimum" value will still work.
         */
        "inlineSizeMatch"?: ChPopoverSizeMatch;
        /**
          * Popovers that have the `"auto"` state can be "light dismissed" by selecting outside the popover area, and generally only allow one popover to be displayed on-screen at a time. By contrast, `"manual"` popovers must always be explicitly hidden, but allow for use cases such as nested popovers in menus.
         */
        "mode"?: "auto" | "manual";
        /**
          * Emitted when the popover is closed.
         */
        "onPopoverClosed"?: (event: ChPopoverCustomEvent<any>) => void;
        /**
          * Emitted when the popover is opened.
         */
        "onPopoverOpened"?: (event: ChPopoverCustomEvent<any>) => void;
        /**
          * Specifies an alternate position to try when the control overflows the window.
         */
        "positionTry"?: "flip-block" | "flip-inline" | "none";
        /**
          * Specifies whether the control can be resized. If `true` the control can be resized at runtime by dragging the edges or corners.
         */
        "resizable"?: boolean;
    }
    interface ChQr {
        /**
          * The background color. By default is transparent.
         */
        "background"?: string | null;
        /**
          * Means "Error correction levels". The four values L, M, Q, and H will use %7, 15%, 25%, and 30% of the QR code for error correction respectively. So on one hand the code will get bigger but chances are also higher that it will be read without errors later on. This value is by default High (H)
         */
        "ecLevel"?: ecLevel;
        /**
          * What color you want your QR code to be. By default is black.
         */
        "fill"?: string;
        /**
          * Defines how round the blocks should be. Numbers from 0 (squares) to 0.5 (maximum round) are supported.
         */
        "radius"?: number;
        /**
          * The total size of the final QR code in pixels - it will be a square. This value is by default "128"
         */
        "size"?: number;
        /**
          * Any kind of text, also links, email addresses, any thing.
         */
        "text"?: string | undefined;
    }
    /**
     * The radio group control is used to render a short list of mutually exclusive options.
     * It contains radio items to allow users to select one option from the list of options.
     */
    interface ChRadioGroupRender {
        /**
          * This attribute lets you specify if the radio-group is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * This property lets you define the items of the ch-radio-group-render control.
         */
        "items"?: RadioItem[];
        /**
          * Fired when the selected item change. It contains the information about the new selected value.
         */
        "onChange"?: (event: ChRadioGroupRenderCustomEvent<string>) => void;
        /**
          * The value of the control.
         */
        "value"?: string;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     * This control represents and item of the ch-segmented-control-render
     */
    interface ChSegmentedControlItem {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * `true` if the control is the not the first or last item in the ch-segmented-control-render.
         */
        "between"?: boolean;
        /**
          * Specifies the caption that the control will display.
         */
        "caption"?: string;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc"?: string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType"?: Exclude<ImageRender, "img">;
        /**
          * `true` if the control is the first item in the ch-segmented-control-render.
         */
        "first"?: boolean;
        /**
          * `true` if the control is the last item in the ch-segmented-control-render.
         */
        "last"?: boolean;
        /**
          * Fired when the control is selected by user interaction.
         */
        "onSelectedChange"?: (event: ChSegmentedControlItemCustomEvent<string>) => void;
        /**
          * Specifies if the control is selected.
         */
        "selected"?: boolean;
        /**
          * Specifies the src of the start image.
         */
        "startImgSrc"?: string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType"?: Exclude<ImageRender, "img">;
    }
    /**
     * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
     */
    interface ChSegmentedControlRender {
        /**
          * Specifies the parts that are exported by the internal segmented-control-item. This property is useful to override the exported parts.
         */
        "exportParts"?: string;
        /**
          * A CSS class to set as the `ch-segmented-control-item` element class. This default class is used for the items that don't have an explicit class.
         */
        "itemCssClass"?: string;
        /**
          * This property lets you define the items of the ch-segmented-control-render control.
         */
        "items"?: SegmentedControlItem[];
        /**
          * Fired when the selected item change. It contains the information about the new selected id.
         */
        "onSelectedItemChange"?: (event: ChSegmentedControlRenderCustomEvent<string>) => void;
        /**
          * Specifies the ID of the selected item
         */
        "selectedId"?: string;
    }
    interface ChSelect {
        "arrowIconSrc"?: string;
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: false;
        "disabled"?: boolean;
        "height"?: string;
        "iconSrc"?: string;
        "name"?: string;
        /**
          * @type EventEmitter * Track component events (I.e. activation of dropdown component)
         */
        "onOnToggle"?: (event: ChSelectCustomEvent<any>) => void;
        /**
          * Emmits the item id
         */
        "onOptionClickedEvent"?: (event: ChSelectCustomEvent<any>) => void;
        "width"?: string;
    }
    interface ChSelectOption {
        /**
          * If enabled, the option icons will display its inherent/natural color
         */
        "autoColor"?: true;
        /**
          * Determines if the option is disabled
         */
        "disabled"?: boolean;
        "height"?: string;
        /**
          * Set the left side icon
         */
        "leftIconSrc"?: string;
        /**
          * Emits the item id
         */
        "onItemClicked"?: (event: ChSelectOptionCustomEvent<any>) => void;
        /**
          * Set the right side icon
         */
        "rightIconSrc"?: string;
        /**
          * Determines the selected option
         */
        "selected"?: boolean;
        /**
          * The select option's value
         */
        "value"?: string;
    }
    interface ChShortcuts {
        /**
          * Key to show shortcut tooltips.
         */
        "showKey"?: "F10";
        /**
          * The URL of the shortcut definitions.
         */
        "src": string;
        /**
          * Suspend shortcuts.
         */
        "suspend"?: boolean;
    }
    interface ChShowcase {
        /**
          * Specifies the name of the control.
         */
        "componentName"?: string;
        /**
          * Specifies the title for the current showcase.
         */
        "pageName"?: string;
        /**
          * Specifies the HTML directory where the showcase for the control is placed.
         */
        "pageSrc"?: string;
        /**
          * Specifies the theme used in the iframe of the control
         */
        "theme"?: "light" | "dark";
    }
    interface ChSidebar {
        "expandButtonAccessibleName"?: string;
        /**
          * Specifies whether the control is expanded or collapsed.
         */
        "expanded"?: boolean;
        /**
          * Emitted when the element is clicked or the space key is pressed and released.
         */
        "onExpandedChange"?: (event: ChSidebarCustomEvent<boolean>) => void;
        /**
          * `true` to display a expandable button at the bottom of the control.
         */
        "showExpandButton"?: boolean;
    }
    interface ChSidebarMenu {
        /**
          * The active item
         */
        "activeItem"?: string;
        /**
          * The initial active item (optional)
         */
        "activeItemId"?: string;
        /**
          * Determines if the menu can be collapsed
         */
        "collapsible"?: boolean;
        /**
          * Allows to set the distance to the top of the page on the menu
         */
        "distanceToTop"?: number;
        /**
          * Determines if the menu is collapsed
         */
        "isCollapsed"?: boolean;
        /**
          * The menu title
         */
        "menuTitle"?: string;
        "onCollapseBtnClicked"?: (event: ChSidebarMenuCustomEvent<any>) => void;
        "onItemClicked"?: (event: ChSidebarMenuCustomEvent<any>) => void;
        /**
          * The presence of this attribute allows the menu to have only one list opened at the same time
         */
        "singleListOpen"?: boolean;
    }
    interface ChSidebarMenuList {
    }
    interface ChSidebarMenuListItem {
        /**
          * If enabled, the icon will display its inherent/natural color
         */
        "autoColor"?: boolean;
        /**
          * The first list item icon (optional)
         */
        "itemIconSrc"?: string;
        /**
          * Emmits the item id
         */
        "onItemClickedEvent"?: (event: ChSidebarMenuListItemCustomEvent<any>) => void;
        /**
          * If this attribute is present the item will be initially uncollapsed
         */
        "uncollapsed"?: boolean;
    }
    /**
     * The slider control is a input where the user selects a value from within a given range.
     */
    interface ChSlider {
        /**
          * Specifies a short string, typically 1 to 3 words, that authors associate with an element to provide users of assistive technologies with a label for the element.
         */
        "accessibleName"?: string;
        /**
          * This attribute allows you specify if the element is disabled. If disabled, it will not trigger any user interaction related event (for example, click event).
         */
        "disabled"?: false;
        /**
          * This attribute lets you specify maximum value of the slider.
         */
        "maxValue"?: number;
        /**
          * This attribute lets you specify minimum value of the slider.
         */
        "minValue"?: number;
        /**
          * The `change` event is emitted when a change to the element's value is committed by the user.
         */
        "onChange"?: (event: ChSliderCustomEvent<number>) => void;
        /**
          * The `input` event is fired synchronously when the value is changed.
         */
        "onInput"?: (event: ChSliderCustomEvent<number>) => void;
        /**
          * This attribute lets you indicate whether the control should display a bubble with the current value upon interaction.
         */
        "showValue"?: false;
        /**
          * This attribute lets you specify the step of the slider.  This attribute is useful when the values of the slider can only take some discrete values. For example, if valid values are `[10, 20, 30]` set the `minValue` to `10`, the maxValue to `30`, and the step to `10`. If the step is `0`, the any intermediate value is valid.
         */
        "step"?: number;
        /**
          * The value of the control.
         */
        "value"?: number;
    }
    interface ChStepList {
    }
    interface ChStepListItem {
        /**
          * Set the left side icon
         */
        "iconSrc"?: string;
        /**
          * Emits the item id
         */
        "onItemClicked"?: (event: ChStepListItemCustomEvent<any>) => void;
    }
    /**
     * It allows to include styles in the shadow-root of chameleon components,
     * for example, to style the scrollbars.
     * Use it in a similar way to the html STYLE tag or
     * referencing an external stylesheet in a similar way to the html LINK tag.
     */
    interface ChStyle {
        /**
          * Specifies the location of the stylesheet document
         */
        "href"?: string;
    }
    interface ChSuggest {
        /**
          * If true, it will position the cursor at the end when the input is focused.
         */
        "cursorEnd"?: false;
        /**
          * The debounce amount in milliseconds (This is the time the suggest waits after the user has finished typing, to show the suggestions).
         */
        "debounce"?: number;
        /**
          * The label
         */
        "label"?: string;
        /**
          * The label position
         */
        "labelPosition"?: LabelPosition;
        /**
          * This event is emitted when an item was selected.
         */
        "onSelectionChanged"?: (event: ChSuggestCustomEvent<SuggestItemSelectedEvent>) => void;
        /**
          * This event is emitted every time there input events fires, and it emits the actual input value.
         */
        "onValueChanged"?: (event: ChSuggestCustomEvent<string>) => void;
        /**
          * Wether or not the suggest has a header. The header will show the "suggestTitle" if provided, and a close button.
         */
        "showHeader"?: false;
        /**
          * Whether or not to display the label
         */
        "showLabel"?: boolean;
        /**
          * The suggest title (optional). This is not the same as the "label", rather, this is the title that will appear inside the dropdown. This title will only be visible if "showHeader" is set to true.
         */
        "suggestTitle"?: string;
        /**
          * This is the suggest value.
         */
        "value"?: string;
    }
    interface ChSuggestList {
        /**
          * The label
         */
        "label"?: string;
    }
    interface ChSuggestListItem {
        /**
          * The icon url
         */
        "iconSrc"?: string;
        /**
          * This event is emitted every time the item is about to lose focus, by pressing the "ArrowUp" or "ArrowDown" keyboard keys.
         */
        "onFocusChangeAttempt"?: (event: ChSuggestListItemCustomEvent<FocusChangeAttempt>) => void;
        /**
          * This event is emitted every time the item is selected, either by clicking on it, or by pressing Enter.
         */
        "onItemSelected"?: (event: ChSuggestListItemCustomEvent<SuggestItemSelectedEvent1>) => void;
        /**
          * The item value
         */
        "value"?: any;
    }
    interface ChTestFlexibleLayout {
        /**
          * Specifies the distribution of the items in the flexible layout.
         */
        "layout"?: FlexibleLayout;
    }
    interface ChTestSuggest {
        /**
          * Callback invoked when user writes on object selector input, return possible options to show in autocomplete list
         */
        "selectorSourceCallback"?: (
    prefix: string
  ) => Promise<SelectorCategoryData[]>;
    }
    interface ChTextblock {
        /**
          * It specifies the format that will have the textblock control.   - If `format` = `HTML`, the textblock control works as an HTML div and    the innerHTML will be taken from the default slot.   - If `format` = `Text`, the control works as a normal textblock control    and it is affected by most of the defined properties.
         */
        "format"?: "Text" | "HTML";
        /**
          * True to cut text when it overflows, showing an ellipsis.
         */
        "lineClamp"?: boolean;
        /**
          * Determine the tooltip text that will be displayed when the pointer is over the control
         */
        "tooltip"?: string;
        /**
          * Determine the way that the tooltip text will be displayed
         */
        "tooltipShowMode"?: "always" | "line-clamp";
    }
    /**
     * It allows you to load a style sheet in a similar way to the
     * native LINK or STYLE tags, but assigning it a name so that
     * it can be reused in different contexts,
     * either in the Document or in a Shadow-Root.
     */
    interface ChTheme {
        /**
          * A string containing the baseURL used to resolve relative URLs in the stylesheet
         */
        "baseUrl"?: string;
        /**
          * Specifies the location of the stylesheet theme
         */
        "href"?: string;
        /**
          * Indicates whether the theme has successfully loaded
         */
        "loaded"?: boolean;
        /**
          * Specifies the name of the theme to instantiate
         */
        "name"?: string;
        /**
          * Event emitted when the theme has successfully loaded
         */
        "onThemeLoaded"?: (event: ChThemeCustomEvent<ChThemeLoadedEvent>) => void;
    }
    interface ChTimer {
        /**
          * Sets the accesible name of the timer.
         */
        "accessibleName"?: string;
        /**
          * Sets the animationTime to set the custom var for the css animation.
         */
        "animationTime"?: number;
        /**
          * Sets the presented property to handle the component presentation.
         */
        "presented"?: boolean;
        /**
          * Sets the progress propiety to determine the progress.
         */
        "progress"?: number;
    }
    interface ChTooltip {
        /**
          * Specifies the delay (in ms) for the tooltip to be displayed.
         */
        "delay"?: number;
        /**
          * Specifies the position of the tooltip relative to the container element.
         */
        "position"?: | "OutsideStart_OutsideStart"
    | "InsideStart_OutsideStart"
    | "Center_OutsideStart"
    | "InsideEnd_OutsideStart"
    | "OutsideEnd_OutsideStart"
    | "OutsideStart_InsideStart"
    | "OutsideEnd_InsideStart"
    | "OutsideStart_Center"
    | "OutsideEnd_Center"
    | "OutsideStart_InsideEnd"
    | "OutsideEnd_InsideEnd"
    | "OutsideStart_OutsideEnd"
    | "InsideStart_OutsideEnd"
    | "Center_OutsideEnd"
    | "InsideEnd_OutsideEnd"
    | "OutsideEnd_OutsideEnd";
        /**
          * Specifies the tooltip description.
         */
        "tooltipId"?: string;
    }
    interface ChTree {
        /**
          * Set this attribute if you want all this tree tree-items to have a checkbox
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want all this tree tree-items to have the checkbox checked
         */
        "checked"?: boolean;
        /**
          * Set this attribute if you want all the childen item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unckecked.
         */
        "toggleCheckboxes"?: boolean;
    }
    interface ChTreeItem {
        /**
          * Set this attribute if you want the ch-tree-item to display a checkbox
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want the ch-tree-item checkbox to be checked by default
         */
        "checked"?: boolean;
        "disabled"?: boolean;
        /**
          * Set this attribute if this tree-item has a resource to be downloaded;
         */
        "download"?: boolean;
        /**
          * Set this attribute when you have downloaded the resource
         */
        "downloaded"?: boolean;
        /**
          * Set this attribute when you are downloading a resource
         */
        "downloading"?: boolean;
        "firstTreeItem"?: boolean;
        "hasChildTree"?: boolean;
        "indeterminate"?: boolean;
        /**
          * The presence of this attribute displays a +/- icon to toggle/untoggle the tree
         */
        "isLeaf"?: boolean;
        /**
          * Set the left side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "leftIcon"?: string;
        /**
          * Emits the checkbox information (chTreeItemData) that includes: the id, name(innerText) and checkbox value.
         */
        "onCheckboxClickedEvent"?: (event: ChTreeItemCustomEvent<chTreeItemData>) => void;
        "onLiItemClicked"?: (event: ChTreeItemCustomEvent<any>) => void;
        "onToggleIconClicked"?: (event: ChTreeItemCustomEvent<any>) => void;
        /**
          * If this tree-item has a nested tree, set this attribute to make the tree open by default
         */
        "opened"?: boolean;
        /**
          * Set thhe right side icon from the available Gemini icon set : https://gx-gemini.netlify.app/?path=/story/icons-icons--controls
         */
        "rightIcon"?: string;
        /**
          * The presence of this attribute sets the tree-item as selected
         */
        "selected"?: boolean;
    }
    interface ChTreeView {
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection"?: boolean;
        /**
          * Fired when an element attempts to enter in a droppable zone where the tree has no information about the validity of the drop.
         */
        "onDroppableZoneEnter"?: (event: ChTreeViewCustomEvent<TreeViewDropCheckInfo>) => void;
        /**
          * Fired when an item is expanded or collapsed.
         */
        "onExpandedItemChange"?: (event: ChTreeViewCustomEvent<TreeViewItemExpandedInfo>) => void;
        /**
          * Fired when an element displays its contextmenu.
         */
        "onItemContextmenu"?: (event: ChTreeViewCustomEvent<TreeViewItemContextMenu>) => void;
        /**
          * Fired when the dragged items are dropped in another item of the tree.
         */
        "onItemsDropped"?: (event: ChTreeViewCustomEvent<TreeViewDataTransferInfo>) => void;
        /**
          * Fired when the selected items change.
         */
        "onSelectedItemsChange"?: (event: ChTreeViewCustomEvent<Map<string, TreeViewItemSelectedInfo>>) => void;
        /**
          * This property lets you specify the time (in ms) that the mouse must be over in a subtree to open it when dragging.
         */
        "openSubTreeCountdown"?: number;
        /**
          * `true` to scroll in the tree when dragging an item near the edges of the tree.
         */
        "scrollToEdgeOnDrag"?: boolean;
        /**
          * Callback that is executed to get the current selected items.
         */
        "selectedItemsCallback"?: () => Map<
    string,
    TreeViewItemSelectedInfo
  >;
        /**
          * This property lets you specify if the tree is waiting to process the drop of items.
         */
        "waitDropProcessing"?: boolean;
    }
    interface ChTreeViewDrop {
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState"?: DragState;
        /**
          * Level in the tree at which the item is placed.
         */
        "level"?: number;
        /**
          * Specifies the id of the tree item that this element controls.
         */
        "treeItemId"?: string;
        /**
          * Specifies the type of drop that is performed over the control.
         */
        "type"?: Exclude<TreeViewDropType, "above">;
    }
    interface ChTreeViewItem {
        /**
          * This attributes specifies the caption of the control
         */
        "caption"?: string;
        /**
          * Set this attribute if you want display a checkbox in the control.
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want the checkbox to be checked by default. Only works if `checkbox = true`
         */
        "checked"?: boolean;
        /**
          * Set this attribute if you want to set a custom render for the control, by passing a slot.
         */
        "customRender"?: boolean;
        /**
          * This attribute lets you specify if the element is disabled. If disabled, it will not fire any user interaction related event (for example, click event).
         */
        "disabled"?: boolean;
        /**
          * This attribute lets you specify when items are being lazy loaded in the control.
         */
        "downloading"?: boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in the control. If `true`, the control can't be dragged.
         */
        "dragDisabled"?: boolean;
        /**
          * This property lets you define the current state of the item when it's being dragged.
         */
        "dragState"?: DragState1;
        /**
          * This attribute lets you specify if the drop operation is disabled in the control. If `true`, the control won't accept any drops.
         */
        "dropDisabled"?: boolean;
        /**
          * This attribute lets you specify if the edit operation is enabled in the control. If `true`, the control can edit its caption in place.
         */
        "editable"?: boolean;
        /**
          * Set this attribute when the item is in edit mode
         */
        "editing"?: boolean;
        /**
          * Specifies the src of the end image.
         */
        "endImgSrc"?: string;
        /**
          * Specifies how the end image will be rendered.
         */
        "endImgType"?: ImageRender;
        /**
          * `true` to expand the control on click interaction. If `false`, with mouse interaction the control will only be expanded on double click.
         */
        "expandOnClick"?: boolean;
        /**
          * Specifies what kind of expandable button is displayed. Only works if `leaf === false`.  - `"expandableButton"`: Expandable button that allows to expand/collapse     the items of the control.  - `"decorative"`: Only a decorative icon is rendered to display the state     of the item.
         */
        "expandableButton"?: "action" | "decorative" | "no";
        /**
          * If the item has a sub-tree, this attribute determines if the subtree is displayed.
         */
        "expanded"?: boolean;
        /**
          * `true` if the checkbox's value is indeterminate.
         */
        "indeterminate"?: boolean;
        /**
          * This attribute specifies if the control is the last items in its subtree
         */
        "lastItem"?: boolean;
        /**
          * Determine if the items are lazy loaded when opening the first time the control.
         */
        "lazyLoad"?: boolean;
        /**
          * The presence of this attribute determine whether the item contains a subtree. `true` if the item does not have a subtree.
         */
        "leaf"?: boolean;
        /**
          * Level in the tree at which the item is placed.
         */
        "level"?: number;
        /**
          * This attribute represents additional info for the control that is included when dragging the item.
         */
        "metadata"?: string;
        /**
          * Fired when the checkbox value of the control is changed.
         */
        "onCheckboxChange"?: (event: ChTreeViewItemCustomEvent<TreeViewItemCheckedInfo>) => void;
        /**
          * Fired when the checkbox value of the control is changed. This event only applies when the control has `toggleCheckboxes = true`
         */
        "onCheckboxToggleChange"?: (event: ChTreeViewItemCustomEvent<TreeViewItemCheckedInfo>) => void;
        /**
          * Fired when the item is no longer being dragged.
         */
        "onItemDragEnd"?: (event: ChTreeViewItemCustomEvent<any>) => void;
        /**
          * Fired when the item is being dragged.
         */
        "onItemDragStart"?: (event: ChTreeViewItemCustomEvent<TreeViewItemDragStartInfo>) => void;
        /**
          * Fired when the lazy control is expanded an its content must be loaded.
         */
        "onLoadLazyContent"?: (event: ChTreeViewItemCustomEvent<string>) => void;
        /**
          * Fired when the item is asking to modify its caption.
         */
        "onModifyCaption"?: (event: ChTreeViewItemCustomEvent<TreeViewItemNewCaption>) => void;
        /**
          * Fired when the user interacts with the control in a way that its reference must be opened.
         */
        "onOpenReference"?: (event: ChTreeViewItemCustomEvent<TreeViewItemOpenReferenceInfo>) => void;
        /**
          * Fired when the selected state is updated by user interaction on the control.
         */
        "onSelectedItemChange"?: (event: ChTreeViewItemCustomEvent<TreeViewItemSelected>) => void;
        /**
          * Specifies a set of parts to use in every DOM element of the control.
         */
        "parts"?: string;
        /**
          * This attribute lets you specify if the item is selected
         */
        "selected"?: boolean;
        /**
          * `true` to show the downloading spinner when lazy loading the sub items of the control.
         */
        "showDownloadingSpinner"?: boolean;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines"?: TreeViewLines;
        /**
          * Specifies the src of the start image.
         */
        "startImgSrc"?: string;
        /**
          * Specifies how the start image will be rendered.
         */
        "startImgType"?: ImageRender;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked.
         */
        "toggleCheckboxes"?: boolean;
    }
    interface ChTreeViewRender {
        /**
          * Callback that is executed when an element tries to drop in another item of the tree. Returns whether the drop is valid.
         */
        "checkDroppableZoneCallback"?: (
    dropInformation: TreeViewDropCheckInfo
  ) => Promise<boolean>;
        /**
          * Set this attribute if you want display a checkbox in all items by default.
         */
        "checkbox"?: boolean;
        /**
          * Set this attribute if you want the checkbox to be checked in all items by default. Only works if `checkbox = true`
         */
        "checked"?: boolean;
        /**
          * This attribute lets you specify if the drag operation is disabled in all items by default. If `true`, the items can't be dragged.
         */
        "dragDisabled"?: boolean;
        /**
          * This attribute lets you specify if the drop operation is disabled in all items by default. If `true`, the items won't accept any drops.
         */
        "dropDisabled"?: boolean;
        /**
          * Callback that is executed when a list of items request to be dropped into another item.
         */
        "dropItemsCallback"?: (
    dataTransferInfo: TreeViewDataTransferInfo
  ) => Promise<{ acceptDrop: boolean; items?: TreeViewItemModel[] }>;
        /**
          * This attribute lets you specify which kind of drop operation can be effected in the items.
         */
        "dropMode"?: "above" | "before-and-after" | "all";
        /**
          * This attribute lets you specify if the edit operation is enabled in all items by default. If `true`, the items can edit its caption in place.
         */
        "editableItems"?: boolean;
        /**
          * Specifies if a tree-view-item is expanded on click interaction. If `true` the tree-view-item is expanded on click interaction. If `false`, with mouse interaction the tree-view-item will only be expanded on double click.
         */
        "expandOnClick"?: boolean;
        /**
          * Specifies what kind of expandable button is displayed in the items by default.  - `"expandableButton"`: Expandable button that allows to expand/collapse     the items of the control.  - `"decorative"`: Only a decorative icon is rendered to display the state     of the item.
         */
        "expandableButton"?: "action" | "decorative" | "no";
        /**
          * This property lets you determine the expression that will be applied to the filter. Only works if `filterType = "caption" | "metadata"`.
         */
        "filter"?: string;
        /**
          * This property lets you determine the debounce time (in ms) that the control waits until it processes the changes to the filter property. Consecutive changes to the `filter` property between this range, reset the timeout to process the filter. Only works if `filterType = "caption" | "metadata"`.
         */
        "filterDebounce"?: number;
        /**
          * This property lets you determine the list of items that will be filtered. Only works if `filterType = "list"`.
         */
        "filterList"?: string[];
        /**
          * This property lets you determine the options that will be applied to the filter.
         */
        "filterOptions"?: TreeViewFilterOptions;
        /**
          * This attribute lets you define what kind of filter is applied to items. Only items that satisfy the filter predicate will be displayed.  | Value       | Details                                                                                        | | ----------- | ---------------------------------------------------------------------------------------------- | | `checked`   | Show only the items that have a checkbox and are checked.                                      | | `unchecked` | Show only the items that have a checkbox and are not checked.                                  | | `caption`   | Show only the items whose `caption` satisfies the regex determinate by the `filter` property.  | | `metadata`  | Show only the items whose `metadata` satisfies the regex determinate by the `filter` property. | | `list`      | Show only the items that are contained in the array determinate by the `filterList` property.  | | `none`      | Show all items.                                                                                |
         */
        "filterType"?: TreeViewFilterType;
        /**
          * This property specifies a callback that is executed when the path for an item image needs to be resolved. With this callback, there is no need to re-implement item rendering (`renderItem` property) just to change the path used for the images.
         */
        "getImagePathCallback"?: TreeViewImagePathCallback;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxImageConstructor"?: (name: string) => any;
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "gxSettings"?: any;
        /**
          * Callback that is executed when a item request to load its subitems.
         */
        "lazyLoadTreeItemsCallback"?: LazyLoadTreeItemsCallback;
        /**
          * Callback that is executed when a item request to modify its caption.
         */
        "modifyItemCaptionCallback"?: (
    treeItemId: string,
    newCaption: string
  ) => Promise<TreeViewOperationStatusModifyCaption>;
        /**
          * Set this attribute if you want to allow multi selection of the items.
         */
        "multiSelection"?: boolean;
        /**
          * Fired when the checked items change. This event does take into account the currently filtered items.
         */
        "onCheckedItemsChange"?: (event: ChTreeViewRenderCustomEvent<Map<string, TreeViewItemModelExtended>>) => void;
        /**
          * Fired when an element displays its contextmenu.
         */
        "onItemContextmenu"?: (event: ChTreeViewRenderCustomEvent<TreeViewItemContextMenu>) => void;
        /**
          * Fired when the user interacts with an item in a way that its reference must be opened.
         */
        "onItemOpenReference"?: (event: ChTreeViewRenderCustomEvent<TreeViewItemOpenReferenceInfo>) => void;
        /**
          * Fired when the selected items change. This event can be fired by the following conditions:   1. A user changes the selected items interacting with the Tree View.    2. The `multiSelection` value is changed from `true` to `false`.    3. A selected item is no longer rendered because it does not satisfies a      filter condition.    4. TODO: The `treeModel` property is updated and contains different selected      items. Even if it does not contains different selected items, this      event is fired because the selected items can have a different path      than before the `treeModel` update.    5. The `updateItemsProperties` method is executed, changing the item      selection.    6. A selected item is removed.    7. TODO: A selected item is moved into a new parent with drag and drop.      In this case, since the detail of the event contains the information      of the parent, this event must be fired to update the information.    8. Executing `scrollIntoVisible` method and updating the selected value      of the scrolled item.    9. TODO: An external item is dropped into the Tree View and the item is      selected.   10. TODO: Lazy loading content that has selected items?  Thing that does not fire this event:   - TODO: Renaming a selected item.    - TODO: Applying a filter that keeps all selected items rendered.
         */
        "onSelectedItemsChange"?: (event: ChTreeViewRenderCustomEvent<TreeViewItemModelExtended[]>) => void;
        /**
          * This property allows us to implement custom rendering of tree items.
         */
        "renderItem"?: (
    itemModel: TreeViewItemModel | any,
    treeState: ChTreeViewRender,
    treeHasFilter: boolean,
    lastItem: boolean,
    level: number,
    dropBeforeAndAfterEnabled: boolean,
    useGxRender?: boolean
  ) => any;
        /**
          * `true` to display the relation between tree items and tree lists using lines.
         */
        "showLines"?: TreeViewLines;
        /**
          * Callback that is executed when the treeModel is changed to order its items.
         */
        "sortItemsCallback"?: (subModel: TreeViewItemModel[]) => void;
        /**
          * Set this attribute if you want all the children item's checkboxes to be checked when the parent item checkbox is checked, or to be unchecked when the parent item checkbox is unchecked. This attribute will be used in all items by default.
         */
        "toggleCheckboxes"?: boolean;
        /**
          * This property lets you define the model of the ch-tree-view-render control.
         */
        "treeModel"?: TreeViewItemModel[];
        /**
          * This property is a WA to implement the Tree View as a UC 2.0 in GeneXus.
         */
        "useGxRender"?: boolean;
    }
    /**
     * The 'ch-window' component represents a popup container that is positioned
     * relative to an element or the screen.
     */
    interface ChWindow {
        /**
          * Specifies the drag behavior of the window.
         */
        "allowDrag"?: "no" | "header" | "box";
        /**
          * The caption or title of the window.
         */
        "caption"?: string;
        /**
          * Determines whether the window should close when the Escape key is pressed.
         */
        "closeOnEscape"?: boolean;
        /**
          * Determines whether the window should close when clicked outside.
         */
        "closeOnOutsideClick"?: boolean;
        /**
          * The text for the close button.
         */
        "closeText"?: string;
        /**
          * The tooltip text for the close button.
         */
        "closeTooltip"?: string;
        /**
          * The container element for the window.
         */
        "container"?: HTMLElement;
        /**
          * Determines if the window is hidden or visible.
         */
        "hidden"?: boolean;
        /**
          * Specifies whether the window should be displayed as a modal.
         */
        "modal"?: boolean;
        /**
          * Emitted when the window is closed.
         */
        "onWindowClosed"?: (event: ChWindowCustomEvent<any>) => void;
        /**
          * Emitted when the window is opened.
         */
        "onWindowOpened"?: (event: ChWindowCustomEvent<any>) => void;
        /**
          * This attribute lets you specify if a footer is rendered at the bottom of the window.
         */
        "showFooter"?: boolean;
        /**
          * This attribute lets you specify if a header is rendered on top of the window.
         */
        "showHeader"?: boolean;
        /**
          * This attribute lets you specify if a div wrapper is rendered for the default slot.
         */
        "showMain"?: boolean;
        /**
          * This attribute lets you specify if a div between the container and the window space.
         */
        "showSeparation"?: boolean;
        /**
          * The horizontal alignment of the window.
         */
        "xAlign"?: ChWindowAlign;
        /**
          * The vertical alignment of the window.
         */
        "yAlign"?: ChWindowAlign;
    }
    /**
     * The 'ch-window-close' component represents the close button for the 'ch-window' component.
     */
    interface ChWindowClose {
        /**
          * Specifies whether the close button is disabled.
         */
        "disabled"?: boolean;
        /**
          * Emitted when the close button is clicked.
         */
        "onWindowCloseClicked"?: (event: ChWindowCloseCustomEvent<any>) => void;
    }
    interface GxGridChameleon {
        /**
          * The GxGrid instance representing the data to be displayed in the grid.
         */
        "grid": GxGrid;
        /**
          * The timestamp indicating the time when the grid was last updated.
         */
        "gridTimestamp"?: number;
        /**
          * The UI state of the Grid.
         */
        "state"?: GridChameleonState;
    }
    /**
     * Represents a component that provides filtering controls for a grid column.
     */
    interface GxGridChameleonColumnFilter {
        /**
          * The text to display on the "Apply" button.
         */
        "buttonApplyText"?: string;
        /**
          * The text to display on the "Reset" button.
         */
        "buttonResetText"?: string;
        /**
          * The grid column associated with this filter.
         */
        "column": GxGridColumn;
        /**
          * The value to filter for equality comparison.
         */
        "equal"?: string;
        /**
          * The value to filter for greater-than comparison.
         */
        "greater"?: string;
        /**
          * The value to filter for less-than comparison.
         */
        "less"?: string;
        /**
          * Emitted when the filter settings for the column have changed. This event carries the updated filter values.
         */
        "onColumnSettingsChanged"?: (event: GxGridChameleonColumnFilterCustomEvent<GridChameleonColumnFilterChanged>) => void;
    }
    interface IntrinsicElements {
        "ch-accordion": ChAccordion;
        "ch-action-group": ChActionGroup;
        "ch-action-group-item": ChActionGroupItem;
        "ch-action-group-render": ChActionGroupRender;
        "ch-alert": ChAlert;
        "ch-barcode-scanner": ChBarcodeScanner;
        "ch-checkbox": ChCheckbox;
        "ch-code-editor": ChCodeEditor;
        "ch-combo-box": ChComboBox;
        "ch-dialog": ChDialog;
        "ch-dropdown": ChDropdown;
        "ch-dropdown-render": ChDropdownRender;
        "ch-flexible-layout": ChFlexibleLayout;
        "ch-flexible-layout-render": ChFlexibleLayoutRender;
        "ch-form-checkbox": ChFormCheckbox;
        "ch-grid": ChGrid;
        "ch-grid-action-refresh": ChGridActionRefresh;
        "ch-grid-action-settings": ChGridActionSettings;
        "ch-grid-actionbar": ChGridActionbar;
        "ch-grid-column": ChGridColumn;
        "ch-grid-column-display": ChGridColumnDisplay;
        "ch-grid-column-resize": ChGridColumnResize;
        "ch-grid-column-settings": ChGridColumnSettings;
        "ch-grid-columnset": ChGridColumnset;
        "ch-grid-infinite-scroll": ChGridInfiniteScroll;
        "ch-grid-row-actions": ChGridRowActions;
        "ch-grid-rowset-empty": ChGridRowsetEmpty;
        "ch-grid-rowset-legend": ChGridRowsetLegend;
        "ch-grid-settings": ChGridSettings;
        "ch-grid-settings-columns": ChGridSettingsColumns;
        "ch-grid-virtual-scroller": ChGridVirtualScroller;
        "ch-icon": ChIcon;
        "ch-intersection-observer": ChIntersectionObserver;
        "ch-layout-splitter": ChLayoutSplitter;
        "ch-list": ChList;
        "ch-markdown": ChMarkdown;
        "ch-next-data-modeling": ChNextDataModeling;
        "ch-next-data-modeling-item": ChNextDataModelingItem;
        "ch-next-data-modeling-render": ChNextDataModelingRender;
        "ch-next-progress-bar": ChNextProgressBar;
        "ch-notifications": ChNotifications;
        "ch-notifications-item": ChNotificationsItem;
        "ch-paginator": ChPaginator;
        "ch-paginator-navigate": ChPaginatorNavigate;
        "ch-paginator-pages": ChPaginatorPages;
        "ch-popover": ChPopover;
        "ch-qr": ChQr;
        "ch-radio-group-render": ChRadioGroupRender;
        "ch-segmented-control-item": ChSegmentedControlItem;
        "ch-segmented-control-render": ChSegmentedControlRender;
        "ch-select": ChSelect;
        "ch-select-option": ChSelectOption;
        "ch-shortcuts": ChShortcuts;
        "ch-showcase": ChShowcase;
        "ch-sidebar": ChSidebar;
        "ch-sidebar-menu": ChSidebarMenu;
        "ch-sidebar-menu-list": ChSidebarMenuList;
        "ch-sidebar-menu-list-item": ChSidebarMenuListItem;
        "ch-slider": ChSlider;
        "ch-step-list": ChStepList;
        "ch-step-list-item": ChStepListItem;
        "ch-style": ChStyle;
        "ch-suggest": ChSuggest;
        "ch-suggest-list": ChSuggestList;
        "ch-suggest-list-item": ChSuggestListItem;
        "ch-test-flexible-layout": ChTestFlexibleLayout;
        "ch-test-suggest": ChTestSuggest;
        "ch-textblock": ChTextblock;
        "ch-theme": ChTheme;
        "ch-timer": ChTimer;
        "ch-tooltip": ChTooltip;
        "ch-tree": ChTree;
        "ch-tree-item": ChTreeItem;
        "ch-tree-view": ChTreeView;
        "ch-tree-view-drop": ChTreeViewDrop;
        "ch-tree-view-item": ChTreeViewItem;
        "ch-tree-view-render": ChTreeViewRender;
        "ch-window": ChWindow;
        "ch-window-close": ChWindowClose;
        "gx-grid-chameleon": GxGridChameleon;
        "gx-grid-chameleon-column-filter": GxGridChameleonColumnFilter;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "ch-accordion": LocalJSX.ChAccordion & JSXBase.HTMLAttributes<HTMLChAccordionElement>;
            "ch-action-group": LocalJSX.ChActionGroup & JSXBase.HTMLAttributes<HTMLChActionGroupElement>;
            "ch-action-group-item": LocalJSX.ChActionGroupItem & JSXBase.HTMLAttributes<HTMLChActionGroupItemElement>;
            "ch-action-group-render": LocalJSX.ChActionGroupRender & JSXBase.HTMLAttributes<HTMLChActionGroupRenderElement>;
            "ch-alert": LocalJSX.ChAlert & JSXBase.HTMLAttributes<HTMLChAlertElement>;
            /**
             * This component allows you to scan a wide variety of types of barcode and QR
             * codes.
             */
            "ch-barcode-scanner": LocalJSX.ChBarcodeScanner & JSXBase.HTMLAttributes<HTMLChBarcodeScannerElement>;
            "ch-checkbox": LocalJSX.ChCheckbox & JSXBase.HTMLAttributes<HTMLChCheckboxElement>;
            "ch-code-editor": LocalJSX.ChCodeEditor & JSXBase.HTMLAttributes<HTMLChCodeEditorElement>;
            "ch-combo-box": LocalJSX.ChComboBox & JSXBase.HTMLAttributes<HTMLChComboBoxElement>;
            /**
             * The `ch-dialog` component represents a modal or non-modal dialog box or other
             * interactive component.
             */
            "ch-dialog": LocalJSX.ChDialog & JSXBase.HTMLAttributes<HTMLChDialogElement>;
            "ch-dropdown": LocalJSX.ChDropdown & JSXBase.HTMLAttributes<HTMLChDropdownElement>;
            "ch-dropdown-render": LocalJSX.ChDropdownRender & JSXBase.HTMLAttributes<HTMLChDropdownRenderElement>;
            "ch-flexible-layout": LocalJSX.ChFlexibleLayout & JSXBase.HTMLAttributes<HTMLChFlexibleLayoutElement>;
            "ch-flexible-layout-render": LocalJSX.ChFlexibleLayoutRender & JSXBase.HTMLAttributes<HTMLChFlexibleLayoutRenderElement>;
            "ch-form-checkbox": LocalJSX.ChFormCheckbox & JSXBase.HTMLAttributes<HTMLChFormCheckboxElement>;
            /**
             * The `ch-grid` component represents a Grid/TreeGrid of data, with rows and cells.
             */
            "ch-grid": LocalJSX.ChGrid & JSXBase.HTMLAttributes<HTMLChGridElement>;
            /**
             * The `ch-grid-action-refresh` component represents a refresh button for a grid action bar.
             */
            "ch-grid-action-refresh": LocalJSX.ChGridActionRefresh & JSXBase.HTMLAttributes<HTMLChGridActionRefreshElement>;
            /**
             * The `ch-grid-action-settings` component represents a settings button for a grid action bar.
             */
            "ch-grid-action-settings": LocalJSX.ChGridActionSettings & JSXBase.HTMLAttributes<HTMLChGridActionSettingsElement>;
            /**
             * The `ch-grid-actionbar` component represents a container for a grid actions.
             */
            "ch-grid-actionbar": LocalJSX.ChGridActionbar & JSXBase.HTMLAttributes<HTMLChGridActionbarElement>;
            /**
             * The `ch-grid-column` component represents a grid column.
             */
            "ch-grid-column": LocalJSX.ChGridColumn & JSXBase.HTMLAttributes<HTMLChGridColumnElement>;
            /**
             * The `ch-grid-column-display` component is responsible for determining the
             * visibility of a grid column and updating its hidden property based on
             * whether the monitored class is visible or not.
             */
            "ch-grid-column-display": LocalJSX.ChGridColumnDisplay & JSXBase.HTMLAttributes<HTMLChGridColumnDisplayElement>;
            /**
             * The `ch-grid-column-resize` component responsible for resizing a column in a grid.
             */
            "ch-grid-column-resize": LocalJSX.ChGridColumnResize & JSXBase.HTMLAttributes<HTMLChGridColumnResizeElement>;
            /**
             * The `ch-grid-column-settings` component represents a settings window for a column.
             */
            "ch-grid-column-settings": LocalJSX.ChGridColumnSettings & JSXBase.HTMLAttributes<HTMLChGridColumnSettingsElement>;
            /**
             * The `ch-grid-columnset` component represents a group of columns.
             */
            "ch-grid-columnset": LocalJSX.ChGridColumnset & JSXBase.HTMLAttributes<HTMLChGridColumnsetElement>;
            /**
             * The 'ch-grid-infinite-scroll' provides infinite scroll functionality for a 'ch-grid' component
             */
            "ch-grid-infinite-scroll": LocalJSX.ChGridInfiniteScroll & JSXBase.HTMLAttributes<HTMLChGridInfiniteScrollElement>;
            /**
             * The `ch-grid-row-actions` component represents a group row actions.
             */
            "ch-grid-row-actions": LocalJSX.ChGridRowActions & JSXBase.HTMLAttributes<HTMLChGridRowActionsElement>;
            /**
             * The `ch-grid-rowset-empty` component represents a container to "empty message" when ch-grid-rowset is empty.
             */
            "ch-grid-rowset-empty": LocalJSX.ChGridRowsetEmpty & JSXBase.HTMLAttributes<HTMLChGridRowsetEmptyElement>;
            /**
             * The `ch-grid-rowset-legend` component represents a caption for the `ch-grid-rowset` element.
             */
            "ch-grid-rowset-legend": LocalJSX.ChGridRowsetLegend & JSXBase.HTMLAttributes<HTMLChGridRowsetLegendElement>;
            /**
             * The `ch-grid-settings` component represents a settings window for a grid component.
             */
            "ch-grid-settings": LocalJSX.ChGridSettings & JSXBase.HTMLAttributes<HTMLChGridSettingsElement>;
            /**
             * The `ch-grid-settings-columns` component represents the settings for a grid's columns.
             */
            "ch-grid-settings-columns": LocalJSX.ChGridSettingsColumns & JSXBase.HTMLAttributes<HTMLChGridSettingsColumnsElement>;
            /**
             * The `ch-grid-virtual-scroller` component that displays a subset of items.
             * It optimizes the rendering of large data sets by only rendering the items that are currently visible on the screen
             * based on the viewport size and scroll position.
             */
            "ch-grid-virtual-scroller": LocalJSX.ChGridVirtualScroller & JSXBase.HTMLAttributes<HTMLChGridVirtualScrollerElement>;
            "ch-icon": LocalJSX.ChIcon & JSXBase.HTMLAttributes<HTMLChIconElement>;
            "ch-intersection-observer": LocalJSX.ChIntersectionObserver & JSXBase.HTMLAttributes<HTMLChIntersectionObserverElement>;
            "ch-layout-splitter": LocalJSX.ChLayoutSplitter & JSXBase.HTMLAttributes<HTMLChLayoutSplitterElement>;
            "ch-list": LocalJSX.ChList & JSXBase.HTMLAttributes<HTMLChListElement>;
            /**
             * A control to render markdown syntax. It supports GitHub Flavored Markdown
             * (GFM) and code highlighting.
             *  - It parses the incoming markdown to [mdast](https://github.com/syntax-tree/mdast) using [micromark](https://github.com/micromark/micromark) via [mdast-util-from-markdown](https://github.com/syntax-tree/mdast-util-from-markdown).
             * - After that, it implements a reactivity layer by implementing its own render for the mdast. With this, changes to the input markdown only update the portion of the DOM that changes.
             * - It supports Github Flavored Markdown (GFM) by using [mdast-util-gfm](https://github.com/syntax-tree/mdast-util-gfm) and [micromark-extension-gfm](https://github.com/micromark/micromark-extension-gfm).
             * - It supports code highlight by parsing the incomming code of the markdown to [hast](https://github.com/micromark/micromark-extension-gfm) using [lowlight](lowlight). After that, it implements a reactivity layer by implementing its own render for the hast.
             * - It also supports all programming languages from [highlight.js](https://github.com/highlightjs/highlight.js).
             * - When the code highlighting is needed at runtime, the control will load on demand the code parser and the programming language needed to parse the code.
             */
            "ch-markdown": LocalJSX.ChMarkdown & JSXBase.HTMLAttributes<HTMLChMarkdownElement>;
            "ch-next-data-modeling": LocalJSX.ChNextDataModeling & JSXBase.HTMLAttributes<HTMLChNextDataModelingElement>;
            "ch-next-data-modeling-item": LocalJSX.ChNextDataModelingItem & JSXBase.HTMLAttributes<HTMLChNextDataModelingItemElement>;
            "ch-next-data-modeling-render": LocalJSX.ChNextDataModelingRender & JSXBase.HTMLAttributes<HTMLChNextDataModelingRenderElement>;
            "ch-next-progress-bar": LocalJSX.ChNextProgressBar & JSXBase.HTMLAttributes<HTMLChNextProgressBarElement>;
            "ch-notifications": LocalJSX.ChNotifications & JSXBase.HTMLAttributes<HTMLChNotificationsElement>;
            "ch-notifications-item": LocalJSX.ChNotificationsItem & JSXBase.HTMLAttributes<HTMLChNotificationsItemElement>;
            /**
             * The 'ch-paginator' component represents a paginator control for navigating through pages.
             */
            "ch-paginator": LocalJSX.ChPaginator & JSXBase.HTMLAttributes<HTMLChPaginatorElement>;
            /**
             * The 'ch-paginator-navigate' component represents the navigation buttons for the 'ch-paginator' component.
             */
            "ch-paginator-navigate": LocalJSX.ChPaginatorNavigate & JSXBase.HTMLAttributes<HTMLChPaginatorNavigateElement>;
            /**
             * The 'ch-paginator-pages' component represents the pagination pages for the 'ch-paginator' component.
             */
            "ch-paginator-pages": LocalJSX.ChPaginatorPages & JSXBase.HTMLAttributes<HTMLChPaginatorPagesElement>;
            /**
             * The `ch-popover` component represents a popover container that is positioned
             * relative to an element, but placed on the top layer using `position: fixed`.
             */
            "ch-popover": LocalJSX.ChPopover & JSXBase.HTMLAttributes<HTMLChPopoverElement>;
            "ch-qr": LocalJSX.ChQr & JSXBase.HTMLAttributes<HTMLChQrElement>;
            /**
             * The radio group control is used to render a short list of mutually exclusive options.
             * It contains radio items to allow users to select one option from the list of options.
             */
            "ch-radio-group-render": LocalJSX.ChRadioGroupRender & JSXBase.HTMLAttributes<HTMLChRadioGroupRenderElement>;
            /**
             * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
             * This control represents and item of the ch-segmented-control-render
             */
            "ch-segmented-control-item": LocalJSX.ChSegmentedControlItem & JSXBase.HTMLAttributes<HTMLChSegmentedControlItemElement>;
            /**
             * Segmented control is used to pick one choice from a linear set of closely related choices, and immediately apply that selection.
             */
            "ch-segmented-control-render": LocalJSX.ChSegmentedControlRender & JSXBase.HTMLAttributes<HTMLChSegmentedControlRenderElement>;
            "ch-select": LocalJSX.ChSelect & JSXBase.HTMLAttributes<HTMLChSelectElement>;
            "ch-select-option": LocalJSX.ChSelectOption & JSXBase.HTMLAttributes<HTMLChSelectOptionElement>;
            "ch-shortcuts": LocalJSX.ChShortcuts & JSXBase.HTMLAttributes<HTMLChShortcutsElement>;
            "ch-showcase": LocalJSX.ChShowcase & JSXBase.HTMLAttributes<HTMLChShowcaseElement>;
            "ch-sidebar": LocalJSX.ChSidebar & JSXBase.HTMLAttributes<HTMLChSidebarElement>;
            "ch-sidebar-menu": LocalJSX.ChSidebarMenu & JSXBase.HTMLAttributes<HTMLChSidebarMenuElement>;
            "ch-sidebar-menu-list": LocalJSX.ChSidebarMenuList & JSXBase.HTMLAttributes<HTMLChSidebarMenuListElement>;
            "ch-sidebar-menu-list-item": LocalJSX.ChSidebarMenuListItem & JSXBase.HTMLAttributes<HTMLChSidebarMenuListItemElement>;
            /**
             * The slider control is a input where the user selects a value from within a given range.
             */
            "ch-slider": LocalJSX.ChSlider & JSXBase.HTMLAttributes<HTMLChSliderElement>;
            "ch-step-list": LocalJSX.ChStepList & JSXBase.HTMLAttributes<HTMLChStepListElement>;
            "ch-step-list-item": LocalJSX.ChStepListItem & JSXBase.HTMLAttributes<HTMLChStepListItemElement>;
            /**
             * It allows to include styles in the shadow-root of chameleon components,
             * for example, to style the scrollbars.
             * Use it in a similar way to the html STYLE tag or
             * referencing an external stylesheet in a similar way to the html LINK tag.
             */
            "ch-style": LocalJSX.ChStyle & JSXBase.HTMLAttributes<HTMLChStyleElement>;
            "ch-suggest": LocalJSX.ChSuggest & JSXBase.HTMLAttributes<HTMLChSuggestElement>;
            "ch-suggest-list": LocalJSX.ChSuggestList & JSXBase.HTMLAttributes<HTMLChSuggestListElement>;
            "ch-suggest-list-item": LocalJSX.ChSuggestListItem & JSXBase.HTMLAttributes<HTMLChSuggestListItemElement>;
            "ch-test-flexible-layout": LocalJSX.ChTestFlexibleLayout & JSXBase.HTMLAttributes<HTMLChTestFlexibleLayoutElement>;
            "ch-test-suggest": LocalJSX.ChTestSuggest & JSXBase.HTMLAttributes<HTMLChTestSuggestElement>;
            "ch-textblock": LocalJSX.ChTextblock & JSXBase.HTMLAttributes<HTMLChTextblockElement>;
            /**
             * It allows you to load a style sheet in a similar way to the
             * native LINK or STYLE tags, but assigning it a name so that
             * it can be reused in different contexts,
             * either in the Document or in a Shadow-Root.
             */
            "ch-theme": LocalJSX.ChTheme & JSXBase.HTMLAttributes<HTMLChThemeElement>;
            "ch-timer": LocalJSX.ChTimer & JSXBase.HTMLAttributes<HTMLChTimerElement>;
            "ch-tooltip": LocalJSX.ChTooltip & JSXBase.HTMLAttributes<HTMLChTooltipElement>;
            "ch-tree": LocalJSX.ChTree & JSXBase.HTMLAttributes<HTMLChTreeElement>;
            "ch-tree-item": LocalJSX.ChTreeItem & JSXBase.HTMLAttributes<HTMLChTreeItemElement>;
            "ch-tree-view": LocalJSX.ChTreeView & JSXBase.HTMLAttributes<HTMLChTreeViewElement>;
            "ch-tree-view-drop": LocalJSX.ChTreeViewDrop & JSXBase.HTMLAttributes<HTMLChTreeViewDropElement>;
            "ch-tree-view-item": LocalJSX.ChTreeViewItem & JSXBase.HTMLAttributes<HTMLChTreeViewItemElement>;
            "ch-tree-view-render": LocalJSX.ChTreeViewRender & JSXBase.HTMLAttributes<HTMLChTreeViewRenderElement>;
            /**
             * The 'ch-window' component represents a popup container that is positioned
             * relative to an element or the screen.
             */
            "ch-window": LocalJSX.ChWindow & JSXBase.HTMLAttributes<HTMLChWindowElement>;
            /**
             * The 'ch-window-close' component represents the close button for the 'ch-window' component.
             */
            "ch-window-close": LocalJSX.ChWindowClose & JSXBase.HTMLAttributes<HTMLChWindowCloseElement>;
            "gx-grid-chameleon": LocalJSX.GxGridChameleon & JSXBase.HTMLAttributes<HTMLGxGridChameleonElement>;
            /**
             * Represents a component that provides filtering controls for a grid column.
             */
            "gx-grid-chameleon-column-filter": LocalJSX.GxGridChameleonColumnFilter & JSXBase.HTMLAttributes<HTMLGxGridChameleonColumnFilterElement>;
        }
    }
}
