/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ColType } from "./components/grid-column/ch-grid-column";
import { ColType as ColType1 } from "./components/grid-column-menu/ch-grid-menu";
export namespace Components {
  interface ChCompA {
    getInfo: () => Promise<void>;
  }
  interface ChCompB {}
  interface ChCompC {}
  interface ChGrid {
    hideableCols: Array<Object>;
  }
  interface ChGridAg {}
  interface ChGridAgButton {}
  interface ChGridCell {}
  interface ChGridCheckbox {
    /**
     * Whether the checkbox is checked or not
     */
    checked: boolean;
  }
  interface ChGridColumn {
    /**
     * The columnd id (required)
     */
    colId: string;
    /**
     * The column data type
     */
    colType: ColType;
    /**
     * The presence of this atribute displays a filter on the menu
     */
    filterable: boolean;
    /**
     * The presence of this attribute hides the column
     */
    hidden: boolean;
    /**
     * The presence of this attribute makes this column hideable
     */
    hideable: boolean;
    /**
     * The presence of this attribute sets the indentation on this column (You should apply this attribute on one column only, usually on the first column that displays data)
     */
    indent: boolean;
    /**
     * Displays a menu with options
     */
    showOptions: boolean;
    /**
     * The column size
     */
    size: string;
  }
  interface ChGridColumnset {}
  interface ChGridFooter {}
  interface ChGridHeader {}
  interface ChGridInputText {
    /**
     * The columnd id this input belongs to
     */
    colId: string;
    /**
     * The input placeholder
     */
    placeholder: string;
  }
  interface ChGridMenu {
    /**
     * The columnd id
     */
    colId: string;
    /**
     * The column data type
     */
    colType: ColType;
    /**
     * The presence of this atribute displays a filter on the menu
     */
    filterable: boolean;
    /**
     * An array containing information about the hideable columns
     */
    hideableCols: Array<Object>;
    /**
     * If true, it shows the menu
     */
    showMenu: boolean;
    /**
     * The presence of this atribute displays an option to sort the column
     */
    sortable: boolean;
  }
  interface ChGridRow {}
  interface ChGridRowset {}
  interface ChGridRowsetLegend {}
  interface ChGridSelect {
    /**
     * The columnd id this select belongs to
     */
    colId: string;
  }
  interface ChGridSelectOption {}
  interface ChIcon {
    /**
     * If enabled, the icon will display its inherent/natural color
     */
    autoColor: boolean;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy: boolean;
    /**
     * The URL of the icon.
     */
    src: string;
  }
  interface ChSidebarMenu {
    /**
     * The initial active item (optional)
     */
    activeItemId: string;
    /**
     * Determines if the menu can be collapsed
     */
    collapsible: boolean;
    /**
     * Allows to set the distance to the top of the page on the menu
     */
    distanceToTop: number;
    /**
     * The menu title
     */
    menuTitle: string;
    /**
     * The presence of this attribute allows the menu to have only one list opened at the same time
     */
    singleListOpen: boolean;
  }
  interface ChSidebarMenuList {}
  interface ChSidebarMenuListItem {
    /**
     * The first list item icon (optional)
     */
    itemIconSrc: string;
    /**
     * If this attribute is present the item will be initially uncollapsed
     */
    uncollapsed: boolean;
  }
}
declare global {
  interface HTMLChCompAElement extends Components.ChCompA, HTMLStencilElement {}
  var HTMLChCompAElement: {
    prototype: HTMLChCompAElement;
    new (): HTMLChCompAElement;
  };
  interface HTMLChCompBElement extends Components.ChCompB, HTMLStencilElement {}
  var HTMLChCompBElement: {
    prototype: HTMLChCompBElement;
    new (): HTMLChCompBElement;
  };
  interface HTMLChCompCElement extends Components.ChCompC, HTMLStencilElement {}
  var HTMLChCompCElement: {
    prototype: HTMLChCompCElement;
    new (): HTMLChCompCElement;
  };
  interface HTMLChGridElement extends Components.ChGrid, HTMLStencilElement {}
  var HTMLChGridElement: {
    prototype: HTMLChGridElement;
    new (): HTMLChGridElement;
  };
  interface HTMLChGridAgElement
    extends Components.ChGridAg,
      HTMLStencilElement {}
  var HTMLChGridAgElement: {
    prototype: HTMLChGridAgElement;
    new (): HTMLChGridAgElement;
  };
  interface HTMLChGridAgButtonElement
    extends Components.ChGridAgButton,
      HTMLStencilElement {}
  var HTMLChGridAgButtonElement: {
    prototype: HTMLChGridAgButtonElement;
    new (): HTMLChGridAgButtonElement;
  };
  interface HTMLChGridCellElement
    extends Components.ChGridCell,
      HTMLStencilElement {}
  var HTMLChGridCellElement: {
    prototype: HTMLChGridCellElement;
    new (): HTMLChGridCellElement;
  };
  interface HTMLChGridCheckboxElement
    extends Components.ChGridCheckbox,
      HTMLStencilElement {}
  var HTMLChGridCheckboxElement: {
    prototype: HTMLChGridCheckboxElement;
    new (): HTMLChGridCheckboxElement;
  };
  interface HTMLChGridColumnElement
    extends Components.ChGridColumn,
      HTMLStencilElement {}
  var HTMLChGridColumnElement: {
    prototype: HTMLChGridColumnElement;
    new (): HTMLChGridColumnElement;
  };
  interface HTMLChGridColumnsetElement
    extends Components.ChGridColumnset,
      HTMLStencilElement {}
  var HTMLChGridColumnsetElement: {
    prototype: HTMLChGridColumnsetElement;
    new (): HTMLChGridColumnsetElement;
  };
  interface HTMLChGridFooterElement
    extends Components.ChGridFooter,
      HTMLStencilElement {}
  var HTMLChGridFooterElement: {
    prototype: HTMLChGridFooterElement;
    new (): HTMLChGridFooterElement;
  };
  interface HTMLChGridHeaderElement
    extends Components.ChGridHeader,
      HTMLStencilElement {}
  var HTMLChGridHeaderElement: {
    prototype: HTMLChGridHeaderElement;
    new (): HTMLChGridHeaderElement;
  };
  interface HTMLChGridInputTextElement
    extends Components.ChGridInputText,
      HTMLStencilElement {}
  var HTMLChGridInputTextElement: {
    prototype: HTMLChGridInputTextElement;
    new (): HTMLChGridInputTextElement;
  };
  interface HTMLChGridMenuElement
    extends Components.ChGridMenu,
      HTMLStencilElement {}
  var HTMLChGridMenuElement: {
    prototype: HTMLChGridMenuElement;
    new (): HTMLChGridMenuElement;
  };
  interface HTMLChGridRowElement
    extends Components.ChGridRow,
      HTMLStencilElement {}
  var HTMLChGridRowElement: {
    prototype: HTMLChGridRowElement;
    new (): HTMLChGridRowElement;
  };
  interface HTMLChGridRowsetElement
    extends Components.ChGridRowset,
      HTMLStencilElement {}
  var HTMLChGridRowsetElement: {
    prototype: HTMLChGridRowsetElement;
    new (): HTMLChGridRowsetElement;
  };
  interface HTMLChGridRowsetLegendElement
    extends Components.ChGridRowsetLegend,
      HTMLStencilElement {}
  var HTMLChGridRowsetLegendElement: {
    prototype: HTMLChGridRowsetLegendElement;
    new (): HTMLChGridRowsetLegendElement;
  };
  interface HTMLChGridSelectElement
    extends Components.ChGridSelect,
      HTMLStencilElement {}
  var HTMLChGridSelectElement: {
    prototype: HTMLChGridSelectElement;
    new (): HTMLChGridSelectElement;
  };
  interface HTMLChGridSelectOptionElement
    extends Components.ChGridSelectOption,
      HTMLStencilElement {}
  var HTMLChGridSelectOptionElement: {
    prototype: HTMLChGridSelectOptionElement;
    new (): HTMLChGridSelectOptionElement;
  };
  interface HTMLChIconElement extends Components.ChIcon, HTMLStencilElement {}
  var HTMLChIconElement: {
    prototype: HTMLChIconElement;
    new (): HTMLChIconElement;
  };
  interface HTMLChSidebarMenuElement
    extends Components.ChSidebarMenu,
      HTMLStencilElement {}
  var HTMLChSidebarMenuElement: {
    prototype: HTMLChSidebarMenuElement;
    new (): HTMLChSidebarMenuElement;
  };
  interface HTMLChSidebarMenuListElement
    extends Components.ChSidebarMenuList,
      HTMLStencilElement {}
  var HTMLChSidebarMenuListElement: {
    prototype: HTMLChSidebarMenuListElement;
    new (): HTMLChSidebarMenuListElement;
  };
  interface HTMLChSidebarMenuListItemElement
    extends Components.ChSidebarMenuListItem,
      HTMLStencilElement {}
  var HTMLChSidebarMenuListItemElement: {
    prototype: HTMLChSidebarMenuListItemElement;
    new (): HTMLChSidebarMenuListItemElement;
  };
  interface HTMLElementTagNameMap {
    "ch-comp-a": HTMLChCompAElement;
    "ch-comp-b": HTMLChCompBElement;
    "ch-comp-c": HTMLChCompCElement;
    "ch-grid": HTMLChGridElement;
    "ch-grid-ag": HTMLChGridAgElement;
    "ch-grid-ag-button": HTMLChGridAgButtonElement;
    "ch-grid-cell": HTMLChGridCellElement;
    "ch-grid-checkbox": HTMLChGridCheckboxElement;
    "ch-grid-column": HTMLChGridColumnElement;
    "ch-grid-columnset": HTMLChGridColumnsetElement;
    "ch-grid-footer": HTMLChGridFooterElement;
    "ch-grid-header": HTMLChGridHeaderElement;
    "ch-grid-input-text": HTMLChGridInputTextElement;
    "ch-grid-menu": HTMLChGridMenuElement;
    "ch-grid-row": HTMLChGridRowElement;
    "ch-grid-rowset": HTMLChGridRowsetElement;
    "ch-grid-rowset-legend": HTMLChGridRowsetLegendElement;
    "ch-grid-select": HTMLChGridSelectElement;
    "ch-grid-select-option": HTMLChGridSelectOptionElement;
    "ch-icon": HTMLChIconElement;
    "ch-sidebar-menu": HTMLChSidebarMenuElement;
    "ch-sidebar-menu-list": HTMLChSidebarMenuListElement;
    "ch-sidebar-menu-list-item": HTMLChSidebarMenuListItemElement;
  }
}
declare namespace LocalJSX {
  interface ChCompA {
    onCompCtextChanged?: (event: CustomEvent<any>) => void;
  }
  interface ChCompB {}
  interface ChCompC {
    onTextChanged?: (event: CustomEvent<any>) => void;
  }
  interface ChGrid {
    hideableCols?: Array<Object>;
    onEmitHideableCols?: (event: CustomEvent<any>) => void;
  }
  interface ChGridAg {}
  interface ChGridAgButton {}
  interface ChGridCell {}
  interface ChGridCheckbox {
    /**
     * Whether the checkbox is checked or not
     */
    checked?: boolean;
  }
  interface ChGridColumn {
    /**
     * The columnd id (required)
     */
    colId?: string;
    /**
     * The column data type
     */
    colType?: ColType;
    /**
     * The presence of this atribute displays a filter on the menu
     */
    filterable?: boolean;
    /**
     * The presence of this attribute hides the column
     */
    hidden?: boolean;
    /**
     * The presence of this attribute makes this column hideable
     */
    hideable?: boolean;
    /**
     * The presence of this attribute sets the indentation on this column (You should apply this attribute on one column only, usually on the first column that displays data)
     */
    indent?: boolean;
    /**
     * Displays a menu with options
     */
    showOptions?: boolean;
    /**
     * The column size
     */
    size?: string;
  }
  interface ChGridColumnset {}
  interface ChGridFooter {}
  interface ChGridHeader {}
  interface ChGridInputText {
    /**
     * The columnd id this input belongs to
     */
    colId?: string;
    /**
     * Emmits the input value
     */
    onInputValueChanged?: (event: CustomEvent<any>) => void;
    /**
     * The input placeholder
     */
    placeholder?: string;
  }
  interface ChGridMenu {
    /**
     * The columnd id
     */
    colId?: string;
    /**
     * The column data type
     */
    colType?: ColType;
    /**
     * The presence of this atribute displays a filter on the menu
     */
    filterable?: boolean;
    /**
     * An array containing information about the hideable columns
     */
    hideableCols?: Array<Object>;
    /**
     * Emmits the "freeze column" event
     */
    onFreezeColumn?: (event: CustomEvent<any>) => void;
    /**
     * Emmits the sorting event
     */
    onHideMenu?: (event: CustomEvent<any>) => void;
    /**
     * Emmits the sorting event
     */
    onSortChanged?: (event: CustomEvent<any>) => void;
    /**
     * Emmits toggled column (hidden/visible)
     */
    onToggledColumn?: (event: CustomEvent<any>) => void;
    /**
     * Emmits the "unfreeze column" event
     */
    onUnfreezeColumn?: (event: CustomEvent<any>) => void;
    /**
     * If true, it shows the menu
     */
    showMenu?: boolean;
    /**
     * The presence of this atribute displays an option to sort the column
     */
    sortable?: boolean;
  }
  interface ChGridRow {}
  interface ChGridRowset {}
  interface ChGridRowsetLegend {}
  interface ChGridSelect {
    /**
     * The columnd id this select belongs to
     */
    colId?: string;
    /**
     * Emmits select value
     */
    onSelectChanged?: (event: CustomEvent<any>) => void;
  }
  interface ChGridSelectOption {}
  interface ChIcon {
    /**
     * If enabled, the icon will display its inherent/natural color
     */
    autoColor?: boolean;
    /**
     * If enabled, the icon will be loaded lazily when it's visible in the viewport.
     */
    lazy?: boolean;
    /**
     * The URL of the icon.
     */
    src?: string;
  }
  interface ChSidebarMenu {
    /**
     * The initial active item (optional)
     */
    activeItemId?: string;
    /**
     * Determines if the menu can be collapsed
     */
    collapsible?: boolean;
    /**
     * Allows to set the distance to the top of the page on the menu
     */
    distanceToTop?: number;
    /**
     * The menu title
     */
    menuTitle?: string;
    onItemClicked?: (event: CustomEvent<any>) => void;
    /**
     * The presence of this attribute allows the menu to have only one list opened at the same time
     */
    singleListOpen?: boolean;
  }
  interface ChSidebarMenuList {}
  interface ChSidebarMenuListItem {
    /**
     * The first list item icon (optional)
     */
    itemIconSrc?: string;
    /**
     * Emmits the item id
     */
    onItemClickedEvent?: (event: CustomEvent<any>) => void;
    /**
     * If this attribute is present the item will be initially uncollapsed
     */
    uncollapsed?: boolean;
  }
  interface IntrinsicElements {
    "ch-comp-a": ChCompA;
    "ch-comp-b": ChCompB;
    "ch-comp-c": ChCompC;
    "ch-grid": ChGrid;
    "ch-grid-ag": ChGridAg;
    "ch-grid-ag-button": ChGridAgButton;
    "ch-grid-cell": ChGridCell;
    "ch-grid-checkbox": ChGridCheckbox;
    "ch-grid-column": ChGridColumn;
    "ch-grid-columnset": ChGridColumnset;
    "ch-grid-footer": ChGridFooter;
    "ch-grid-header": ChGridHeader;
    "ch-grid-input-text": ChGridInputText;
    "ch-grid-menu": ChGridMenu;
    "ch-grid-row": ChGridRow;
    "ch-grid-rowset": ChGridRowset;
    "ch-grid-rowset-legend": ChGridRowsetLegend;
    "ch-grid-select": ChGridSelect;
    "ch-grid-select-option": ChGridSelectOption;
    "ch-icon": ChIcon;
    "ch-sidebar-menu": ChSidebarMenu;
    "ch-sidebar-menu-list": ChSidebarMenuList;
    "ch-sidebar-menu-list-item": ChSidebarMenuListItem;
  }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      "ch-comp-a": LocalJSX.ChCompA &
        JSXBase.HTMLAttributes<HTMLChCompAElement>;
      "ch-comp-b": LocalJSX.ChCompB &
        JSXBase.HTMLAttributes<HTMLChCompBElement>;
      "ch-comp-c": LocalJSX.ChCompC &
        JSXBase.HTMLAttributes<HTMLChCompCElement>;
      "ch-grid": LocalJSX.ChGrid & JSXBase.HTMLAttributes<HTMLChGridElement>;
      "ch-grid-ag": LocalJSX.ChGridAg &
        JSXBase.HTMLAttributes<HTMLChGridAgElement>;
      "ch-grid-ag-button": LocalJSX.ChGridAgButton &
        JSXBase.HTMLAttributes<HTMLChGridAgButtonElement>;
      "ch-grid-cell": LocalJSX.ChGridCell &
        JSXBase.HTMLAttributes<HTMLChGridCellElement>;
      "ch-grid-checkbox": LocalJSX.ChGridCheckbox &
        JSXBase.HTMLAttributes<HTMLChGridCheckboxElement>;
      "ch-grid-column": LocalJSX.ChGridColumn &
        JSXBase.HTMLAttributes<HTMLChGridColumnElement>;
      "ch-grid-columnset": LocalJSX.ChGridColumnset &
        JSXBase.HTMLAttributes<HTMLChGridColumnsetElement>;
      "ch-grid-footer": LocalJSX.ChGridFooter &
        JSXBase.HTMLAttributes<HTMLChGridFooterElement>;
      "ch-grid-header": LocalJSX.ChGridHeader &
        JSXBase.HTMLAttributes<HTMLChGridHeaderElement>;
      "ch-grid-input-text": LocalJSX.ChGridInputText &
        JSXBase.HTMLAttributes<HTMLChGridInputTextElement>;
      "ch-grid-menu": LocalJSX.ChGridMenu &
        JSXBase.HTMLAttributes<HTMLChGridMenuElement>;
      "ch-grid-row": LocalJSX.ChGridRow &
        JSXBase.HTMLAttributes<HTMLChGridRowElement>;
      "ch-grid-rowset": LocalJSX.ChGridRowset &
        JSXBase.HTMLAttributes<HTMLChGridRowsetElement>;
      "ch-grid-rowset-legend": LocalJSX.ChGridRowsetLegend &
        JSXBase.HTMLAttributes<HTMLChGridRowsetLegendElement>;
      "ch-grid-select": LocalJSX.ChGridSelect &
        JSXBase.HTMLAttributes<HTMLChGridSelectElement>;
      "ch-grid-select-option": LocalJSX.ChGridSelectOption &
        JSXBase.HTMLAttributes<HTMLChGridSelectOptionElement>;
      "ch-icon": LocalJSX.ChIcon & JSXBase.HTMLAttributes<HTMLChIconElement>;
      "ch-sidebar-menu": LocalJSX.ChSidebarMenu &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuElement>;
      "ch-sidebar-menu-list": LocalJSX.ChSidebarMenuList &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuListElement>;
      "ch-sidebar-menu-list-item": LocalJSX.ChSidebarMenuListItem &
        JSXBase.HTMLAttributes<HTMLChSidebarMenuListItemElement>;
    }
  }
}
