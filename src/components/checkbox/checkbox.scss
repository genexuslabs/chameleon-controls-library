@import "../../common/_base";

$option-checked-border-color: currentColor;
$option-checked-color: currentColor;

@include box-sizing();

:host {
  /**
   * @prop --ch-checkbox__container-size:
   * Specifies the size for the container of the `input` and `option` elements.
   * @default min(1em, 20px)
   */
  --ch-checkbox__container-size: min(1em, 20px);

  /**
   * @prop --ch-checkbox__checked-image:
   * Specifies the image of the checkbox when is checked.
   * @default url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>")
   */
  --ch-checkbox__option-checked-image: url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>");

  /**
   * @prop --ch-checkbox__option-indeterminate-image:
   * Specifies the image of the checkbox when is indeterminate.
   * @default url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><path fill='currentColor' d='M6.564.75l-3.59 3.612-1.538-1.55L0 4.26l2.974 2.99L8 2.193z'/></svg>")
   */
  --ch-checkbox__option-indeterminate-image: url("data:image/svg+xml, <svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8'><rect width='8' height='8'/></svg>");

  /**
   * @prop --ch-checkbox__option-size:
   * Specifies the size for the `option` element.
   * @default 50%
   */
  --ch-checkbox__option-size: 50%;

  /**
   * @prop --ch-checkbox__option-image-size:
   * Specifies the image size of the `option` element.
   * @default 100%
   */
  --ch-checkbox__option-image-size: 100%;

  display: inline-grid;
  grid-template-columns: max-content 1fr;
  align-items: center;

  // Avoid zooming on double tap
  touch-action: manipulation;

  // Remove text selection on double click
  user-select: none;

  // Necessary to implement to focus delegation to the input when clicking on
  // external labels
  pointer-events: none;
}

:host(.ch-checkbox--actionable) :is(.input, .label) {
  cursor: pointer;

  // Necessary to implement to focus delegation to the input when clicking on
  // external labels
  pointer-events: all;
}

.container {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
  inline-size: var(--ch-checkbox__container-size);
  block-size: var(--ch-checkbox__container-size);
}

.input {
  display: flex;
  inline-size: 100%;
  block-size: 100%;

  // Reset browser defaults
  appearance: none;
  margin: 0;
  padding: 0;
  outline: unset;

  border: 1px solid $option-checked-border-color;
}

.option {
  position: absolute;
  inline-size: var(--ch-checkbox__option-size);
  block-size: var(--ch-checkbox__option-size);
  background-color: $option-checked-color;
  pointer-events: none;

  &--checked {
    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)
      var(--ch-checkbox__option-checked-image);
  }

  &--indeterminate {
    -webkit-mask: no-repeat center / var(--ch-checkbox__option-image-size)
      var(--ch-checkbox__option-indeterminate-image);
  }

  &--not-displayed {
    opacity: 0;
    visibility: hidden;
  }
}

.label {
  display: inline-grid;
  max-inline-size: max-content;
}
