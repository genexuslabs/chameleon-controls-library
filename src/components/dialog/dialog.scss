@import "../../common/base";

@include box-sizing();

.caption,
.close-button,
dialog {
  @include reset-browser-defaults-properties-1();
}

$ch-dialog-x: calc(
  (var(--ch-dialog-inline-start) + var(--ch-dialog-dragged-x)) *
    var(--ch-dialog-rtl)
);

$ch-dialog-y: calc(var(--ch-dialog-block-start) + var(--ch-dialog-dragged-y));

$ch-dialog-x--same-layer: calc(
  (var(--ch-dialog-inline) + var(--ch-dialog-dragged-x)) * var(--ch-dialog-rtl)
);

$ch-dialog-y--same-layer: calc(
  var(--ch-dialog-block) + var(--ch-dialog-dragged-y)
);

::backdrop {
  // Needed to capture the click event outside the dialog, in order to close it.
  pointer-events: none;
}

:host {
  /**
   * @prop --ch-dialog-block-start:
   * This specifies the value used in calculating the dialog's position along the y-axis. The default value centers the dialog along the y-axis.
   * @default calc(50dvh - 50%)
   */
  --ch-dialog-block-start: calc(50dvh - 50%);

  /**
   * @prop --ch-dialog-inline-start:
   * This specifies the value used in calculating the dialog's position along the x-axis. The default value centers the dialog along the x-axis.
   * @default calc(50dvw - 50%);
   */
  --ch-dialog-inline-start: calc(50dvw - 50%);

  /**
   * @prop --ch-dialog-block-size:
   * Specifies the block size of the dialog. Useful for scenarios where the
   * dialog is resizable.
   * @default max-content
   */
  --ch-dialog-block-size: max-content;

  /**
    * @prop --ch-dialog-inline-size:
    * Specifies the inline size of the dialog. Useful for scenarios where the
    * dialog is resizable.
    * @default max-content
    */
  --ch-dialog-inline-size: max-content;

  /**
    * @prop --ch-dialog-max-block-size:
    * Specifies the maximum block size of the dialog. Useful for scenarios where the
    * dialog is resizable.
    * @default auto
    */
  --ch-dialog-max-block-size: auto;

  /**
      * @prop --ch-dialog-max-inline-size:
      * Specifies the maximum inline size of the dialog. Useful for scenarios
      * where the dialog is resizable.
      * @default auto
      */
  --ch-dialog-max-inline-size: auto;

  /**
    * @prop --ch-dialog-min-block-size:
    * Specifies the minimum block size of the dialog. Useful for scenarios where the
    * dialog is resizable.
    * @default auto
    */
  --ch-dialog-min-block-size: auto;

  /**
     * @prop --ch-dialog-min-inline-size:
     * Specifies the minimum inline size of the dialog. Useful for scenarios
     * where the dialog is resizable.
     * @default auto
     */
  --ch-dialog-min-inline-size: auto;

  /**
    * @prop --ch-dialog-resize-threshold:
    * Specifies the size of the threshold to resize the dialog.
    * @default 4px
    */
  --ch-dialog-resize-threshold: 8px;

  --ch-dialog-resize-threshold--half-negative: calc(
    var(--ch-dialog-resize-threshold) * -0.5
  );

  --ch-dialog-border-inline-start-width: 0px;
  --ch-dialog-border-inline-end-width: 0px;
  --ch-dialog-border-block-start-width: 0px;
  --ch-dialog-border-block-end-width: 0px;

  --ch-dialog-resize__inline-start: calc(
    var(--ch-dialog-resize-threshold--half-negative) -
      var(--ch-dialog-border-inline-start-width) * 0.5
  );

  --ch-dialog-resize__inline-end: calc(
    var(--ch-dialog-resize-threshold--half-negative) -
      var(--ch-dialog-border-inline-end-width) * 0.5
  );

  --ch-dialog-resize__block-start: calc(
    var(--ch-dialog-resize-threshold--half-negative) -
      var(--ch-dialog-border-block-start-width) * 0.5
  );

  --ch-dialog-resize__block-end: calc(
    var(--ch-dialog-resize-threshold--half-negative) -
      var(--ch-dialog-border-block-end-width) * 0.5
  );

  --ch-dialog-dragged-x: 0px;
  --ch-dialog-dragged-y: 0px;
  --ch-dialog-rtl: 1;

  // Required to ensure that the ch-dialog element does not take up space in
  // the containing element
  position: fixed;

  // Reset browser defaults
  margin: 0;
  padding: 0;
  background-color: unset;
  border: unset;
  color: unset;
  overflow: visible;

  top: 0;
  inset-inline-start: 0;
}

// - - - - - - - - - - - - - - - -
//           Dialog
// - - - - - - - - - - - - - - - -
dialog {
  // Reset browser default
  margin: unset;
  position: fixed;
  overflow: visible;

  inline-size: var(--ch-dialog-inline-size);
  block-size: var(--ch-dialog-block-size);
  min-inline-size: var(--ch-dialog-min-inline-size);
  min-block-size: var(--ch-dialog-min-block-size);
  max-inline-size: var(--ch-dialog-max-inline-size);
  max-block-size: var(--ch-dialog-max-block-size);

  // Positioning
  inset-block-start: 0;
  inset-inline-start: 0;
  translate: $ch-dialog-x $ch-dialog-y;
}

// - - - - - - - - - - - - - - - -
//              Drag
// - - - - - - - - - - - - - - - -
.gx-dialog-dragging {
  cursor: move;
  // Remove any type of pointer when dragging, to make "cursor: move" effective
  ::slotted(*) {
    pointer-events: none !important;
    user-select: none;
  }
}

// - - - - - - - - - - - - - - - -
//            Resizable
// - - - - - - - - - - - - - - - -
:host(.ch-dialog-resizing) {
  pointer-events: none;
  user-select: none;
}

.edge {
  &__block-start,
  &__block-end {
    position: fixed;
    // This calc improves edge positioning when the border-width is much larger
    // than the threshold
    inset-inline: min(
        0px,
        calc(
          (
              var(--ch-dialog-resize-threshold) -
                var(--ch-dialog-border-inline-start-width)
            ) / 2
        )
      )
      min(
        0px,
        calc(
          (
              var(--ch-dialog-resize-threshold) -
                var(--ch-dialog-border-inline-end-width)
            ) / 2
        )
      );
    block-size: var(--ch-dialog-resize-threshold);
    cursor: ns-resize;
  }

  &__inline-start,
  &__inline-end {
    position: fixed;
    // This calc improves edge positioning when the border-width is much larger
    // than the threshold
    inset-block: min(
        0px,
        calc(
          (
              var(--ch-dialog-resize-threshold) -
                var(--ch-dialog-border-block-start-width)
            ) / 2
        )
      )
      min(
        0px,
        calc(
          (
              var(--ch-dialog-resize-threshold) -
                var(--ch-dialog-border-block-end-width)
            ) / 2
        )
      );
    inline-size: var(--ch-dialog-resize-threshold);
    cursor: ew-resize;
  }

  &__block-start {
    inset-block-start: var(--ch-dialog-resize__block-start);
  }

  &__block-end {
    inset-block-end: var(--ch-dialog-resize__block-end);
  }

  &__inline-start {
    inset-inline-start: var(--ch-dialog-resize__inline-start);
  }

  &__inline-end {
    inset-inline-end: var(--ch-dialog-resize__inline-end);
  }
}

.corner {
  &__block-start-inline-start,
  &__block-end-inline-end {
    position: fixed;
    block-size: var(--ch-dialog-resize-threshold);
    inline-size: var(--ch-dialog-resize-threshold);
    cursor: nwse-resize;
  }

  &__block-start-inline-end,
  &__block-end-inline-start {
    position: fixed;
    block-size: var(--ch-dialog-resize-threshold);
    inline-size: var(--ch-dialog-resize-threshold);
    cursor: nesw-resize;
  }

  &__block-start-inline-start {
    inset-block-start: var(--ch-dialog-resize__block-start);
    inset-inline-start: var(--ch-dialog-resize__inline-start);
  }

  &__block-end-inline-end {
    inset-block-end: var(--ch-dialog-resize__block-end);
    inset-inline-end: var(--ch-dialog-resize__inline-end);
  }

  &__block-start-inline-end {
    inset-block-start: var(--ch-dialog-resize__block-start);
    inset-inline-end: var(--ch-dialog-resize__inline-end);
  }

  &__block-end-inline-start {
    inset-block-end: var(--ch-dialog-resize__block-end);
    inset-inline-start: var(--ch-dialog-resize__inline-start);
  }
}

// "Rotate" resize cursors for the corners
:host(.ch-dialog-rtl) {
  .corner__block-start-inline-start,
  .corner__block-end-inline-end {
    cursor: nesw-resize;
  }
}

:host(.ch-dialog-rtl) {
  .corner__block-start-inline-end,
  .corner__block-end-inline-start {
    cursor: nwse-resize;
  }
}

// Useful for observing changes in border size
.resize-layer {
  position: fixed;
  inset: 0;
  pointer-events: none;
}
