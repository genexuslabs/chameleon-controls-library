$z-index-gx-navbar-item: 107; // Same as $z-index-gx-navbar-item from w-c-l

:where(button) {
  all: unset;
}

*,
::before,
::after {
  box-sizing: border-box;
}

:host {
  --separation: 0px;
  --separation-x: var(--separation);
  --separation-y: var(--separation);

  display: flex;
  position: relative;
  width: 100%;
  height: 100%;
}

.expandable-button {
  display: flex;
  align-items: center;
  justify-content: center;
  align-self: center;
  position: relative;
  width: 100%;
  height: 100%;
  cursor: pointer;
  z-index: $z-index-gx-navbar-item + 1;

  &:focus-within {
    transition: box-shadow 250ms;
  }
}

// Remove focus of the button content
::slotted([slot="action"]) {
  pointer-events: none;
}

// - - - - - - - - - - - - - - - -
//           Separation
// - - - - - - - - - - - - - - - -
// Dummy separation to keep opened the popup when expand-behavior === "ClickOrHover"
ch-window[y-align="outside-start"] {
  --ch-window-separation: var(--separation-y);
  --ch-window-separation-y: calc(var(--separation-y) * -1);
}

ch-window[y-align="outside-end"] {
  --ch-window-separation: var(--separation-y);
  --ch-window-separation-y: var(--separation-y);
}

ch-window[x-align="outside-start"] {
  --ch-window-separation: var(--separation-x);
  --ch-window-separation-x: calc(var(--separation-x) * -1);
}

ch-window[x-align="outside-end"] {
  --ch-window-separation: var(--separation-x);
  --ch-window-separation-x: var(--separation-x);
}

.list {
  display: flex;
  flex-direction: column;
}
