@import "../../common/base";

@include box-sizing();

:host {
  --ch-drag-bar__size: 5px;

  display: grid;
  position: relative;
  block-size: 100%;
  inline-size: 100%;
}

// When a bar of the layout-splitter is being drag, we remove all pointers from
// the application to improve the UX, because it removes any hover effect from
// the app.
//
// When the "mouseup" event is fired (the drag bar is released), the click
// event is fired with a composedPath that only contains the [html, body],
// since all pointer events where removed during the drag. This causes the
// ch-dialog to close when a layout-splitter is used inside the dialog, because
// the dialog always detect that the release of the drag bar is performed
// outside of the dialog (because the composedPath only containing [html, body]).
//
// To fix this issue, we have to add a dummy node in the path when dragging a
// bar without impacting in the UX. This node is the ch-layout-splitter Host
:host(.ch-layout-splitter--dragging) {
  pointer-events: all;

  & > .group {
    pointer-events: none;
  }
}

// - - - - - - - - - - - - - - - -
//               Bar
// - - - - - - - - - - - - - - - -
.bar {
  --position-fix: calc((var(--size, 0px) - var(--ch-drag-bar__size)) / 2);
  position: relative;
  inline-size: 100%;
  block-size: 100%;
  background-color: currentColor;
  z-index: 1;

  &[aria-disabled] {
    pointer-events: none;
  }

  // Remove default focus style
  &:focus-visible {
    outline: unset;
  }

  &::after {
    content: "";
    display: flex;
    position: absolute;
    background-color: currentColor;
    opacity: 0;

    transition: opacity 0s linear;
  }

  &:is(:active, :focus-visible, :hover)::after {
    opacity: 1;
  }

  &:hover::after {
    transition-delay: 250ms; // Hovering delays the display of the drag-bar
  }
}

.sticky {
  position: sticky;

  // TODO: Check if there is a better way to define the z-index
  // This is necessary to properly position the sticky layer with its siblings.
  z-index: 1;
}

// - - - - - - - - - - - - - - - -
//           Containers
// - - - - - - - - - - - - - - - -
.leaf {
  // Leafs must always take space to calculate if their size is greater that
  // zero, since all items have a minimum size of zero if the minSize is not set
  display: grid;
}

.group {
  display: grid;
  position: relative;
}

.direction--columns {
  grid-template-columns: var(--ch-layout-splitter__distribution);

  & > .bar {
    cursor: ew-resize;

    &::after {
      block-size: 100%;
      inline-size: var(--ch-drag-bar__size);
      margin-inline-start: var(--position-fix);
    }
  }
}

.direction--rows {
  grid-template-rows: var(--ch-layout-splitter__distribution);

  & > .bar {
    cursor: ns-resize;

    &::after {
      block-size: var(--ch-drag-bar__size);
      inline-size: 100%;
      margin-block-start: var(--position-fix);
    }
  }
}
