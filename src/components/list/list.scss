@import "../../common/_base";

@include box-sizing();

$z-index-gx-navbar-item: 107; // Same as $z-index-gx-navbar-item from w-c-l

:host {
  --ch-list-transition-duration: 150ms;

  display: grid;
  block-size: 100%;
}

// :host([type="blockStart"]) {
//   grid-auto-flow: row;
//   grid-auto-rows: max-content;
// }

:host(.ch-list-direction--block) {
  grid-template-rows: max-content 1fr;
}

:host(.ch-list-direction--inline) {
  grid-template-columns: max-content 1fr;
}

// - - - - - - - - - - - - - - - -
//         Caption button
// - - - - - - - - - - - - - - - -
:where(button) {
  all: unset;
  display: flex;
  align-items: center;

  // Disallow selecting the text
  user-select: none;

  // Avoid zooming on double tap on iOS devices
  touch-action: manipulation;

  // Allow user drag
  -webkit-user-drag: element;

  cursor: pointer;
}

.caption-image,
.decorative-image::before {
  display: block;
  block-size: 18px;
  inline-size: 18px;
}

.decorative-image::before {
  content: "";
  -webkit-mask: var(--ch-list-decorative-image) 50% 50% / 100% 100% no-repeat;
  background-color: currentColor;
}

.close-button::after {
  content: "";
  display: flex;
  block-size: 1em;
  inline-size: 1em;
  -webkit-mask: url('data:image/svg+xml,<svg width="18" height="18" viewBox="0 0 18 18" xmlns="http://www.w3.org/2000/svg"><path d="M2 2L15.5 15.5" stroke="white" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/><path d="M15.5 2L2 15.5" stroke="white" stroke-width="1.2" stroke-linecap="round" stroke-linejoin="round"/></svg>')
    50% 50% / 0.75em 0.75em no-repeat;
  background-color: currentColor;
  opacity: 0;
}

.button {
  display: flex;
  align-items: center;

  &:hover > .close-button::after,
  &:focus-within > .close-button::after,
  &[aria-selected="true"] > .close-button::after {
    opacity: 1;
  }
}

// - - - - - - - - - - - - - - - -
//          Drag preview
// - - - - - - - - - - - - - - - -
// "Hide" the dragged element, without removing it from the accessibility tree
.dragged-element {
  opacity: 0;

  &--outside {
    display: none;
  }
}

.drag-preview {
  // "clamp" implements snap to the edges
  --ch-list-snap-drag-preview: clamp(
    var(--ch-list-tab-list-start),
    var(--ch-list-mouse-position),
    var(--ch-list-tab-list-end)
  );

  position: fixed;
  left: 0; // Necessary since the custom vars are physical values
  top: 0; // Necessary since the custom vars are physical values
  z-index: $z-index-gx-navbar-item + 1;

  &:popover-open {
    // Reset popover's browser defaults
    padding: 0;
    margin: 0;
    border: unset;
    color: unset;

    // Native popovers have "inset: 0", so we need to reset that property with
    // the physical values again to support RTL
    inset: unset;
    left: 0;
    top: 0;

    // The preview MUST NOT capture pointer-events in order to properly show
    // the droppable areas
    pointer-events: none;
  }

  &-element {
    cursor: grabbing;
  }

  // Drag outside
  &--outside-tab-list {
    transform: translate(
      calc(var(--ch-list-mouse-position-x) - var(--ch-list-mouse-offset-x)),
      calc(var(--ch-list-mouse-position-y) - var(--ch-list-mouse-offset-y))
    );
  }

  // Drag inside (block)
  &--inside-tab-list__block {
    --ch-list-mouse-position: calc(
      var(--ch-list-mouse-position-x) - var(--ch-list-mouse-offset-x)
    );

    transform: translate(
      var(--ch-list-snap-drag-preview),
      var(--ch-list-button-position-y)
    );
  }

  // Drag inside (inline)
  &--inside-tab-list__inline {
    --ch-list-mouse-position: calc(
      var(--ch-list-mouse-position-y) - var(--ch-list-mouse-offset-y)
    );

    transform: translate(
      var(--ch-list-button-position-x),
      var(--ch-list-snap-drag-preview)
    );
  }
}

.shifted-element {
  transition: transform var(--ch-list-transition-duration);
}

:host(.ch-list-direction--block) {
  .shifted-element--start {
    transform: translate(calc(var(--ch-list-button-size) * -1), 0);
  }

  .shifted-element--end {
    transform: translate(var(--ch-list-button-size), 0);
  }
}

:host(.ch-list-direction--inline) {
  .shifted-element--start {
    transform: translateY(calc(var(--ch-list-button-size) * -1));
  }

  .shifted-element--end {
    transform: translateY(var(--ch-list-button-size));
  }
}

// - - - - - - - - - - - - - - - -
//            Tab lists
// - - - - - - - - - - - - - - - -
:host([direction="inline"]) > .tab-list {
  display: grid;
  grid-auto-flow: row;
  grid-auto-rows: max-content;
}

:host([direction="block"]) > .tab-list {
  display: grid;
  grid-auto-flow: column;
  grid-auto-columns: max-content;
}

.page-container {
  display: grid;
  grid-template: "selected" 1fr / 1fr;
  block-size: 100%;
  inline-size: 100%;
}

.page--selected {
  grid-area: selected;
}

// content-visibility: hidden is faster for rendering the content back, as
// it preserves the rendering state of the content (display: none does not)
@supports (content-visibility: hidden) {
  .page-container--collapsed,
  .page--hidden {
    content-visibility: hidden;
  }

  .page-container--collapsed {
    inline-size: 0;
  }
}

@supports not (content-visibility: hidden) {
  .page-container--collapsed,
  .page--hidden {
    display: none; // Destroys the render state. Ctrl + Z and Ctrl + C won't work properly
  }
}
