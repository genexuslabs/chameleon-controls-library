ch-tree-view {
  --ch-tree-view-item__checkbox-size: 0.875em;
  --ch-tree-view-item__expandable-button-size: 0.875em;
  --ch-tree-view-item__image-size: 0.875em;

  --ch-tree-view-item__dashed-line--inset-inline-start: 0px;
  --ch-tree-view-item__dashed-line--inset-inline-end: 4px;
  --ch-tree-view-item-gap: 5px;
  --ch-tree-view-item-custom-padding-inline-start: 0px;

  --ch-tree-tab-size: calc(
    var(--ch-tree-view-item__image-size) +
      var(--ch-tree-view-item__expandable-button-size) +
      (var(--ch-tree-view-item-gap) * 2)
  );

  display: flex;
  position: relative;
  block-size: 100%;
  inline-size: 100%;
  overflow: auto;

  & > .ch-tree-view-container {
    position: absolute;
    inset: 0;
  }

  // Reset useful droppable areas
  &.ch-tree-view-dragging-item ch-tree-view-item {
    pointer-events: var(--ch-tree-view-pointer-events, all);
  }

  // Remove un-useful droppable areas
  &.ch-tree-view-dragging-item .ch-tree-view-list-item--deny-drop {
    pointer-events: none;
  }

  // Remove droppable areas on selected items
  &.ch-tree-view--dragging-selected-items ch-tree-view-item[selected] {
    --ch-tree-view-pointer-events: none;
  }

  // Remove mouse actions when processing the drop of items
  // @todo: Remove keyboard actions
  &.ch-tree-view-waiting-drop-processing {
    cursor: wait;

    > .ch-tree-view-container {
      pointer-events: none;
    }
  }
}

// - - - - - - - - - - - - - - - -
//        Item indentation
// - - - - - - - - - - - - - - - -
ch-tree-view-item {
  &::part(header) {
    --own-offset: 0px;

    --padding-inline-start: calc(
      var(--ch-tree-tab-size) * var(--level) - var(--own-offset) -
        var(--parent-offset, 0px) +
        var(--ch-tree-view-item-custom-padding-inline-start)
    );

    padding-inline-start: var(--padding-inline-start);
  }

  &::part(header expand-button) {
    --own-offset: calc(
      var(--ch-tree-view-item__expandable-button-size) +
        var(--ch-tree-view-item-gap)
    );
  }

  &::part(header even-level) {
    --parent-offset: var(--parent-offset-odd);
  }

  &::part(header odd-level) {
    --parent-offset: var(--parent-offset-even);
  }

  &::part(expandable even-level) {
    --parent-offset-even: calc(
      var(--ch-tree-view-item__expandable-button-size) +
        var(--ch-tree-view-item-gap) + var(--parent-offset-odd, 0px)
    );
  }

  &::part(expandable odd-level) {
    --parent-offset-odd: calc(
      var(--ch-tree-view-item__expandable-button-size) +
        var(--ch-tree-view-item-gap) + var(--parent-offset-even, 0px)
    );
  }
}

.ch-tree-view-drag-info {
  --rtl-offset: 16px;

  position: fixed;
  left: 0; // Necessary since the custom vars are physical values
  top: 0; // Necessary since the custom vars are physical values
  transform: translate(
    calc(var(--ch-tree-view-dragging-item-x) + var(--rtl-offset)),
    calc(var(--ch-tree-view-dragging-item-y) + 8px)
  );
  pointer-events: none;
  z-index: 1; // Necessary to show the element above the expandable buttons
  animation: ch-tree-view-drag-info-fade-in 10ms;
}

// Wait until the custom var values are updated to avoid flickering
@keyframes ch-tree-view-drag-info-fade-in {
  0%,
  100% {
    opacity: 0;
  }
}

html[dir="rtl"] .ch-tree-view-drag-info {
  --rtl-offset: -100%;
}
