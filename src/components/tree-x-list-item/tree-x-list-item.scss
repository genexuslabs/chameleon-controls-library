$dashed-line-inset-inline-start: 7.5px;

$separation-between-actions: 5px;

$own-offset: calc(
  var(--expandable-button-width) + #{$separation-between-actions}
);

:where(button) {
  all: unset;
  display: flex;
  cursor: pointer;

  // Disallow selecting the text
  user-select: none;

  // Avoid zooming on double tap on iOS devices
  touch-action: manipulation;

  // Allow user drag
  -webkit-user-drag: element;
}

*,
::before,
::after {
  box-sizing: border-box;
}

:host {
  --checkbox-size: 1em;
  --expandable-button-width: 12px;

  --tab-width: calc(
    var(--checkbox-size) + var(--expandable-button-width) +
      (#{$separation-between-actions} * 2)
  );

  display: grid;
  grid-template-rows: min-content;
}

:host(.ch-tree-x-list-item--drag-enter) {
  background-color: #eee;
}

.header {
  --own-offset: 0px;

  display: flex;
  align-items: center;
  min-height: calc(1em + 6px);
  padding-inline-start: var(--padding-inline-start);

  &--selected {
    background-color: #ddd;
  }

  &--disabled {
    opacity: 0.5;
    pointer-events: none;
  }

  &--even {
    $padding-inline-start: calc(
      var(--parent-padding-inline-start--odd, 0px) + var(--tab-width)
    );

    --padding-inline-start: #{$padding-inline-start};

    // This variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-padding-inline-start--even: #{$padding-inline-start};
    }

    .dashed-line {
      --inset-inline-start: calc(
        var(--parent-padding-inline-start--odd, 0px) +
          var(--parent-checkbox-offset) + var(--parent-expandable-offset)
      );
    }
  }

  &--even-expandable {
    $padding-inline-start: calc(
      var(--parent-padding-inline-start--odd, 0px) + var(--tab-width) - #{$own-offset}
    );

    --padding-inline-start: #{$padding-inline-start};

    // This variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-padding-inline-start--even: #{$padding-inline-start};
    }
  }

  &--odd {
    $padding-inline-start: calc(
      var(--parent-padding-inline-start--even, 0px) + var(--tab-width)
    );

    --padding-inline-start: #{$padding-inline-start};

    // This variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-padding-inline-start--odd: #{$padding-inline-start};
    }

    .dashed-line {
      --inset-inline-start: calc(
        var(--parent-padding-inline-start--even, 0px) +
          var(--parent-checkbox-offset) + var(--parent-expandable-offset)
      );
    }
  }

  &--odd-expandable {
    $padding-inline-start: calc(
      var(--parent-padding-inline-start--even, 0px) + var(--tab-width) - #{$own-offset}
    );

    --padding-inline-start: #{$padding-inline-start};

    // This variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-padding-inline-start--odd: #{$padding-inline-start};
    }
  }

  &--level-0 {
    --padding-inline-start: 0px;

    + .expandable {
      --parent-padding-inline-start--even: 0px;
    }
  }

  &--expandable-offset {
    --own-offset: #{$own-offset};

    // This variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-expandable-offset: calc(var(--expandable-button-width) / 2);
    }
  }

  &--checkbox-offset {
    // Those variable must be defined expandable content to not be overridden by each item
    + .expandable {
      --parent-checkbox-offset: calc(var(--checkbox-size) / 2);
      --parent-negative-checkbox-offset: calc(var(--checkbox-size) / 2);
    }
  }
}

// - - - - - - - - - - - - - - - -
//           Dashed Line
// - - - - - - - - - - - - - - - -
.dashed-line {
  position: absolute;
  inset-inline-start: var(--inset-inline-start);
  height: 1px;
  width: calc(
    var(--tab-width) - var(--parent-checkbox-offset) -
      var(--parent-expandable-offset) - var(--own-offset) - 4px
  );

  border: 0 dashed #a9a9a9;
  border-block-end-width: 1px;
  pointer-events: none; // Improve hover effect
}

// Last dashed line of the tree
.last-dashed-line {
  inset-block-start: 0;
  height: calc(100% - var(--distance-to-checkbox));
  border-inline-start-width: 1px;
  border-end-start-radius: 2px;
  pointer-events: none; // Improve hover effect
}

// - - - - - - - - - - - - - - - -
//        Expandable button
// - - - - - - - - - - - - - - - -
.expandable-button {
  display: grid;
  place-items: center;
  width: var(--expandable-button-width);
  height: var(--expandable-button-width);
  margin-inline-end: $separation-between-actions;
  z-index: 1;

  &::before {
    content: "";
    width: calc(100% - 2px);
    height: calc(100% - 2px);
    background-color: currentColor;
    -webkit-mask-size: calc(var(--expandable-button-width) - 2px);
  }

  &--collapsed::before {
    -webkit-mask-image: url('data:image/svg+xml,<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.15,8.5H8.54v5.61h-1V8.5H1.93v-1H7.54V1.89h1V7.5h5.61Z"/></svg>');
  }

  &--expanded::before {
    -webkit-mask-image: url('data:image/svg+xml,<svg viewBox="0 0 16 16" xmlns="http://www.w3.org/2000/svg"><path d="M14.15,8.5H1.93v-1H14.15Z"/></svg>');
  }

  &:focus-visible {
    outline: 1px solid #000;
  }
}

.checkbox {
  // width: var(--checkbox-size);
  // height: var(--checkbox-size);
  margin-inline-end: $separation-between-actions;
}

// - - - - - - - - - - - - - - - -
//             Action
// - - - - - - - - - - - - - - - -
.action {
  display: grid;
  grid-template: "left-img text right-img" / max-content 1fr max-content;
  align-items: center;
  height: 100%;
  flex: 1;

  :host(:not(.ch-tree-x-list-item--editing)) &:focus-visible {
    outline: 1px solid currentColor;
    z-index: 1; // Place the outline above the content
  }
}

.readonly-mode {
  padding-block: 0.75px;
}

.left-img,
.right-img {
  display: block;
  width: 0.875em;
  height: 0.875em;
}

.left-img {
  grid-area: left-img;
  margin-inline-end: 6px;
}

.right-img {
  grid-area: right-img;
  margin-inline-start: 6px;
}

.edit-name {
  grid-area: text;
  width: 100%;
  height: 100%;
  padding: 0;
  margin: 0;
  border: 1px solid currentColor;
  font: unset;
  outline: unset;
}

// - - - - - - - - - - - - - - - -
//           Downloading
// - - - - - - - - - - - - - - - -
.downloading {
  width: 0.75em;
  height: 0.75em;
  margin-inline-start: 8px;
  border: 2px solid currentColor;
  border-inline-start-color: transparent;
  border-radius: 50%;
  opacity: 0.75;
  animation: spin 1s linear infinite;
}

@keyframes spin {
  0% {
    transform: rotate(0deg);
  }

  100% {
    transform: rotate(360deg);
  }
}

// - - - - - - - - - - - - - - - -
//       Expandable content
// - - - - - - - - - - - - - - - -
.expandable {
  --parent-expandable-offset: 0px;
  --parent-negative-checkbox-offset: 0px;
  --parent-checkbox-offset: 0px;

  display: grid;
  grid-template-rows: 0fr;
}

.expanded {
  grid-template-rows: 1fr;
}

:not(.expanded) ::slotted([slot="tree"]) {
  display: none;
  overflow: hidden;
}
